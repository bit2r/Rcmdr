[["index.html", "설치형 오픈 통계 패키지 - Rcmdr 1 . 들어가며", " 설치형 오픈 통계 패키지 - Rcmdr 신종화, 이광춘, 유충현, 홍성학 2022-04-17 1 . 들어가며 한국 알(R) 사용자회는 디지털 불평등 해소와 통계 대중화를 오픈 통계 패키지 개발을 2021년부터 추진하였습니다. 더불어 설치형 오픈 통계 패키지를 신종화 님께서 John Fox 교수님이 개발한 Rcmdr 기반으로 한글화 및 문서화에 10년 넘게 기여해주셨습니다. 이에 한국 알(R) 사용자회는 신종화님의 Rcmdr 거인의 어깨위에 디지털 불평등 해소와 통계 대중화를 위해 한 걸음 더 나아가게 되었습니다. 특히 신종화님께서 기여하신 한글화 및 문서를 근간으로 더 많은 분들이 오픈 통계 패키지를 사용할 수 있도록 bookdown으로 내용을 정리하여 통계 대중화가 한층 앞당겨질 것으로 기대됩니다. 신종화님께서 왜 오픈 통계 패키지로 Rcmdr를 근간으로 해야 하는지 이유를 명쾌하게 다음과 같이 정리해 주셨습니다. R에는 여러 개의 GUI 작업도구들이 있습니다. 모두 목적이 분명하고, 좋은 도구이며, 일부는 현재도 향상작업이 진행되고 있습니다. 그럼에도 불구하고 R Commander를 위한 블로그 작업을 진행하는 이유는 크게 두가지 입니다. 첫째, R Commander는 직관적으로 기존의 기초통계학 도구와 유사합니다. Command Line 에서 작업하는 것에 익숙하지 않은, 또 어려움을 겪고 있는 사용자들에게 기초통계학분야를 학습하고 활용하는데 도움을 주기 위하여 R Commander가 개발되었습니다. 개발자인 John Fox 교수는 이 목적과 관리방향을 분명히하고 있습니다. 중급이상의 R 사용자/ 고급통계 연구자들에게는 R Commander가 불필요할 수 있습니다. 둘째, 지난 10년동안 R Commander의 메뉴 한글화작업을 진행해왔으며, 현재도 유지관리를 하고 있습니다. (이 정보는 R Commander 안의 Help &gt; About Rcmdr 에 있습니다) [Translations: Korean, Chel Hee Lee, Dae-Heung Jang, and Shin Jong-Hwa] 지난 10년 동안 개인적인 메모 차원에서 R Commander 사용 및 한글화 관련 블로그 포스트를 만들고 관리되어 왔고 블로그에 전체 과정이 고스란히 남아있고 계속적으로 유지관리될 것입니다. 신종화 Rcmdr : R Commander CRAN Rcmdr 패키지 정보 개발자 John Fox 교수의 Rcmdr 소개 FOSSER_Ricoop "],["install.html", "2 . 설치 2.1 맥OS 2.2 윈도우즈 2.3 RStudio 에서 Rcmdr 설치", " 2 . 설치 2.1 맥OS Rcmdr 통계 프로그램을 맥에서 설치하는 경우 다음 전제 조건을 충족시키고 순서대로 진행하여 설치작업을 완료한다. 가장 최신 맥OS로 갱신 R 설치 다운로드 XQuartz 설치 다운로드 재부팅 R.app에서 R 실행 메뉴에서 Packages &amp; Data &gt; Package Installer 이동 Rcmdr 검색 Rcmdr 선택 Install Dependecies 체크박스 클릭 Install Selected 클릭 R 명령 프롬프트에서 library(Rcmdr) 실행 자세한 사항은 아래 동영상 참조 2.2 윈도우즈 R 설치 다운로드 바탕화면 R x64 4.*.* 아이콘 더블클릭 R 실행 R 명령 프롬프트에서 install.packages(\"Rcmdr\", dep = TRUE) 실행 Rcmdr 패키지를 다운로드 받을 CRAN mirror를 선택 (예를 들어, 0-Cloud [https]) R 명령 프롬프트에서 library(Rcmdr) 실행 2.3 RStudio 에서 Rcmdr 설치 RStudio 설치 다운로드 콘솔 창에 install.packages(\"Rcmdr\") 입력 우측하단 Packages –&gt; install –&gt; Rcmdr 입력후 install 버튼 클릭 Rcmdr 실행 콘솔창에 library(“Rcmdr”) 입력 실행 "],["파일-file.html", "3 . 파일 / File 3.1 작업 디렉토리 바꾸기…/ File &gt; Change working directory… 3.2 스크립트 파일 열기…/ File &gt; Open script file… 3.3 스크립트 저장하기…/ File &gt; Save script… 3.4 스크립트 다른 이름으로 저장하기…/ File &gt; Save script as… 3.5 Open R Markdown file… 3.6 R Markdown 파일 저장하기…/ File &gt; Save R Markdown file.. 3.7 R Markdown 파일을 다른 이름으로 저장하기…/ File &gt; Save R Markdown file as… 3.8 출력물 저장하기…/ File &gt; Save output… 3.9 출력물을 다른 이름으로 저장하기…/ File &gt; Save output as… 3.10 R 작업공간 저장하기…/ File &gt; Save R workspace… 3.11 R 작업공간을 다른 이름으로 저장하기…/ File &gt; Save R workspace as… 3.12 나가기 &gt; Commander와 R에서 / File &gt; Exit &gt; From Commander and R 3.13 나가기 &gt; Commander에서 / File &gt; Exit &gt; From Commander", " 3 . 파일 / File 3.1 작업 디렉토리 바꾸기…/ File &gt; Change working directory… Windows 사례 R이 시작되는 곳, 불러올 데이터가 보관되는 곳, 그리고 데이터를 저장할 곳이 다른 경우가 흔히 발생한다. 흔히 ‘경로’ 변경과 관련된 일인데, 일일이 수작업으로 입력하기가 불편하다. GUI 환경에서 R 작업을 할 때, 효과적인 영역이다. MS-Windows 경우, user &gt; 문서 경로부터 화면이 시작된다. 관련된 함수는 getwd(), setwd() 등이 있다. 3.2 스크립트 파일 열기…/ File &gt; Open script file… Windows 사례 .R 형식의 스크립트 파일을 만드는 것은 R을 사용하는 데이터과학자의 일반적인 활동이다. 때로는 길게, 때로는 짧게 .R 파일들을 만든다. 저장된 파일을 다시 불러서 추가적인 작업을 하거나, 코드를 고치거나, 때로는 다른 사용자가 만든 .R 파일을 불러와 작업을 하는 것이 흔하다. .R 파일은 일반적으로 문서 편집기로 작업을 할 수 있다. R Commander는 입력창과 출력창을 나눠서 작업이 가능하기 때문에, 입력창을 문서 편집기처럼 활용해서 .R 파일을 작업할 수 있다. 3.3 스크립트 저장하기…/ File &gt; Save script… R Commander의 입력창에서 작업한 내용을 .R 파일 형식으로 저장한다. 저장하는 작업공간을 선택 또는 변경할 수 있다. RCommander.R이 기본설정으로 스크립트 이름이 나온다. 원하는 이름으로 변경하여 사용하자. 3.4 스크립트 다른 이름으로 저장하기…/ File &gt; Save script as… 작업한 스크립트 파일을 다른 이름으로 저장한다. 기본으로 설정된 파일 이름은 RCommander.R이다. 이름을 원하는 것으로 변경한다. 3.5 Open R Markdown file… R의 Reproducible Research 분야에서 온라인 웹보고서용으로 최근 크게 부각되는 형식이 Markdown이다. 제작된 R Markdown 파일을 불러오는데 사용하는 기능이다. 3.6 R Markdown 파일 저장하기…/ File &gt; Save R Markdown file.. R Markdown 파일을 (원하는 위치에) 저장한다. 3.7 R Markdown 파일을 다른 이름으로 저장하기…/ File &gt; Save R Markdown file as… R Markdown file을 열고 작업한 뒤에, 새로운 이름으로 변경하여 원하는 위치에 저장한다. 3.8 출력물 저장하기…/ File &gt; Save output… Linux 사례 (Ubuntu 18.04) 출력창에 다음과 같은 내용들이 있다고 가정하자: Linux 사례 (Ubuntu 18.04) 출력창에 나온 결과 값들을 파일로 저장한다. 이 파일은 기본설정으로 RCommander .txt 형식으로 되어있는데, 이름을 자유롭게 변경하여 저장할 수 있다. Linux 사례 (Ubuntu 18.04) RCommander.txt라는 이름으로 출력물을 파일로 저장하였다고 가정하자. 텍스트파일을 열고 편집할 수 있는 편집기를 열고 살펴보면 다음과 같이 저장된 것을 볼 것이다: library(carData) data(&quot;Prestige&quot;) str(Prestige) ## &#39;data.frame&#39;: 102 obs. of 6 variables: ## $ education: num 13.1 12.3 12.8 11.4 14.6 ... ## $ income : int 12351 25879 9271 8865 8403 11030 8258 14163 11377 11023 ... ## $ women : num 11.16 4.02 15.7 9.11 11.68 ... ## $ prestige : num 68.8 69.1 63.4 56.8 73.5 77.6 72.6 78.1 73.1 68.8 ... ## $ census : int 1113 1130 1171 1175 2111 2113 2133 2141 2143 2153 ... ## $ type : Factor w/ 3 levels &quot;bc&quot;,&quot;prof&quot;,&quot;wc&quot;: 2 2 2 2 2 2 2 2 2 2 ... summary(Prestige) ## education income women prestige ## Min. : 6.380 Min. : 611 Min. : 0.000 Min. :14.80 ## 1st Qu.: 8.445 1st Qu.: 4106 1st Qu.: 3.592 1st Qu.:35.23 ## Median :10.540 Median : 5930 Median :13.600 Median :43.60 ## Mean :10.738 Mean : 6798 Mean :28.979 Mean :46.83 ## 3rd Qu.:12.648 3rd Qu.: 8187 3rd Qu.:52.203 3rd Qu.:59.27 ## Max. :15.970 Max. :25879 Max. :97.510 Max. :87.20 ## census type ## Min. :1113 bc :44 ## 1st Qu.:3120 prof:31 ## Median :5135 wc :23 ## Mean :5402 NA&#39;s: 4 ## 3rd Qu.:8312 ## Max. :9517 저장할 파일의 이름을 결정하고, 파일로 저장한 이후에 &lt;출력물 저장하기…&gt; 기능은 출력물을 계속 업데이트해서 저장하는데 반복적으로 사용한다. 3.9 출력물을 다른 이름으로 저장하기…/ File &gt; Save output as… Linux 사례 (Ubuntu18.04) 출력 결과를 다른 이름으로 원하는 위치에 저장할 수 있다. 기본 설정된 파일 이름은 RCommander.txt 인데, 이름을 바꿔서 저장한다. Linux 사례 (Ubuntu18.04) 자료처리와 분석과정에서 여러 개의 출력물을 만드는 것이 일반적이다. 하나의 파일에 길고 많은 양의 출력파일을 만들기도 하지만, 분석과정에서 다양하게 분류될 수 있는 분석범주들을 구성할 때가 흔히 발생하기 때문이다. 출력물을 원하는 곳에 원하는 이름으로 저장하는데 쓰이는 기능으로 자주 활용된다. 3.10 R 작업공간 저장하기…/ File &gt; Save R workspace… 작업공간에서 만든/생성된 하나 이상의 객체를 원하는 이름의 파일로 저장할 수 있다. .RData 파일 형식인데, 이름을 만들어 원하는 위치에 파일을 저장할 수 있다. 메뉴에 Data &gt; load data set… 이 있다. 이 기능을 통하여 저장된 R 작업공간의 객체들을 다시 불러올 수 있다. 3.11 R 작업공간을 다른 이름으로 저장하기…/ File &gt; Save R workspace as… R 작업공간의 이름을 바꿀 수 있다. 이름을 바꾼다는 것은 앞서 생산한 작업공간 파일(.RData)을 불러들여서 추가 작업을 진행한 것을 뜻할 것이다. 3.12 나가기 &gt; Commander와 R에서 / File &gt; Exit &gt; From Commander and R Exit? Save script file? Save R Markdown file? Save output file? 등의 추가 질문을 받는다. File 메뉴에 있는 기능들과 동일하다. 사용자로 하여금 ‘시간과 노력을 들여 작업한 내용을’ 저장없이 잃어버리는 것을 환기시키기 위하여 제공된다. 터미날의 쉘 환경으로 돌아간다. 그런데 아쉬운 점이 하나 발생한다. 다시 R과 R Commander를 실행할 경우, 새로운 쉘을 이용해야 한다. 기존 쉘 환경에서는 입력내용이 화면에 출력되지 않는다. 예를 들어, From Commander and R을 실행하여 R을 종료한 다음, 다시 R을 실행하려고 ’R’을 쉘에 입력하면, 화면에 ’R’이 보이지 않는다. 하지만, R은 실행된다. 또 R 프롬프트에서도 입력이 되지 않는다. 3.13 나가기 &gt; Commander에서 / File &gt; Exit &gt; From Commander Exit? Save script file? Save R Markdown file? Save output file? 등의 추가 질문을 받는다. File 메뉴에 있는 기능들과 동일하다. 사용자로 하여금 ‘시간과 노력을 들여 작업한 내용을’ 저장없이 잃어버리는 것을 환기시키기 위하여 제공된다. Commander에서 나가면 R 프롬프트 상태가 된다. 다시 R Commander를 부르기 위해서 library(Rcmdr), require(Rcmdr) 등은 작동하지 않는다. 대신 Commander()를 사용한다. "],["편집-edit.html", "4 . 편집 / Edit 4.1 Edit/Edit R Markdown document 4.2 마지막 Markdown 명령어 블록 제거하기 / Edit &gt; Remove last Markdown command block 4.3 자르기 / Edit &gt; Cut 4.4 복사하기 / Edit &gt; Copy 4.5 붙이기 / Edit &gt; Paste 4.6 삭제하기 / Edit &gt; Delete 4.7 찾기 / Edit &gt; Find… 4.8 모두 선택하기 / Edit &gt; Select all 4.9 뒤돌리기 / Edit &gt; Undo 4.10 다시하기 / Edit &gt; Redo 4.11 창 지우기 / Edit &gt; Clear window", " 4 . 편집 / Edit 4.1 Edit/Edit R Markdown document 4.2 마지막 Markdown 명령어 블록 제거하기 / Edit &gt; Remove last Markdown command block (이 기능의 효과를 솔직히 모르겠다) 4.3 자르기 / Edit &gt; Cut 4.4 복사하기 / Edit &gt; Copy 4.5 붙이기 / Edit &gt; Paste 4.6 삭제하기 / Edit &gt; Delete 4.7 찾기 / Edit &gt; Find… 스크립트 창에서 원하는 문자열의 위치를 찾는다. 긴 스크립트인 경우, 효과적으로 사용할 수 있다. 4.8 모두 선택하기 / Edit &gt; Select all 스크립트창의 내용 모두를 선택할 수 있다. 4.9 뒤돌리기 / Edit &gt; Undo 바로 앞 단계의 작업으로 되돌아간다. Linux 사례 (Ubuntu 18.04) 입력창의 내용이 지워졌다고 가정하자. (가슴이 철렁할 것이다) 어떤 내용을 입력했는지 기억하기 어렵고, 다시 입력하는데 불편함을 느낄 것이다. 이 때 기능을 사용할 수 있다. 앞선 화면에서 지워진 입력창의 내용이 이 기능을 이용하면 다시 되살아난다: Linux 사례 (Ubuntu 18.04) : 입력창을 되살린 간혹, 복잡해진 출력창을 지우려다가 입력창을 지우는 경우가 있을 수 있다. 마우스의 커서가 있는 곳이 지워지기 때문이다. 이 때 기능을 이용하여 잘못 지워진 창의 내용을 되살릴 수 있다. 4.10 다시하기 / Edit &gt; Redo Undo 명령으로 앞 단계로 (후퇴하여) 되돌아간 상태에서 다시 앞의 단계로 전진하기 위하여 사용한다. Undo는 계속 뒤로 돌아가는 명령이며, Redo는 계속 앞으로 되돌아 나아가는 명령이다. 4.11 창 지우기 / Edit &gt; Clear window Linux 사례 (Ubuntu 18.04) 입력창 또는 출력창이 복잡해 보일 경우, 그래서 그 창을 지우고 다시 새롭게 입력창에서 작업하거나, 출력창으로 보고 싶을 때 사용하는 기능이다. 입력된 스크립트를 정돈하여 저장하거나, 출력물을 정돈하여 출력파일을 만들 때 활용된다. 예를 들어, 데이터셋을 불러오고, 데이터의 내부구조를 살펴보고, 요약정보를 보고자 한다면 다음과 같은 스크립트를 입력하고 또 출력해서 보게될 것이다: data(Prestige) # car 패키지의 Prestige 데이터셋 불러오기 str(Prestige) # Prestige 데이터셋의 내부구조 보기 summary(Prestige) # Prestige 데이터셋 요약정보 보기 이 때, 기능을 사용하면 창에 기록된 내용이 지워진다. Linux 사례 (Ubuntu 18.04) : 입력창 지우기 Linux 사례 (Ubuntu 18.04) : 출력창 지우기 지워지는 창은 마우스의 커서가 있는 곳이다. 입력창에 마우스 커서가 있는 경우에 를 하면 입력창이 지워지고, 출력창에 마우스 커서가 있는 경우에 를 하면 출력창이 지워진다. "],["분포-distribution.html", "5 . 분포 / distribution 5.1 난수생성기 시드(seed) 생성기… / Distributions &gt; Set random number generator seed… 5.2 분포도 5.3 이산분포 / Discrete distributions", " 5 . 분포 / distribution 5.1 난수생성기 시드(seed) 생성기… / Distributions &gt; Set random number generator seed… Linux 사례 (MX 21) 번호 하나를 선택한다. 그 번호는 앞으로 생성되는 난수 값들을 기억한다. Linux 사례 (MX 21) set.seed(9723) 5.2 분포도 5.2.1 연속 분포 &gt; 정규 분포 &gt; 정규 분위수…/ Distributions &gt; Continuous distributions &gt; Normal distribution &gt; Normal quantiles… Linux 사례 (MX 21) 확률을 넣고, 분포도의 (꼬리) 방향을 정해주면, 분위수가 계산된다. 을 95%(.095)로 선택해보자. 선택에 따라 어떻게 값이 변하는지 살펴보자. Linux 사례 (MX 21) Linux 사례 (MX 21) qnorm(c(.95), mean=0, sd=1, lower.tail=TRUE) ## [1] 1.644854 qnorm(c(.95), mean=0, sd=1, lower.tail=FALSE) ## [1] -1.644854 아래 화면에서 95% 확률로 방향의 값을 확인할 수 있다. Linux 사례 (MX 21) 5.2.2 연속 분포 &gt; 정규 분포 &gt; 정규 확률…/ Distributions &gt; Continuous distributions &gt; Normal distribution &gt; Normal probabilities… Linux 사례 (MX 21) 사례 값을 넣고, 분포도의 (꼬리) 방향을 정해주면 확률이 계산된다. Linux 사례 (MX 21) Linux 사례 (MX 21) Linux 사례 (MX 21) Linux 사례 (MX 21) pnorm(c(1.644854), mean=0, sd=1, lower.tail=TRUE) ## [1] 0.95 pnorm(c(1.644854), mean=0, sd=1, lower.tail=FALSE) ## [1] 0.04999996 pnorm(c(-1.644854), mean=0, sd=1, lower.tail=TRUE) ## [1] 0.04999996 pnorm(c(-1.644854), mean=0, sd=1, lower.tail=FALSE) ## [1] 0.95 Linux 사례 (MX 21) 5.2.3 연속 분포 &gt; 정규 분포 &gt; 정규 분포 그리기… / Distributions &gt; Continuous distributions &gt; Normal distribution &gt; Plot normal distribution… Linux 사례 (MX 21) &lt;밀도 함수 그리기 (Plot density function)&gt;를 선택하고 을 선택한 상황에서 몇 몇 사례를 만들어본다. Linux 사례 (MX 21) local({ .x &lt;- seq(-3.291, 3.291, length.out=1000) plotDistr(.x, dnorm(.x, mean=0, sd=1), cdf=FALSE, xlab=&quot;x&quot;, ylab=&quot;Density&quot;, main=paste(&quot;Normal Distribution: Mean=0, Standard deviation=1&quot;), regions=list(c(-1.644854, Inf)), col=c(&#39;#BEBEBE&#39;, &#39;#FFA500&#39;), legend.pos=&#39;topright&#39;) }) Linux 사례 (MX 21) Linux 사례 (MX 21) local({ .x &lt;- seq(-3.291, 3.291, length.out=1000) plotDistr(.x, dnorm(.x, mean=0, sd=1), cdf=FALSE, xlab=&quot;x&quot;, ylab=&quot;Density&quot;, main=paste(&quot;Normal Distribution: Mean=0, Standard deviation=1&quot;)) }) Linux 사례 (MX 21) Linux 사례 (MX 21) local({ .x &lt;- seq(-3.291, 3.291, length.out=1000) plotDistr(.x, dnorm(.x, mean=0, sd=1), cdf=FALSE, xlab=&quot;x&quot;, ylab=&quot;Density&quot;, main=paste(&quot;Normal Distribution: Mean=0, Standard deviation=1&quot;), regions=list(c(1.96, Inf), c(-Inf, -1.96)), col=c(&#39;#BEBEBE&#39;, &#39;#FFA500&#39;), legend.pos=&#39;topright&#39;) }) Linux 사례 (MX 21) &lt;밀도 함수 그리기 (Plot density function)&gt;를 선택하고 를 선택한 상황에서 몇 몇 사례를 만들어본다. Linux 사례 (MX 21) 에 입력할 수 있는 범위는 0에서 1까지의 확률이다. 이 범위 안에 들어오는 숫자는 아래 명령문 내부 regions에서 보이듯이 분위수로 전환된다. local({ .x &lt;- seq(-3.291, 3.291, length.out=1000) plotDistr(.x, dnorm(.x, mean=0, sd=1), cdf=FALSE, xlab=&quot;x&quot;, ylab=&quot;Density&quot;, main=paste(&quot;Normal Distribution: Mean=0, Standard deviation=1&quot;), regions=list(c(-1.64485362695147, 1.64485362695147)), col=c(&#39;#BEBEBE&#39;, &#39;#FFA500&#39;), legend.pos=&#39;topright&#39;) }) Linux 사례 (MX 21) Linux 사례 (MX 21) local({ .x &lt;- seq(-3.291, 3.291, length.out=1000) plotDistr(.x, dnorm(.x, mean=0, sd=1), cdf=FALSE, xlab=&quot;x&quot;, ylab=&quot;Density&quot;, main=paste(&quot;Normal Distribution: Mean=0, Standard deviation=1&quot;), regions=list(c(-Inf, 1.64485362695147)), col=c(&#39;#BEBEBE&#39;, &#39;#FFA500&#39;), legend.pos=&#39;topright&#39;) }) Linux 사례 (MX 21) Linux 사례 (MX 21) local({ .x &lt;- seq(-3.291, 3.291, length.out=1000) plotDistr(.x, dnorm(.x, mean=0, sd=1), cdf=FALSE, xlab=&quot;x&quot;, ylab=&quot;Density&quot;, main=paste(&quot;Normal Distribution: Mean=0, Standard deviation=1&quot;), regions=list(c(-Inf, 1.64485362695147), c(2.32634787404084, Inf)), col=c(&#39;#BEBEBE&#39;, &#39;#FFA500&#39;), legend.pos=&#39;topright&#39;) }) Linux 사례 (MX 21) 5.2.4 연속 분포 &gt; 정규 분포 &gt; 정규 분포의 표본…/ Distributions &gt; Continuous distributions &gt; Normal distributions &gt; Sample from normal distribution… Linux 사례 (MX 21) 창에는 다양한 선택 기능이 있다. 표본의 수 (행)과 관찰 수 (열)에 표본 범위를 넣자. ’데이터셋의 이름 입력하기’에는 원하는 이름을 넣을 수 있다. 나는 set.seed(번호)를 연상시키는 번호를 입력하기도 한다. Linux 사례 (MX 21) set.seed(9723) NormalSamples_9723 &lt;- as.data.frame(matrix(rnorm(10*5, mean=0, sd=1), ncol=5)) rownames(NormalSamples_9723) &lt;- paste(&quot;sample&quot;, 1:10, sep=&quot;&quot;) colnames(NormalSamples_9723) &lt;- paste(&quot;obs&quot;, 1:5, sep=&quot;&quot;) Set random number generator seed… 참고 Linux 사례 (MX 21) 5.3 이산분포 / Discrete distributions "],["data.html", "6 . 데이터 / Data 6.1 새로운 데이터셋…/ Data &gt; New data set… 6.2 데이터셋 탑재하기… / Data &gt; Load data set… 6.3 데이터 &gt; 데이터셋 병합하기… / Data &gt; Merge data sets… 6.4 데이터 가져오기 / Import data 6.5 패키지 데이터 / Data in packages 6.6 데이터 활성 데이터셋 / Data &gt; Active data set … 6.7 활성 데이터셋 변수 관리 / Manage variables in active data set", " 6 . 데이터 / Data 6.1 새로운 데이터셋…/ Data &gt; New data set… Windows 사례 메뉴를 선택하면 다음과 같은 화면으로 넘어간다. 만들고자하는 데이터셋의 이름을 정하는 기능이다. Dataset 이라고 기본 설정되어 있다. Windows 사례 새롭게 만들고자하는 데이터셋의 구조가 나타난다. 변수는 V1, V2, V3 등으로 자동적으로 일련변호화된다. Windows 사례 변수 3개(V1, V2, V3), 사례 3개(1, 2, 3) 등으로 열과 행을 추가할 수 있다. Windows 사례 셀(Cell)에 마우스를 놓고, 마우스의 오른쪽 버튼을 누르면 선택사항의 메뉴가 등장한다. Windows 사례 Tcl package ‘Tktable’ must be installed first 라는 오류 메세지가 뜰 수 있다. 데이터셋을 만들기 위하여 추가적인 패키지가 필요하다는 뜻이다. (내가 지금 작업하는 우분투 18.04 리눅스에서 맞대고 있는 상황이다) sudo apt install tktable*로 시스템에 추가 패키지를 설치하고, 다시 R 과 R Commander를 실행하면 테이블 형태의 새로운 데이터셋 (데이터프레임)을 만들 새로운 창이 뜬다. 행과 열을 추가하거나 지우고, 사례의 이름과 값을 넣고 지우는 방식으로 데이터셋을 만들 수 있다. 6.2 데이터셋 탑재하기… / Data &gt; Load data set… linux 사례 (Ubuntu 18.04) 저장된 R 데이터 파일을 메모리로 불러오는 기능이다. 확장자 .RData, .RDA 등으로 저장된 파일을 찾는다. linux 사례 (Ubuntu 18.04) 6.3 데이터 &gt; 데이터셋 병합하기… / Data &gt; Merge data sets… Linux 사례 (Ubuntu 18.04) 두 개 이상의 데이터셋이 객체로서 메모리에 있는 경우 (R Commander에서 인식하는 경우), Merge data sets…라는 기능을 이용할 수 있다. 데이터셋이 없거나 하나인 경우, 회색의 불활성 메뉴로서 표시된다. Linux 사례 (Ubuntu 18.04) 행 병합하기는 두개의 데이터셋을 위, 아래로 이어 붙인다. 열 병합하기는 두개의 데이터셋을 왼쪽, 오른쪽으로 이어 붙인다. ’행 병합하기’를 하려면 동일한 변수들을 갖고 있어야 하며, ’열 병합하기’를 하려면 동일한 사례들을 갖고 있어야 한다. carData 패키지에 있는 Prestige 데이터셋으로 연습해보자. Prestige 데이터셋 Prestige 데이터셋의 하위셋 Prestige.sub1과 Prestige.sub2 두개를 만들자. data(Prestige, package=&quot;carData&quot;) # Prestige 데이터셋 불러오기 Prestige.sub1 &lt;- Prestige[-c(61:nrow(Prestige)),] # Prestige 데이터셋에서 사례 지우기1 (61부터 끝까지) Prestige.sub2 &lt;- Prestige[-c(1:60),] # Prestige 데이터셋에서 사례 지우기2 (1부터 60까지) 10. Remove row(s) from active data set… &lt;- 화면의 메뉴를 이용하여 사례 제거를 연습할 수 있다. 아래의 내용은 Prestige.sub1과 Prestige.sub2를 병합하고자 하는 연습이다. &lt;첫째 데이터셋(하나 선택)&gt;과 &lt;둘째 데이터셋 (하나 선택)&gt;에서 데이터셋을 하나씩 선택하고, 공통의 데이터 구조를 가진 두개의 데이터셋을 이어붙이는 의 병합 방향을 선택해보자. Linux 사례 (Ubuntu 18.04) MergedDataset &lt;- mergeRows(Prestige.sub1, Prestige.sub2, common.only=FALSE) 6.4 데이터 가져오기 / Import data 6.4.1 엑셀 파일 / Import data &gt; from EXCEL file… Microsoft사의 Office 제품에 포함된 EXCEL은 광범위하게 사용되는 수치정보 관리 및 시각화 툴이다. 관리/재무 정보를 다루는 수많은 기업과 개인이 사용하기 때문에 R 사용자가 엑셀의 .xls, 또는 .xlsx 파일을 불러오는 요구는 매우 크다. 관심사가 크기 때문일까, R에서 EXCEL파일을 불러오기 위해서 개발자들이 만든 기여패키자들도 많다. R Commander에서 EXCEL파일을 불러오기 위하여 사용하는 외부 패키지도 변해왔다. 2019년 5월 현재는 readxl 이라는 패키지이다. EXCEL은 다른 통계분석툴과 달리 sheet 개념이 있다. 따라서 불러올 데이터의 객체화 과정에서 EXCEL 파일의 어느 sheet를 불러올 것인가를 선택할 수 있다. EXCEL은 다른 통계분석툴과 달리 데이터 프레임화에 필요한 변수명에 대한 강한 규칙을 갖고 있지 않다. 따라서 R Commander의 기본 설정은 선택된 sheet의 첫 행의 정보를 변수 정보로 활용하는 것이다. 6.4.2 STATA 데이터 / Import data &gt; from STATA data set… STATA는 사회과학분야의 고급통계문화에서 많이 사용하는 분석툴중 하나이다. SPSS처럼 문자 변수를 요인화시키는 것이 기본 설정이다. 날짜를 R 형식으로 전환하는 것이 기본 설정이다. (추후 논의하겠다) 6.4.3 미니탭 데이터 / Import data &gt; from Minitab data set… 6.4.4 SAS 데이터 / Import data &gt;from SAS b7dat file… 6.4.5 SAS 데이터 / Import data &gt; from SAS xport file… 6.4.6 SPSS 데이터 / Import data &gt; from SPSS data set… 데이터셋의 기본이름은 Dataset으로 되어있다. 원하는 (영문)이름으로 바꿀 수 있다. 기본설정으로 클릭되어 제공되는 선택사항이 ’Convert character variables to factors’이다. 문자형 변수를 요인형 변수로 바꾼다는 것이다. 문자형을 요인형으로 바꾸는 것이 필요한가? 필요하지 않은가? 이 질문은 R을 이해하는 데 있어서 중요하다. 필요할 수 도 있고, 불필요하고 오히려 분석에 거추장스러울 수 있다. 하지만, R Commander에서 제공하는 대부분의 기능은 문자형을 요인형으로 만들어 처리한다. SPSS라는 인기있는 GUI 사회과학 통계분석툴이 있다. 70년대 초반부터 발전해온 전산 통계툴이기 때문에, 대부분의 학자들에게 무척 친숙하다. SPSS 경험자들이 R을 배울 때 어색한 개념이 factor이다. R의 데이터 유형(Type) 중 하나인 factor는 흔히 ‘범주형(categorical)’ 으로 SPSS 사용자들이 이해하고 있기 때문이다. 아울러 factor하면 요인분석에서 등장하는 개념으로 바로 넘어가는 경우가 흔하다. 요인형으로 바꾸는 이유는 시각화 작업과도 연관성이 크다. R에서 시각화되는 정보는 수치형과 요인형이다. 수치형은 연속형 자료로, 요인형은 이산형 자료로 시각화되기 때문에, plot()로 호출되는 방식이 크게 다르다. 문자형을 요인형으로 바꾼다는 것은 곧 시각화 준비를 마쳤다는 의미이기도 하다. 6.4.7 데이터 &gt; 데이터 불러오기 &gt; 텍스트 파일, 클립보드 또는 URL에서…/ Import data &gt; from text file, clipboard, or URL… Linux 사례 (MX 21) 개인적인 경험과 판단이지만, R에서 외부 데이터 파일을 불러오는 것을 초급자들은 너무 어려워한다. 쉽지 않다. 분석과 시각화 작업을 하기에 앞서서 자료 불러오기가 어려우니, 많은 사람이 쉬운 GUI 분석도구로 되돌아가려고 한다. read.table() 계열 함수가 어렵다. R Commander는 이러한 불편함을 최소화하기 위하여 인자들을 쉽게 선정하도록 화면 구성이 되어있다. 하지만, 먼저 알아야할 것이 있다. R Commander에서 불러오는 객체, 다시말해 외부 데이터 파일로부터 불러올 대상은 반드시 데이터 프레임 형식을 취한다. 변수이름을 갖고, 엑셀과 같은 스프레드시트 형식으로 사례값들이 배열되어 있는 것만 GUI 메뉴로 작업할 수 있다. 만약, 데이터프레임 형식이 아니라면, 일반 콘솔 환경과 같은 조건에서 Command Line 작업을 해야한다. Linux 사례 (MX 21) data set의 기본이름은 Dataset이다. 원하는 것으로 이름을 바꿀 수 있다. 가급적 영문을 추천한다. 행여 다른 시스템에서 파일이름의 호환문제를 겪을 수 있기 때문이다. (위의 메뉴 창에서는 Nations라고 데이터셋의 이름을 변경했다.) 결측치 표시는 NA가 기본설정이다. 외부 파일을 불러올지, 메모리(clipboard)에서 불러올지, 외부인터넷 경로에서 내려받을 지를 선택할 수 있다. 필드 구분자를 선택할 수 있다. 사실, 필드 구분자가 초급자에게는 어렵다. 빈 공백, commas, 세미 콜론, 탭 등이 사용되기 때문에 혼란스러울 수 있다. 일반적으로 .txt로 되어 있는 것은 빈 공백, .csv로 되어 있는 파일은 comman인 경우가 흔하다. 하지만, 정확한 내부 규칙이 없기 때문에 어려개를 번갈아 선택해봐야할 수 있다. Decimal-Point의 경우, 한국은 미국스타일의 Period[.]를 관행적으로 쓰기 때문에 기본설정을 따르면 된다. Linux 사례 (MX 21) Nations &lt;- read.table(&quot;/home/jhshin/다운로드/Rcmdr/inst/etc/Nations.txt&quot;, header=TRUE, stringsAsFactors=TRUE, sep=&quot;&quot;, na.strings=&quot;NA&quot;, dec=&quot;.&quot;, strip.white=TRUE) Nations라는 이름으로 불러온 데이터셋이 활성화되어 R Commander 에서 활용할 수 있는 환경이 시작된다. 사례를 하나 소개한다. libreOffice Calc에서 엑셀파일을 불러오고, 또 이것의 첫 시트를 clipboard에 복사하고, R Commander로 불러온다고 생각해보자. Locatioin of Data File에서 Clipboard를 선택하고, Field Separator에서 Tabs(탭)을 선택해야 한다. 기본설정을 바꿔야한다는 뜻이다. 한가지 유의해야할 것은 변수이름이 바뀌는 규칙이 있다는 점이다. R에서는 괄호를 변수이름에 넣을 수 없다. 앞뒤 괄호는 ..으로 바뀐다. ’연락처(대표)’는 ’연락처.대표.’로 바뀐다. 데이터 파일이 (어떤 규칙성에 의하여 성공적으로) 불러와지면, 상단의 R 아이콘 옆에 Data set:에 파란 색의 객체이름이 보인다. 기본설정이라면 Dataset이 될 것이다. 6.5 패키지 데이터 / Data in packages 6.5.1 패키지의 데이터셋 목록 / Data in packages &gt; List data sets in packages Windows 사례 R과 Rcmdr에서 불러온 패키지에 담겨있는 데이터셋의 목록을 보여준다. data() 함수를 사용한다. R이 시작될 때 기본 설정으로 함께 호출되는 Datasets 패키지, Rcmdr 패키지를 호출할 때 의존성을 갖는 carData, sandwish 패키지의 데이터셋 목록을 포함한다. Windows 사례 6.5.2 첨부된 패키지에서 데이터셋 읽기…/ Data in packages &gt; Read data set from an attached package… Windows 사례 R에는 많은 예제 데이터셋이 있다. 대부분의 패키지들에 예제 데이터셋이 담겨 있다. R과 R Commander를 사용하는 과정에서 불러온, 다른 말로 하면 메모리로 호출된 패키지들에 데이터셋이 포함되어 있을 수 있다. 예제로 포함된 데이터셋을 선택하여 메모리 안으로 불러들일 때, 이 기능을 사용한다. 주로 통계 방법론이나 함수 사용법을 연습할 때, 주로 활용하게 된다. 하나의 사례로서, carData 패키지의 Prestige 데이터셋을 선택한다. Windows 사례 Windows 사례 출력 창을 보면, data() 함수가 사용됨을 알 수 있다: data(데이터셋이름, package=\"패키지이름\") Windows 사례 6.6 데이터 활성 데이터셋 / Data &gt; Active data set … 6.6.1 활성 데이터셋 &gt; 데이터 보기…/ Active data set &gt; View data… 메모리로 불러온 데이터의 내부 값들을 볼 때 사용한다. 데이터프레임화 된 객체 전체를 보거나, 일부 변수들만 추려서 볼 수도 있다. Linux 사례 (MX 21) 기본 설정에는 ’모든 변수 포함하기’가 선택되어 있다. Linux 사례 (MX 21) 데이터셋의 크기가 작거나, 변수의 갯수가 적은 경우는 크게 무리 없이 ’모든 변수 포함하기’를 이용할 수 있다. Linux 사례 (MX 21) 데이터셋에 대한 이해가 깊어지고, 분석의 대상의 명확해지면서 소량의 변수를 중심으로 데이터를 살펴볼 경우도 있다. 이 때는 ‘모든 변수 포함하기’ 설정을 해제하고 필요한 변수들만으로 제한할 수 있다. Prestige 데이터셋에서 교육연수와 수입(연봉)이 직업의 권위에 대한 인식에 어떤 영향을 미치는가를 연구주제로 정했다고 하면, education, income, prestige 등의 변수로 제한할 수 있다: Windows 사례 (10 Pro) Windows 사례 (10 Pro) relimp::showData() 조금 난이도가 있는 고민을 해보자. 데이터셋 내부를 보고자 한다. 그러나, 데이터셋에 대한 기초적인 이해를 확보한 이후, 범위를 좁혀서 통찰력을 키우기 위하여 다양한 방식으로 데이터셋 내부를 보고자 할 수 있다. 몇 개의 변수를 선택하고, 또 요인형 변수의 어느 수준으로 제한된 범위 안에서 데이터셋 내부를 볼 수 있다. 아래 화면에서 원하는 변수를 선택하고, 을 추가한 것을 볼 수 있다. type (직업 유형)에는 bc, prof, wc 라는 수준이 있다는 것을 미리 알고, white collar 직업군 내부의 정보를 보고자 type == “wc”로 제한하도록 하자. Windows 사례 (10 Pro) 아래의 데이터는 Prestige 데이터셋에서 white collar 직업군으로 제한하여, education, income, prestige, women 변수의 사례를 출력한 결과이다. Windows 사례 (10 Pro) 6.6.2 활성화된 데이터셋 선택하기…/ Active data set &gt; Select active data set… 메모리에 여러개의 데이터셋이 올려져 있을 수 있다. 그 중 하나를 선택하는 기능이다. 여러 개의 데이터셋에서 하나를 선택한다는 것은 그 데이터셋을 갖고 분석 작업을 수행하겠다는 것으로 이해할 수 있다. 그 과정에서 매번 그 데이터셋을 지정할 필요가 없다는 것이다. Linux 사례 (MX 21) 메모리에 탑재된 데이터셋이 하나인 경우 다음과 같은 경고문을 알림글에서 보게 된다. Linux 사례 (MX 21) 아래와 같이 두개의 데이터셋이 메모리에 있다고 가정하자. 이 경우 어느 데이터셋을 선택해서 자료처리와 분석을 진행할 것인가를 결정해야 한다. Linux 사례 (MX 21) 아래 화면은 Prestige 데이터셋이 선택된 상황이다. 예(OK)를 누른다. Linux 사례 (MX 21) R Commander 화면에서 R 아이콘 옆에 ‘데이터셋: Prestige’ 이 뜬다. Linux 사례 (MX 21) 만약, Moore 데이터셋을 선택하면 ’데이터셋: Moore’로 바뀐다. Linux 사례 (MX 21) Linux 사례 (MX 21) 한편, 위와 같은 방식 (Pull-down)의 메뉴와 기능 선택을 거치지 않고, 바로 데이터셋을 바꿔가며 활성화시켜 작업하고자 할 때는 마우스를 이용하여 바로 버튼을 누를 수 있다. 파란색의 Prestige 버튼을 눌러보라: Linux 사례 (MX 21) 6.6.3 활성 데이터셋 다시활력넣기(refresh) / Active data set &gt; Refresh active data set 메모리에 올려진 데이터셋으로 작업하는 경우, 변수와 사례를 추가/삭제하는 경우가 빈번하게 발생한다. 줄여 말하면, 벡터를 만들거나 삭제할 수 있다. 이 경우, 작업이 진행된 객체의 ‘현재’ 정보가 필요한 경우가 있다. 객체의 행과 열, 변수와 사례의 갯수를 업데이터해서 메세지로 알려준다. Linux 사례 (MX 21) 6.6.4 활성 데이터셋에 관한 도움말 (만약 이용가능하다면) / Active data set &gt; Help on active data set (if available) R에서 이용가능한 많은 패키지에는 예제용 데이터셋이 많이 포함되어 있다. 이러한 예제용 데이터셋은 대부분 도움말을 갖고 있다. 내장된 예제용 데이터셋을 활성 데이터로 불러온 경우는 이 명령을 유용하게 사용할 수 있다. Linux 사례 (MX 21) carData 패키지의 Prestige 데이터셋이 활성화되었다면, 도움말을 볼 수 있다: Windows 사례 help(&quot;Prestige&quot;) help(Prestige) ?(Prestige) 등으로 입력창에 직접 입력할 수 도 있다. help(\"데이터셋이름\") 아래의 참고사항은 Prestige 데이터셋과 유사하게, carData 패키지에 담겨있는 DavisThin 데이터셋이다. 같은 방식으로 연습할 수 있다. DavisThin 데이터셋 6.6.5 활성 데이터셋의 변수 / Active data set &gt; Variables in active data set 활성 데이터셋으로 불러온 데이터프레임에는 사례값들을 가지는 변수가 있을 것이다. 변수이름을 목록화시켜 보여주는 기능이다. 예제용 데이터셋은 핵심적인 목적을 위하여 정제된 경우가 대부분이기 때문에 이 기능이 큰 효과를 가지지 않는다. 하지만, 백 개 이상의 변수를 가진 데이터들도 흔한 상황에서 분석을 위한 데이터셋을 불러온 경우, 그리고 변수들이 많은 경우, 이 기능은 효과적으로 사용될 수 있다. Linux 사례 (MX 21) 활성 데이터셋에 있는 변수들의 목록이 출력된다. Prestige 데이터셋에는 있는 변수 목록은 다음과 같다: library(carData) data(&quot;Prestige&quot;) names(Prestige) ## [1] &quot;education&quot; &quot;income&quot; &quot;women&quot; &quot;prestige&quot; &quot;census&quot; &quot;type&quot; names(데이터셋) 6.6.6 사례 이름 정하기… / Active data set &gt; Set case names… 활성 데이터셋으로 사용되는 데이터프레임은 행과 열을 갖는다. 변수이름이 열을 대표한다. 행의 경우, 일련번호로 사례를 대표하기도하고 고유한 이름을 붙이기도 한다. 이 기능은 행의 이름을 지정하는 것이다. 그런데, 이 기능을 사용하기 위해서는 R의 특징을 알아야 한다. 첫째, 사례 이름은 유일해야 한다. 동일한 행의 이름을 넣을 수 없다는 것이다. 이 원칙은 행의 이름으로 사용하기 위해서 변수들에서 하나를 선택해야하는 이 기능 에서 많은 변수들이 이 원칙을 위배하기 때문에 오류문을 생산하는 경우가 흔하다. 행이름은 흔히 key 값이라 부르는 고유성을 가져야 하는데, 이 고유성이 어느 변수의 사례값에서 발견되기는 쉽지 않다. Linux 사례 (MX 21) 메뉴창에서, Prestige의 어떤 변수를 선택하더라도 알림글에 ’오류: 사례 이름은 유일해야 합니다.’는 메세지를 볼 것이다. 숫자 형태의 일련번호 또는 개별화된 문자형 사례 이름에는 중복되는 이름을 넣을 수 없다는 뜻이다. Windows 사례 Prestige 데이터셋의 변수이름은 아래와 같이 문자형 정보를 담고 있다. 만약 숫자 형태의 일련번호가 있었다면, 직업 이름을 담고 있는 변수의 사례들을 행 이름으로 바꿀 수 있었을 것이다. Windows 사례 row.names(데이터셋이름) 6.6.7 활성 데이터셋의 하위셋 만들기… Data &gt; Active Data set &gt; Subset active data set… 데이터셋에 담긴 모든 변수를 분석에 활용하는 경우는 거의 없다. 분석을 위하여 데이터셋의 일부를 사용하는 경우가 일반적이다. 분석에 필요한 변수집단을 선택하여 하위셋을 만드는 기능이다. Linux 사례 (MX 21) 변수집단을 선택할 경우는 에 기본지정된 옵션을 해제해야 한다. 물론 변수일부를 선택하는 것과 별개로 사례값(행) 일부를 선택할 수도 있다. 이 경우는 사용자가 직접 에 스크립트를 입력해야 한다. 초보자는 당황할 수 있다. Windows 사례 변수 일부나 행 일부를 선택한 후에는 새로운 데이터셋 이름을 입력해야 한다. 그렇지 않으면 기존 데이터셋 이름을 덮어쓰는 위험이 발생한다. 경험적으로 나는 하위데이터셋 이름은 데이터셋.sub1, 데이터셋.sub2 또는 sub1.데이터셋, sub2.데이터셋 등으로 사용하여 원데이터의 이름을 유지시킨다. Prestige 데이터셋에서 변수 네개를 선택한다고 하자. education, income, prestige, type 변수를 선택하고, sub1.Prestige라고 데이터셋의 이름을 붙였다고 하자. Windows 사례 그런데, type 변수에는 “prof,” “bc,” “wc”라는 요인(factor)형 정보가 담겨있다. 이 중에서 전문직(prof)에 관한 데이터의 정보만 추출하려면 다음과 같이 조건을 지정해야 한다. Windows 사례 다음 화면의 입력창, 출력창, 알림글을 살펴보라. 활성 데이터셋의 이름이 sub1.prof.Prestige라고 바뀌었고, subset()의 인자가 추가되었으며, sub1.prof.Prestige 데이터셋의 행과 열 정보를 찾을 수 있다: Windows 사례 Windows 사례 subset(데이터셋이름, subset=조건, select=선택된변수목록) 6.6.8 활성 데이터셋 정렬하기…/ Active Data set &gt; Sort active data set… 데이터셋의 행의 순서를 조정할 수 있다. 이 기능은 특정 변수(들)을 선택하여 증가/감소 등의 순서로 행의 순서를 조정하는 기능이다. 보통 데이터셋에서 필요 변수(사례들)를 선택하여 하위셋을 만들고, 이후 내용적인 이해를 위하여 이 기능을 사용한다. Linux 사례 (MX 21) 새롭게 정렬할 변수(들)을 선택하고, 증가/감소 등의 방향을 결정한 후, 새로운 데이터셋의 이름을 입력하게 된다. 입력하지 않으면 현재 사용중인 데이터셋의 이름을 덮어쓰는 위험이 있다. 경험적으로 나의 경우는 데이터셋.sort1, 데이터셋.sort2 등으로 새로운 데이터셋의 이름을 정한다. 직종의 권위에 대한 인식의 높낮이를 기준으로 자료를 정렬해보자. prestige 변수를 선택하고, 에서 감소하기를 선택하고, 에서 Prestige.sort1 이라고 입력한다. Windows 사례 출력창에 함수의 용례를 확인할 수 있다. 정렬의 기준 변수를 선택하고, order() 함수와 높은 순서로 정렬하는 인자인 ’decreasing=TRUE’를 사용한다. 새로운데이터셋 &lt;- with(활성데이터셋, 활성데이터셋[order(기준변수이름, decreasing=TRUE), ]) 등의 함수 용례를 보게된다: Windows 사례 R Commander의 상단에 있는 R 아이콘 옆에 &lt;데이터셋: Prestige.sort1&gt;이라고 활성데이텃 이름이 바뀐 것을 보게될 것이다. 어떻게 데이터셋이 정렬되었는지 보려면 버튼을 누른다. Windows 사례 두개 이상의 변수를 선택할 경우는 추가 대화창에서 정렬 키의 순서를 결정할 수 있다. 직업의 권위가 높은 순서로, 교육 연수가 높은 순서로 정렬해보자. Windows 사례 기준(key)이 되는 변수가 하나일 때와 달리, 둘 이상의 변수를 선택할 때는 창이 등장한다. 앞서 만든 기준을 위하여 prestige를 1로, education을 2로 순서를 바꿔보자. Windows 사례 R Commander의 화면에서 활성 데이터셋이 Prestige.sort2로 바뀐다. 그리고 출력창에 새로운 함수 용례가 다음과 같이 등장할 것이다. 새로운데이터셋 &lt;- with(활성데이터셋, 활성데이터셋[order(기준변수1이름, 기준변수2이름, decreasing=TRUE), ]) Windows 사례 를 눌러서 정렬의 결과를 살펴보자. prestige 변수의 사례 값이 68.8인 것이 두개 있다. mining.engineers, gov.administrators 인데, 둘째 기준변수인 education의 높은 순서로 정렬되어 있다. 각각 14.64, 13.11 이다. 앞서 기준변수가 prestige 하나였던 데이터셋과 정렬을 비교해보자. 상단의 Prestige.sort1 데이터셋에는 gov.administrators가 mining.engineers보다 위에 있는 것을 확인할 수 있다. Windows 사례 6.6.9 활성 데이터셋의 합계 변수… / Active data set &gt; Aggregate variables in active data set… Linux 사례 (MX 21) 데이터셋의 변수에는 수치형과 범주형, 문자형 등이 있다. 범주형 변수, 보통 R에서 factor(요인)형이라 부르는 변수를 기준으로 수치형 값들을 묶을 수 있다. 이 기능을 이해하기 위해서는 사용자가 수치형/요인형/문자형 등의 데이터유형에 대하여 알고 있어야 한다. 대화창에서 &lt;Aggregate by (하나 이상 선택) &gt; 에 등장하는 변수는 요인형 변수이며, 이 변수의 개별 요인형 사례를 기준으로 나머지 변수들의 정보가 묶이게 된다. 아래 화면의 type 변수는 요인형 변수이며, 나머지 변수는 수치형 변수인 것이다. &lt;평균/합/다른 (지정하기)&gt;의 옵션에서 선택할 수 있다. 은 ’AggregateData’로 지정되어 있으나, 사용자가 임의로 바꿔서 사용할 수 있다. Windows 사례 예(OK)를 누르면, AggregatedData라는 데이터셋이 생성된다. 를 통해서 내부를 살펴보면, 직업 유형 (type)별로 직업의 권위에 대한 인식(prestige)의 평균 값이 보인다. Windows 사례 하나 이상의 수치형 변수를 선택해보자. Prestige 데이터셋에서 세개의 변수, education, income, prestige 를 선택하고 예(OK) 버튼을 누르자. Windows 사례 버튼을 눌러 AggregatedData 내부를 살펴보면, 직업 유형 (type) 별로, 교육 연수(education), 연 수입(income), 권위 인식(prestige)의 평균 값이 확인할 수 있다. Windows 사례 아래 입력창은 두개의 합계 데이터셋을 만든다. AggregatedData, AggregatedData1인데, aggregate() 함수가 사용되는 것을 알 수 있다. Windows 사례 합계데이터셋 &lt;- aggregate(수치형변수 ~ 요인형변수, data=활성데이터셋, FUN=mean) 6.6.10 활성 데이터셋에서 행(rows) 제거하기…/ Active data set &gt; Remove row(s) from active data set… Linux 사례 (MX 21) 활성 데이터셋에서 행을 제거하는 기능이다. 대화창이 열리면 사용자는 제거할 행의 정보를 알고 있는 상황에서 제거를 위한 행을 지정해야 한다. 색인 또는 행의 이름, 행의 일련번호 등을 알고 있어야 한다. 초보자에게는 쉽지 않은 기능이다. Linux 사례 (Ubuntu 18.04) 예를 들어 100개의 사례가 일련번호로 지정되어 있다고 가정하자. 1번을 제거하기 위해서는 1을 입력하면 되고, 90번을 제거하기 위해서는 90을 입력하면 되고, 11번에서 20번까지 묶음을 제거하려면 11:20을 입력하면 된다. 만약 1, 11:20, 90을 한꺼번에 제거하려면 어떻해야할까. 1, 11:20, 90을 넣으면 오류문이 출력된다. 오류문을 살펴보면 쉼표(,)가 두 개 찍혀있는 것을 보게될 것이다. 1 11:20 90 으로 입력하면 작동할 것이다. 빈공간(스페이스)이 쉼표 기능을 한다. 예를 들어, Prestige 데이터셋은 6개의 변수와 102개의 사례가 있다. 91번부터 102번까지 12개의 사례를 제거하려고 한다. 다음과 같이 ’91:102’를 &lt;제거할 색인 또는 인용된 행(row) 이름&gt; 에 입력한다. Linux 사례 (Ubuntu 18.04) 출력창을 살펴보자. 다음과 같은 형식이다: 새로운데이터셋 &lt;- 활성데이터셋[-c(제거시작행번호: 제거마지막행번호), ] 출력창 아래를 보면 알림글에서 사례의 갯수가 90개로 바뀌었음을 알 수 있다. Linux 사례 (Ubuntu 18.04) 이렇게 제거할 행을 지정하면, 행의 일련번호가 바뀌는 것을 기억해야 한다. 으로 데이터셋을 지정하는 것이 필요하다. 이름을 입력하지 않으면 기존 활성 데이터셋 이름을 덮어쓰는 위험이 있다. 한편, Prestige 데이터셋의 type 변수에 값이 입력되지 않은 것이 있다. newsboys, babysitters, farmers 라는 사례명을 가진 행의 type 변수 칸에는 으로 되어있다. Linux 사례 (Ubuntu 18.04) babysitters, farmers라는 두개의 사례를 제거해보자. 이 경우는 앞서서 행의 번호를 입력한 것과 달리 “babysitters,” “farmers”라고 입력해야 한다. Linux 사례 (Ubuntu 18.04) 다소 생소하고 복잡해 보이는 방식으로 명령문을 입력해야 한다. 논리적으로 보면, 데이터셋의 사례 이름들 중에서 제거하고자 하는 사례 이름들을 찾아서 데이터셋에서 삭제하라는 뜻이다. 새로운데이터셋 &lt;- 활성데이터셋[!(rownames(활성데이터셋) %in% c(“제거사례이름1,” “제거사례이름2”)), ] Prestige.sub1 데이터셋에서 babysitters, farmers 두개의 사례를 제거했기 때문에, 알림글의 지시문을 보면 사례수는 90개에서 88개로 줄어들었음을 확인할 수 있다. 6.6.11 활성 데이터셋의 누적변수…/ Active data set &gt; Stack variables in active data set… Linux 사례 (MX 21) 변수에는 수치형 변수와 요인(범주)형 변수, 문자형 변수 등이 있다. 수치형 변수이름을 요인화시켜 데이터셋을 재배열화시키는 것이 이 기능이다. , , 에 미리 추천된 내용이 입력되어 있으나 사용자가 임의로 새롭게 지정할 수 있다. 일반적으로 변수이름을 바꾸기도 한다. Windows 사례 재배열된 데이터셋에서 선택된 수치형 변수들은 요인화된 새로운 변수의 요인 이름으로 변하기 때문에 일반적으로 데이터셋의 사례가 크게 증가한다. 변수를 2개 선택하면 2배, 3개 선택하면 3배로 행의 길이가 길어진다. 위의 화면에서 변수 두개, education, income을 선택하고 나머지를 기본설정 그대로 유지하고 예(OK) 버튼을 누른다. 아래 화면처럼 변경 사항들이 등장한다. R 아이콘 옆에&lt;데이터셋: StackedData&gt;으로 활성 데이터셋이 변경되고, 알림글에 StackedData 데이터셋의 행과 열 정보가 등장한다. Windows 사례 새로운데이터셋 &lt;- stack(활성데이터셋[, c(“선택된수치형변수1,” “선택된수치형변수2”)]) names(새로운데이터셋) &lt;- c(“새로운변수이름1,” “새로운변수이름2(요인형변수)”) 버튼을 누르면 어떤 형식으로 데이터셋이 재구성되는지 확인할 수 있다. Windows 사례 Windows 사례 Q1) stack() 함수를 이용하여 만든 누적변수는 어떤 분석에 사용되나요? 만약 두개 연도의 정보가 여러개의 변수로 저장되어 있다고 가정해보겠습니다. 동일 정보대상에 대한 두개 연도의 정보를 비교하고자 할 때, 두개의 연도별 변수를 하나의 변수로 만들고, 각 연도를 요인형으로 변화시켜 분석하는 것입니다. 유사하게, 남녀 등의 성별로 두개의 변수들이 구성되어 있거나, 1학년~3학년 등으로 중고등학교 학년의 변수들이 있을때, 남녀별-학년별 등으로 수치형 정보의 흐름을 살펴보고, 또 비교분석하고자 할 때 활용되는 데이터의 형식 변경 기능입니다. 6.6.12 결측자료 사례 제거하기…/ Active data set &gt; Remove cases with missing data… 데이터셋에 결측자료가 포함되는 경우가 흔하다. Count missing observations 관측 결측치 셈하기 Statistics &gt; Summaries &gt; Count missing observations 데이터셋을 구성하는 사례에 값이 입력되지 않은 결측치가 있는 경우가 있다. 어떤 변수에 관측값이 없는 결측치가 있는지를 확인할 분석을 앞두고 결측자료(결측데이터)를 어떻게 처리할 것인가가 중요한 경우도 많다. 결측데이터(결측자료)를 제거하는 기능이다. 결측자료가 많은 상황에서 모든 결측자료를 제거하면 사례의 수가 크게 감소하는 위험이 발생하기도 한다. 그래서 결측자료를 제거하기전에 분석에 필요한 하위셋을 먼저 만드는 것을 추천한다. Linux 사례 (MX 21) 분석에 사용될 하위셋을 만들고, 결측자료를 제거할 때 /&lt;변수 (하나 이상 선택)&gt;을 결정해야 한다. 선택 이후 새로운 데이터셋 이름을 지정하는 것을 추천한다. Windows 사례 출력창의 정보를 보면 na.omit() 함수가 사용된다. 결측치 4개가 제거된다. 행의 수가 102개에서 98개로 축소된다. Windows 사례 새로운데이터셋 &lt;- na.omit(활성데이터셋) 만약, 데이터셋에서 분석에 포함되는 변수 선정이 분명하고, 선정된 변수들 안에 있을 수 있는 결측치를 제거하고자 할 때는 대신 &lt;변수 (하나 이상 선택) &gt;에서 변수들을 선택하면 된다. Windows 사례 출력창을 보면, 의 명령문보다 복잡하다. Windows 사례 새로운데이터셋 &lt;- na.omit(활성데이터셋[ , c(“선택변수1,” “선택변수2,” “선택변수3,” “선택변수4”)]) 6.6.13 긴 형식에서 넓은 형식으로 데이터셋 모양바꾸기…/ Active data set &gt; Reshape data set from long to wide format… Linux 사례 (MX 21) 간혹, ID를 갖는 주체(subject, 주로 사람 또는 집단의 개체)가 반복적으로 사례 값을 갖는 데이터가 있다. 또는 시간의 경과/어떤 사건 전후에 따른 변화값을 갖는 개체들을 다루는 분야에서는 흔한 데이터 형식일 수 있다. carData 패키지에 포함된 OBrienKaiser, OBrienKaiserLong 데이터를 살펴보자. OBrienKaiser 데이터셋 요약정보 OBrienKaiserLong 데이터셋 요약정보 먼저 OBrienKaiserLong 데이터를 살펴보자. id 변수를 보면 개체 번호(subject)가 반복됨을 알 수 있다. phase 변수는 pre, post, fup가 hour 변수는 1, 2, 3, 4, 5가 반복된다. Linux 사례 (Ubuntu 18.04) 전체 240개의 사례는 16개의 개체, 각 개체별 3개의 단계 (pre, post, fup), 각 단계별 5개의 시간대(1, 2, 3, 4, 5)의 score를 1 ~ 11까지 갖는다. 개체 1 ~ 5는 control 집단으로, 개체 6 ~ 9는 A 처방 집단, 개체 10 ~ 16는 B 처방 집단이며, 개체는 여성과 남성 각각 8명씩이다. Linux 사례 (Ubuntu 18.04) 새롭게 만드는 변형된 데이터셋의 이름은 활성데이터셋이름Wide로 기본 설정되어있다. OBrienKaiserLong 데이터셋에서 개체를 나타내는 id 변수를 &lt;Subject ID 변수(하나선택)&gt;으로, 변화되는 값을 갖는 요인형 정보 hour, phase를 &lt;Within-subjects 요인 (하나 또는 그 이상 선택)&gt;으로, 변화되는 값인 score를 &lt;상황에 의해 다양화되는 변수 (하나 또는 그 이상 선택)&gt;에서 선택한다. Linux 사례 (Ubuntu 18.04) R Commander 맨 아래에 있는 알림글을 살펴보면, 주석: 데이터셋 OBrienKaiserLong(은)는 240 행과 6 열을 가지고 있습니다. 주석: 데이터셋 OBrienKaiserLongWide(은)는 16 행과 17 열을 가지고 있습니다. 라는 정보를 확인할 수 있다. treatment, gender 변수는 그대로 사용되지만, score별로 hour.phase의 요인 값이 표기되는 형식으로 변수가 15개 생성된다. score.hour(1~5).phase(pre, post, fup) 순서가 되겠다. Linux 사례 (Ubuntu 18.04) 6.6.14 넓은 형식에서 긴 형식으로 데이터셋 모양바꾸기…/ Active data set &gt; Reshape data set from wide to long format… Linux 사례 (MX 21) 먼저, 첨부된 carData 패키지에서 OBrienKaiser 패키지를 활성화하자. Data &gt; Read data set from an attached package… 메뉴를 통해서 carData 패키지선택 후 OBrienKaiser 데이터셋을 찾아 선택할 수 있다. OBrienKaiser 데이터셋은 다음처럼 16개의 행과 17개의 열로 구성되어 있다: Linux 사례 (Ubunt 18.04) 17개의 변수에서 pre.(1, 2, 3, 4, 5), post.(1, 2, 3, 4, 5), fup.(1, 2, 3, 4, 5) 등이 15개의 변수를 구성하고 있다. 아래 메뉴창에서 &lt;within-subjects 행(row) 요인 이름: &gt;에 pre, post, fup을 포괄하는 phase를, &lt;within-subjects 열(column) 요인 이름: &gt;에 1, 2, 3, 4, 5를 포괄하는 hour를 넣자. &lt;최대 5수준까지 각 within-subjects 요인의 수준 이름을 지정하기&gt; 아래의 행(row) 이름에 pre, post, fup을 넣고, 열(column) 이름에 1, 2, 3, 4, 5을 넣는다. 사례가 담길 곳에는 pre.1, pre.2, pre.3, pre.4, pre.5, post.1, post.2, post.3, post.4, post.5, fup.1, fup.2, fup.3, fup.4, fup.5 을 차례로 찾아 넣는다. 만약 잘못 입력되어 중복이름이 포함되면, 오류: 이중의 행(row) 수준 이름이 있습니다: 라는 오류문을 알림글에서 보게 될 것이다. Linux 사례 (Ubunt 18.04) 선택기능 메뉴창을 열고, OBrienKaiserLong1이라고 데이터셋 이름을 넣자. 그리고, &lt;반응변수: &gt;에 score라고 입력하자. carData 패키지에 있는 OBrienKaiserLong과 동일한 구조를 만들고 데이터셋 내부를 비교하기 위함이다. Linux 사례 (Ubunt 18.04) OBrienKaiserLong1의 데이터셋 내부는 다음과 같은 구성이다: Linux 사례 (Ubunt 18.04) OBrienKaiserLong 데이터셋 요약정보 6.6.15 모든 문자 변수를 요인으로 변환하기 / Active data set &gt; Convert all character variables to factors Linux 사례 (MX 21) 메뉴창의 기능이 비활성화되어 있다. 어느 데이터셋이 활성화되었음에도 이 기능이 비활성화되어 있다면, 이 데이터셋에는 문자 변수가 없다는 뜻이다. 예를 들어, carData 패키지에 있는 Prestige 데이터셋에는 문자변수가 없다. 이 경우, 기능이 비활성화 상태에 있다. str() 함수를 이용하여 Prestige 변수의 내부 구조를 살펴보면, 변수 유형에 int, num, factor가 있지만, chr (character)는 없다. Linux 사례 (Ubuntu 18.04) 임의로 character 변수를 생성해보자. Prestige 데이터셋의 요인형 type 변수를 문자형으로 변환시킨후 R Commander의 인식 과정을 살펴보자. Prestige\\(문자형변수이름 &lt;- as.character(Prestige\\)요인형변수) 그리고, 다시 한번 str(Prestige)로 추가된 문자형 변수가 담긴 데이터셋의 내부 구조를 살펴보자. type.chr 라는 문자형 변수의 정보가 마지막에 보일 것이다. 입력창에 다음과 같이 입력한다: Linux 사례 (Ubuntu 18.04) 활성화된 데이터셋에 문자형 변수가 포함된 경우, 기능이 활성화된다. Linux 사례 (Ubuntu 18.04) strings2factors() 함수를 사용한다. 마지막 변수 type.chr의 변수 유형을 살펴보라. Linux 사례 (Ubuntu 18.04) 6.6.16 활성 데이터셋 저장하기…/ Active data set &gt; Save active data set… Linux 사례 (MX 21) 활성데이터셋을 저장하는 기능이다. 데이터셋과 관련된 여러 작업(하위셋, 결측자료 제거, 누적/합계 등으로 데이터셋 변형 등)을 마친 후 사용하게된다. 대화창에서 저장위치를 결정하고 이름을 정한다. 확장자는 .RData 이다. Linux 사례 (Ubuntu 18.04) save() 함수를 사용한다. Linux 환경에서는아래화면처럼 경로명을 사용한다. save(“활성데이터셋이름,” file=“경로/Prestige.RData”) save(..., list = character(), file = stop(&quot;&#39;file&#39; must be specified&quot;), ascii = FALSE, version = NULL, envir = parent.frame(), compress = isTRUE(!ascii), compression_level, eval.promises = TRUE, precheck = TRUE) Linux 사례 (Ubuntu 18.04) 6.6.17 활성 데이터셋 내보내기…/ Active data set &gt; Export active data set… 작업을 마친/ 또는 다른 업무를 위하여 일시적으로 작업한 자료를 하드디스크에 저장하는 경우가 흔하다. .RData로 자료를 저장할 수 있고, 공동작업자와 공유할 수 있지만, 행여 R을 사용하지 않는 분석가/사용자에게 자료를 보내야 하는 경우가 있다. 이 때 사용하는 기능이다. Linux 사례 (MX 21) 자료를 텍스트 형식으로 저장하는 경우 다른 도구 사용자(예, 엑셀, PSPP 등)가 쉽게 불러와서 추가 작업을 할 수 있을 것이다. 변수, 행, 문자 등에 대하여 지정하는 옵션이 있다. 결측값 표현 방식도 정할 수 있다. 중요한 것은 필드 구분자이다. 쉼표(,)를 기준으로하는 필드는 .csv로 파일이 저장되고, 여백-탭-세미콜론 등으로 필드 구분자를 지정하면 .txt로 저장된다. Linux 사례 (MX 21) Linux 사례 (MX 21) 쉼표(‘,’)를 필드 구분자로 사용하는 경우, 내보내는 데이터셋의 확장자는 .csv로 저장된다. Linux 사례 (MX 21) Linux 사례 (MX 21) write.table() 함수를 사용한다. write.table(활성데이터셋, “경로/파일이름.확장자, sep=”필드구분자”, col.names=, row.names=, quote=, na=“결측치표시”) 신경써야 할 것이 하나 더 있다. 대화창에는 등장하지 않지만, 현재 작업하는 컴퓨터의 인코딩 방식으로 자료가 내보내진다. 이 경우 윈도우-맥 애플-리눅스 등의 이기종간 자료 교환에는 인코딩 호환 문제가 발생할 수 있다. Linux는 utf-8, Windows는 cp949를 기본 인코딩으로 사용한다. write.table(x, file = &quot;&quot;, append = FALSE, quote = TRUE, sep = &quot; &quot;, eol = &quot;\\n&quot;, na = &quot;NA&quot;, dec = &quot;.&quot;, row.names = TRUE, col.names = TRUE, qmethod = c(&quot;escape&quot;, &quot;double&quot;), fileEncoding = &quot;&quot;) 또 하나, 불편한 점이 있다. 와 관련된 것이다. 를 하고 저장한 파일에는 변수이름이 한자리 앞으로 오는 문제가 있다. 행 이름 위의 빈 칸에 첫 변수 이름이 쓰여지기 때문이다. 엑셀이나 다른 도구에서 행 이름 위에 있는 변수 이름을 이동시켜야 하는 불편함이 있다. 그렇다고 행 이름을 안쓰는 것도 문제가 될 수 있다. 일련번호는 상관없겠으나 사례 이름이 삭제되면 정보량이 축소되기 때문이다. 그래서 사례이름을 추가적인 변수명으로 사용하는 꼼수가 흔한 상황이다. 6.7 활성 데이터셋 변수 관리 / Manage variables in active data set 6.7.1 변수를 다시 코딩하기…/ Manage variables in active data set &gt; Recode variables… Linux 사례 (Ubuntu 18.04) 기존 변수를 이용하여 새로운 변수를 만들 수 있다. R Commander에서 이 기능은 일반적으로 수치형 변수를 요인형으로 바꾸는데 사용된다. &lt;(각각의) 새로운 변수를 요인으로 만들기&gt;에 선택이 되어 있는 것은 요인형으로 만드는 과정이다. 물론 수치형 변수의 사례값들을 다른 값으로 변환시킬수도 있다. 이 기능을 이해하기 위해서는 &lt;“다시 코딩하기” 지시문 입력하기&gt;에 대한 정확한 사용법을 익히는 것이 필수적이다. 초보자에게는 쉽지 않다. 하지만, 논리적으로 이해한다면 차후에 큰 어려움은 없을 것이다. Linux 사례 (Ubuntu 18.04) 예를 들어 연령과 같은 수치 정보를 담은 변수가 있다고 하자. 10세 구간으로 바꾸려고 할 때, 10대, 20대, 30대, 40대, 50대, 60대, 70대 이상 등으로 사용할 수 있다. 때로는 65세이상으로 마지막 구간을 사용할 수 있다. 태어난 후 10세가 아닌 아이들을 배제시키기도 한다. 선거와 같은 정치적인 이슈에 대한 입장에서 20대 이상부터 시작하기도 한다. 이 경우 수치형 정보를 구간으로 바꾸어 요인화 시키는 과정이 필요하다. 때로는 소득과 관련하여 상-중-하 등의 3구간으로 나누는 것도 흔하다. 아래의 예와 같이 사용할 수 있다. 1:10000 = &quot;low&quot; 10001:20000 = &quot;middle&quot; 20001:max(데이터셋$변수) = &quot;high&quot; else = NA Prestige 데이터셋에 있는 수치형 변수 education의 구간을 만들어 사례값들을 넣고 요인형로 변수로 만들고자 한다. 아래와 같이 &lt;‘다시 코딩하기’ 지시문 입력하기&gt;에 입력할 수 있다. 1부터 6까지는 elementary로, 6.01에서 9까지는 middle로 , 9.01에서 12까지는 high로, 12.01에서 16까지 univ라는 구간명을 만들어 넣을 수 있다. Linux 사례 (Ubuntu 18.04) 주의점으로, ’다시코딩하기’지시문에 오직 큰 따옴표(” “)를 사용해야 한다. 작은 따옴표를 사용하면 알림글에 오류가 뜬다: 오류: ’다시코딩하기’지시문에 오직 큰 따옴표(” “) 사용하기 Prestige 데이터셋에 있는 수치형 변수 education, income을 구간을 정해서 나누고 요인형으로 바꿔서 education.level, income.level 이라고 변수명을 만든 명령문의 출력 결과이다. Linux 사례 (Ubuntu 18.04) 6.7.2 새로운 변수 계산하기…/ Manage variables in active data set &gt; Compute new variable… Linux 사례 (Ubuntu 18.04) 활성 데이터셋에 있는 변수들을 활용하여 새로운 변수를 생성하는 많은 방법이 있다. &lt;Compute new variable…&gt;은 일반적으로 수치형 사례를 갖고 있는 변수(들)을 사칙연산, log, 제곱근 등의 계산기법을 활용하여 새롭게 만드는 것이다. 계산에 의해서 새롭게 생성되는 사례들을 새로운 변수이름으로 저장할 수 있다. variable 이라는 추천된 변수 이름이 있지만, 사용자가 직접 지정할 수 있다. Prestige 데이터셋에 있는 income 변수를 log를 이용하여 변환해보자. Linux 사례 (Ubuntu 18.04) 다음과 같은 명령문으로, income.log라는 변수가 새롭게 생성된다. Prestige$income.log &lt;- with(Prestige, log(income)) 6.7.3 관찰 수를 데이터셋에 더하기 / Manage variables in active data set &gt; Add observation number to data set Linux 사례 (Ubuntu 18.04) 데이터프레임 형식의 데이터셋은 행과 열로 구성된다. 1부터 행의 길이에 해당되는 값을 일련번호 식으로 맨 앞부터 붙인 사례값을 가진 변수를 만드는 기능이다. 변수이름은 ObsNumber로 자동 정해진다. Prestige$ObsNumber &lt;- 1:102 이렇게 일련번호를 가진 변수(ObsNumber)는 어떻게 활용될 수 있을까. 특정 사례(행)에 지정된 고유값을 변수로 전환하고, $ObsNumber를 행의 고유값으로 사용할 수도 있다. 이 작업은 데이터셋을 .csv, .txt 등으로 내보낼 때 활용되기도 한다. Linux 사례 (Ubuntu 18.04) 6.7.4 변수 표준화하기…/ Manage variables in active data set &gt; Standardize variables… Linux 사례 (Ubuntu 18.04) 활성데이터셋에 있는 수치형 변수들은 서로 다른 기준의 값들을 가질 것이다. 정수형 값도 있을 수 있다. 크기도 다를 수 있다. 만약 크기와 기준이 다른 수치형 변수들을 결합해서 분석 작업을 진행할 경우, 영향력 순위를 확인하는데 불편할 수 있다. 예를 들어서, 시험과목 중에서 어느 것이 난이도가 높은가를 알려면 평균점수를 확인할 것이고, 같은 점수라 하더라도 어느 과목점수가 더 높은가를 확인하려면, 이른바 상대평가를 하려면 척도 계산을 해야할 것이다. 변수 표준화하기는 척도 함수를 사용하여 상대화된 기준으로 사례 값을 재조정하는 기능이다. 대화창에서 수치형 변수를 선택하고 변수를 표준화하면, 기존의 변수명 앞에 Z가 붙는, Z.변수라는 새로운 표준화 값을 갖는 변수가 생성된다. Prestige 데이터셋에서 교육연수(education)와 수입(income)이 직업의 권위에 대한 사회적 인식(prestige)에 어떤 영향을 미치는가에 대한 문제의식에 대한 통계학적 접근을 위하여 세개의 수치형 변수를 표준화하려고 한다. Linux 사례 (Ubuntu 18.04) Prestige &lt;- local({ .Z &lt;- scale(Prestige[,c(&quot;education&quot;,&quot;income&quot;,&quot;prestige&quot;)]) within(Prestige, { Z.prestige &lt;- .Z[,3] Z.income &lt;- .Z[,2] Z.education &lt;- .Z[,1] }) }) R Commander에 있는 버튼을 눌러 Prestige 데이터셋의 내부를 살펴보자. Z.prestige, Z.income, Z.education 이라는 세개의 변수가 생성되었음을 알 수 있다. Linux 사례 (Ubuntu 18.04) 6.7.5 수치 변수를 요인으로 변환하기…/ Manage variables in active data set &gt; Convert numeric variable to factor… Windows 사례 수치 변수를 요인으로 전환해야 하는 경우가 흔하다. 남성을 1, 여성을 2로 입력한 엑셀 자료를 불러오는 경우, 1과 2를 요인으로 재지정해야 남성, 여성의 의미를 담은 변수로 활용할 수 있다. 일반적으로 이런 변수를 명목변수(nominal variable)이라고 하지만, R에서는 factor (variable)로 부른다. 간혹 요인분석에 익숙한 사용자가 factor와 factor analysis를 헷갈려하는 경우가 있기도 하다. 수치 변수인가? 요인 인가? 변수의 유형에 대한 이해가 필요한 이유는 실용적으로 볼 때, 시각화와 연결된 작업때문이다. 줄여 말하면, 수치 변수로 표현할 수 있는 시각화와 요인으로 표현할 시각화 기법이 다르다고 할 수 있다. 어려운가? 간단히 예를 들면, 히스토그램은 수치 변수의 시각화 기법이다. 그러나, 막대 차트는 요인의 시각화 기법이다. 수치 변수는 더할 수 있고, 요인은 셀 수 있다. 먼저 datasets 패키지에 있는 airquality 데이터셋을 활성화시키자. 작업창에는 ‘다중 변수를 위한 새로운 변수 이름 또는 접미사: ’ 이라는 조건입력칸이 있다. 변수 이름을 덮어쓰면서, 바뀐 변수 유형을 기억하기도 하지만, 나는 흔히 _f를 추가한다. 원래의 수치 변수 옆에 _f가 붙어있는 요인을 만들어 그 차이를 기억하는 방식이다. Linux 사례 (MX 21) 데이터셋 &lt;- with(데이터셋, {요인형변수이름 &lt;- as.factor(수치형변수) }) airquality &lt;- within(airquality, { month.f &lt;- as.factor(Month) }) 참고로, 간혹 다음의 오류 지시문 “수준의 숫자 ( ) (이)가 너무 넓습니다”이 아래 알림글에 나올 수 있다. 이것은 요인화로 만들어지는 수준의 갯수가 너무 많다는 의미이다. 그래서 요인 수준 이름을 일일이 넣을 추가 작업창을 R Commander에서 만들 수 없다는 뜻이다. 작업창의 요인 수준에서 “수준 이름 사용하기”를 선택 (기본선택사항)해서 이와 같은 오류 지시문이 나오는 경우, 그 아래에 있는 “숫자 사용하기” 선택을 하면 된다. 아래 출력창에서 airquality 데이터셋의 Month 변수와 month.f 변수를 비교해보자. Month 변수는 수치형 변수로서 최소, 평균, 최대 값을 갖고 있는 반면에, month.f 변수는 5에 31, 7에 31, 9에 30 등의 갯수를 갖고 있다. Linux 사례 (MX 21) 6.7.6 문자 변수를 요인으로 변환하기…/ Manage variables in active data set &gt; Convert character variables to factors… Linux 사례 (MX 21) 활성화된 데이터셋이 있는 경우에도 &lt;문자 변수를 요인으로 변환하기…&gt; 기능이 비활성화되어있는 때가 있다. 이 상황은 활성화된 데이터셋에 문자 변수가 없는 경우이다. 문자 변수를 갖고 있는 데이셋을 만들어(또는 불러와) 이 기능을 활성화시키자. carData 패키지의 Prestige 데이터셋을 Prestige.csv 파일로 내보냈다고 하자. Export active data set… 참고로 이 블로그에 Prestige.csv 파일을 올려놓았다. 바로 내려받아 사용할 수 있다. Prestige_csv 이 파일을 기능을 통하여 다시 불러보자. 갖고 있는 어떤 .csv파일을 불러오는 것과 같은 사례로 이해할 수 있다. 이 경우는 Data &gt; 데이터 불러오기 &gt; TXT 파일, 클립보드 또는 URL에서… 의 기능을 사용하는 것이다. from text file, clipboard, or URL… 불러올 데이터셋 파일의 이름은 Prestige.csv, 저장될 데이터셋 객체의 이름을 Prestige_csv라고 하자. 에 있는 클릭을 제거하자. 필드 구분자를 &lt;쉼표 [,]&gt;로 선택하자. 그리고 새롭게 열리는 디렉토리 창에서 Prestige.csv 파일을 찾아 선택하자. Linux 사례 (MX 21) Prestige 데이터셋과 달리, Prestige_csv 데이터셋의 type 변수는 요인이 아닌 문자형이다. Linux 사례 (MX 21) 문자형 변수가 포함된 Prestige_csv 데이터셋이 활성화되면, &lt;문자 변수를 요인으로 변환하기…&gt; 기능이 활성화된다. Linux 사례 (MX 21) 문자형 변수 목록에 type 변수가 보인다. 에 변환시킬문자형변수.f를 넣고, 기존 type 변수와 비교해보자. 예(OK) 버톤을 누른다. Linux 사례 (MX 21) 활성데이터셋 &lt;- within(활성데이터셋, { 새로운변수이름 &lt;- as.factor(변환시킬문자형변수) }) Prestige_csv &lt;- within(Prestige_csv, { type.f &lt;- as.factor(type) }) 출력창 아래에 있는 type 변수와 type.f 변수를 비교해보자. type.f 변수는 요인형으로 전환되어 있다. Linux 사례 (MX 21) 6.7.7 수치 변수 구간만들기…/ Manage variables in active data set &gt; Bin a numeric variable… Linux 사례 (MX 21) 수치 변수를 촘촘히 연결된 연속형 변수라고 생각해보자. 선 그래프로 시각화 할 수 있을 것이다. 연속적인 값들을 구간으로 나누어 쪼개어 배치하는 기법이 필요할 수 있다. 흔히 연령을 연령대로 만드는 작업이 이것에 속한다. 구간을 만드는 작업창에는 몇 몇 검토 사항의 조건들을 묻는 내용이 있다. 1. 몇 개의 구간을 만들 것인가? 2. 구간 수준의 이름을 어떻게 정할 것인가? 3. 구간화 작업을 넓이로, 계산치로, 군집화로 할 것인가? 몇 개의 구간을 만들 것인가라는 질문에 답을 결정하려면, 아마도 이 수치형 변수의 요약적 특징을 미리 알고 있어야 할 것이다. 그리고, 구간화 작업에서 동일-넓이 구간이 기본 선택사항인데, 다른 선택을 하려면, 데이터에 대한 이해와 높은 분석적 통찰력이 요구될 것이다. carData 패키지에 있는 Prestige 데이터셋의 수입(연봉)을 뜻하는 income 변수를 구간으로 쪼개자. income 변수는 수치형 변수이다. 102개의 income 변수의 사례 요약은 다음과 같다: Linux 사례 (MX 21) income.bin1, income.bin2, income.bin3 등 세개의 income 변수 구간화 작업을 하자. 구간의 수는 3개로, 수준 이름은 lower, middle, upper로 정하자. 구간화 기법은 bin1은 동일-넓이 구간, bin2는 동일-계산치 구간, bin3는 Natural breaks(K-평균 군집화에서)을 각각 선택하자. Linux 사례 (MX 21) Linux 사례 (MX 21) 아래 출력창에서 각각의 구간화 인자 method와 세 변수의 요인 갯수를 살펴보라. Linux 사례 (MX 21) 버튼을 눌러 Prestige 데이터셋에서 income.bin1, income.bin2, income.bin3의 요인들을 살펴보라. Linux 사례 (MX 21) 6.7.8 요인 수준 재정렬하기…/ Manage variables in active data set &gt; Reorder factor levels… Linux 사례 (MX 21) carData 패키지의 Prestige 데이터셋을 이용해서 기능을 사용해보자. Prestige 데이터셋에 있는 직업유형을 나타내는 type 변수는 bc, prof, wc라는 요인 수준을 갖고 있다. blue collar, white collar, professional 블루칼라, 화이트칼라, 전문직 등을 나타낸다. 그런데, bc, prof, wc는 순서가 있는 요인 수준이 아니다. 요인의 알파벳 순서대로 1, 2, 3 등이 부여된 요인 수준이다. 첫째로 bc, wc, prof로 수준의 순서를 바꿔보자. 먼저 type1으로 요인형 변수의 이름을 새롭게 정해보자. Linux 사례 (MX 21) bc에 1, wc에 2, prof에 3을 넣는다. Linux 사례 (MX 21) 그렇다면, 둘째로 bc, wc, prof 순서를 정해놓고 각각 1, 2, 3을 지정해서 요인 수준을 정해보자. 정확히는 bc &lt; wc &lt; prof 순서를 정해놓고, 각각 1, 2, 3을 부여하는 것이다. type2라는 요인형 변수로 지정한다. Linux 사례 (MX 21) Linux 사례 (MX 21) str() 함수를 이용하여, type, type1, type2 변수의 구조를 살펴보자. 그리고 factor() 함수의 용례를 다시 살펴보라. levels, ordered 라는 인자가 의미하는 것을 알게될 것이다. Prestige$type1 &lt;- with(Prestige, factor(type, levels=c(&#39;bc&#39;,&#39;wc&#39;,&#39;prof&#39;))) Prestige$type2 &lt;- with(Prestige, factor(type, levels=c(&#39;bc&#39;,&#39;wc&#39;,&#39;prof&#39;), ordered=TRUE)) str(Prestige$type) str(Prestige$type1) str(Prestige$type2) Linux 사례 (MX 21) 6.7.9 사용하지 않은 요인 수준 누락시키기…/ Manage variables in active data set &gt; Drop unused factor levels… Linux 사례 (MX 21) carData 패키지에 있는 Prestige 데이터셋에는 type 이라는 요인형 변수가 있다. bc, prof, wc 라는 수준을 갖고 있다. blue collar, professional, white collar를 뜻한다. 블루칼라와 화이트칼라 그룹의 수입(연봉), 학력(교육연수), 직업권위를 뜻하는 income, education, prestige 라는 변수의 정보를 비교하고자 한다. 먼저 prof 수준을 데이터셋에서 제거해야 할 것이다. Linux 사례 (MX 21) 참고로, 을 보다 꼼꼼히 살펴보라 Prestige.sub1 &lt;- subset(Prestige, subset=type !=&quot;prof&quot;) [O] Prestige.sub1 &lt;- subset(Prestige, subset=type=!prof) [X] Prestige.sub1 &lt;- subset(Prestige, subset=type=!&quot;prof&quot;) [X] 아래 출력창에서 Prestige 데이터셋의 type, Prestige.sub1 데이터셋의 type 요약 정보를 비교해보라. Prestige 데이터셋의 type 변수에는 prof 수준을 가진 31개의 사례가 사라졌지만, prof 수준은 아직 남아있다. Linux 사례 (MX 21) Prestige.sub1의 type 변수에서 사용되지 않는 수준인, 다른말로 사례를 갖고 있는 않는 수준인 prof를 제거하자. 그래서 bc, wc 두개의 수준을 비교하는 정보를 만들고, 분석한다고 하자. &lt;수준을 누락시킬 요인 (하나 이상 선택)&gt;에서 type을 선택하고, 예(OK) 버튼을 누른다. Linux 사례 (MX 21) 그리고 아래 화면에서 OK 버튼을 누른다. Linux 사례 (MX 21) Prestige.sub1 &lt;- within(Prestige.sub1, { type &lt;- droplevels(type) }) 출력창에서 사용하지않는 요인 수준이 있는 변수정보와 누락시킨 이후의 변수정보를 찾아 비교해보라. type변수에 사례가 없는 prof 수준이 제거된 후 bc와 wc 두개 요인만 보일 것이다. Linux 사례 (MX 21) 6.7.10 요인 대비 정의하기…/ Manage variables in active data set &gt; Define contrasts for a factor… Linux 사례 (MX 21) 요인형 변수의 특징을 수리적으로 다루기 위해서 행렬(매트릭스) 형식으로 재구성하는 경우가 빈번하다. 변수 내부의 기준 수준을 정하거나, 개별 수준들의 특징(사례 갯수, 거리)을 기준으로 행렬을 만드는데 활용되는 선택사항들을 결정한다. Prestige 데이터셋에는 직업 유형을 뜻하는 type 이라는 요인형 변수가 있다. 기능은 요인형 변수에만 해당된다. 다음의 화면에서 선택할 수 있다. Linux 사례 (MX 21) 6.7.11 변수이름 다시 짓기…/ Manage variables in active dataset &gt; Rename variables… Linux 사례 (MX 21) 변수의 이름을 바꿔야할 때 사용하는 기능이다. 이름을 바꿀 변수를 선택하고 예(OK) 단추를 누르면, 다음 창이 뜨는데 여기에서 생각한 새로운 변수 이름을 입력하면 된다. Linux 사례 (MX 21) Linux 사례 (MX 21) names(데이터셋이름)[변수번호] &lt;- c(“새로운변수이름1,” “새로운변수이름2,” “새로운변수이름3”) 등으로 함수가 사용된다. names(Prestige)[c(1, 2, 4)] &lt;- c(&quot;교육연수&quot;, &quot;수입&quot;, &quot;직업권위&quot;) Linux 사례 (MX 21) R Commander 화면에서 버튼을 누르면, 다음과 같이 변수 이름이 바뀐 데이터셋 정보를 보게된다. Linux 사례 (MX 21) 6.7.12 데이터셋에서 변수 지우기…/ Manage variables in active data set &gt; delete variables from data set… Linux 사례 (Ubuntu 18.04) 잘못 작업된 변수 또는 분석에 필요없는 변수를 삭제하는 기능이다. 삭제하고자 하는 변수를 선택하고 예(OK) 버튼을 누른다. Linux 사례 (Ubuntu 18.04) 삭제하기전에 다시 한번 확인하는 질문을 받는다. 예(OK) 버튼을 누른다. Linux 사례 (Ubuntu 18.04) 출력창에 아래와 같은 명령문의 내용을 보게 될 것이다. 알림글에는 2개의 변수가 삭제되었음을 알리는 주석이 등장한다. 데이터셋 &lt;- within(데이터셋, {삭제될변수 &lt;- NULL }) "],["statistics.html", "7 . 통계 / Statistics 7.1 요약 / Summaries 7.2 분할표 / Contingency tables 7.3 평균 / Means 7.4 비율 / Proportions 7.5 분산 / Variance 7.6 비모수 검정 / Nonparametric tests 7.7 차원 분석 / Dimensional analysis 7.8 적합성 모델 / Fit models", " 7 . 통계 / Statistics 7.1 요약 / Summaries LInux 사례 (Ubuntu 18.04) 활성 데이터셋이 없는 경우, 통계 분석의 대상이 없기 때문에 하위 기능의 메뉴가 음영 처리되어 있다. 활성 데이터셋이 있는 경우 아래와 같이 음영 처리가 사라지고, 하위 기능을 선택할 수 있게 된다: LInux 사례 (Ubuntu 18.04) 7.1.1 활성 데이터셋 / Active Data set Linux 사례 (Ubuntu 18.04) Prestige라는 데이터셋을 불러와서 자료처리와 분석용으로 활성화시켰다고 가정하자. Prestige 데이터셋의 요약정보를 보고자 할때, 기능을 선택한다: data(Prestige) summary(Prestige) ## education.income.women.prestige.census.type ## accountants,12.77,9271,15.7,63.4,1171,prof : 1 ## aircraft.repairmen,10.1,7716,0.78,50.3,8582,bc: 1 ## aircraft.workers,8.78,6573,5.78,43.7,8515,bc : 1 ## architects,15.44,14163,2.69,78.1,2141,prof : 1 ## athletes,11.44,8206,8.13,54.1,3373,NA : 1 ## auto.repairmen,8.1,5795,0.81,38.1,8581,bc : 1 ## (Other) :96 Linux 사례 (Ubuntu 18.04) 7.1.2 수치적 요약…/ Numeric summaries… Linux 사례 (Ubuntu 18.04) &lt;수치적 요약…&gt; 메뉴를 선택하면 하위 창이 나온다: Linux 사례 (Ubuntu 18.04) 데이터 창과 통계 창이 있다. 통계 창을 보려면 데이터 옆에 있는 통계 창을 선택하면 된다: Linux 사례 (Ubuntu 18.04) 다시 데이터 창으로 와서 prestige 라는 변수의 수치적 요약 정보를 보고자 한다. prestige 변수를 선택하고, 오른쪽 아래의 예(OK) 버튼을 선택한다: Linux 사례 (Ubuntu 18.04) 입력 창과 출력 창을 살펴보자. 통계 창의 선택사항들에 변경을 주지 않은 상태에서 Prestige 라는 데이터셋의 prestige 변수의 수치적 정보는 다음과 같다: Linux 사례 (Ubuntu 18.04) 7.1.3 빈도 분포… / Frequency distributions… Linux 사례 (Ubuntu 18.04) Linux 사례 (Ubuntu 18.04) type 변수를 선택하고 예(OK)를 누른다. Prestige 데이터셋의 type 변수의 빈도를 보는 명령문이 다음과 같이 입력창에 기록되고 출력창에 빈도 정보가 출력된다: Linux 사례 (Ubuntu 18.04) - 입력 창 기록 Linux 사례 (Ubuntu 18.04) - 출력창 출력결과 Q1&gt; Prestige의 변수는 여러개가 있습니다. 그중에서 왜 type만 선택 창에 나오나요? type 변수는 factor 유형입니다. 빈도는 factor 유형의 변수만 셀 수 있기 때문입니다. &gt; str(Prestige) # Prestige 데이터셋의 변수 유형 살펴보기 7.1.4 관측 결측치 셈하기 / Count missing observations Linux 사례 (Ubuntu 18.04) 데이터셋을 구성하는 사례에 값이 입력되지 않은 결측치가 있는 경우가 있다. 어떤 변수에 관측값이 없는 결측치가 있는지를 확인할 때 사용하는 기능이다. Linux 사례 (Ubuntu 18.04) Prestige 데이터셋의 type 변수에 결측치가 4개가 있음을 확인한다. 7.1.5 통계표…/ Table of statistics… Linux 사례 (Ubuntu 18.04) 통계표(Table of statistics)는 요인(factor) 변수 유형별로 수치형(numeric, integer) 변수의 통계량을 계산하여 출력한다. Prestige 데이터셋에서 직업 유형의 type 변수를 요인에서 선택하고, 직업 유형별로 권위(prestige)의 통계량 중에서 기본 설정으로 선택된 평균값의 통계표를 선택하고, 예(OK) 버튼을 누른다. Linux 사례 (Ubuntu 18.04) Linux 사례 (Ubuntu 18.04) 직업 유형(bc, prof, wc)별로 평균값을 계산하여 출력한다. 출력창을 보면 Tapply() 함수를 사용함을 알 수 있다. 7.1.6 상관 행렬…/ Correlation matrix… Linux 사례 (Ubuntu 18.04) 상관 행렬은 두개 이상의 변수를 선택해야 한다. Prestige 데이터셋에서 교육수준과 연봉(수입)의 관계에 대한 관심에서 이 두 변수를 선택하고, 예(OK) 버튼을 누른다. Linux 사례 (Ubuntu 18.04) Linux 사례 (Ubuntu 18.04) 출력 창을 보면, cor() 함수가 사용되었음을 알 수 있다. 7.1.7 상관 검정…/ Correlation test… Linux 사례 (Ubuntu 18.04) 상관 검정은 두 변수를 구성하는 사례값들 사이에 어떤 방향의 관계성이 있는지를 통계학적으로 확인하고자 할 때 사용한다. 아래는Prestige 데이터셋에서 교육수준과 수입(연봉) 사이에 어떤 관계성이 있는지를 확인하고자 한다. education과 income 변수를 선택하고, 예(OK) 버튼을 누른다. Linux 사례 (Ubuntu 18.04) 상관의 유형 중에서 Pearson product-moment (피어슨 적률상관), 대립 가설에는 양측이 기본으로 설정되어 있다. 이 설정을 바탕으로 상관 검증의 결과를 출력하면 아래와 같다: Linux 사례 (Ubuntu 18.04) cor.test() 함수를 활용한다. 7.1.8 정규성 검정…/ Test of normality… Linux 사례 (Ubuntu 18.04) 수치형(numeric, integer) 변수들 중에서 하나를 선택한다. 기본 설정에 Shapiro-Wilk의 정규성 검정법이 선택되어 있다. 수입(연봉)의 사례들이 정규 분포를 이루고 있는가를 확인하고자, 변수 income을 선택하고 예(OK) 버튼을 누른다. Linux 사례 (Ubuntu 18.04) normalityTest()를 사용한다. Linux 사례 (Ubuntu 18.04) normalityTest(~education, test=&quot;shapiro.test&quot;, data=Prestige) Linux 사례 (Ubuntu 18.04) 7.2 분할표 / Contingency tables 7.2.1 분할표 / Contingency tables Linux 사례 (MX 21) 분석대상인 데이터셋에 요인형 변수가 한개 있거나, 하나도 없는 경우 분할표 메뉴의 오른쪽에 있는 , 기능은 불활성 음영 표시로 나타난다. 두개 이상의 요인형 변수가 있는 경우, 예를 들어 car 패키지에 포함된 Moore 데이터셋이 활성 데이터셋이 되는 경우 불활성 음영 표시가 사라진다. Linux 사례 (MX 21) 요인형 변수가 세개 이상 있는 경우, 까지 활성화된다. 아래의 화면을 보면, partner.status, fcatetory 두개의 변수가 요인(factor)형이다. 는 활성화된 반면에, 기능이 아직 활성화되지 않았다면, 요인형 변수가 두개 뿐인 데이터셋임을 간접적으로 알려준다. Linux 사례 (MX 21) 7.2.2 이원표…/ Two-way table Linux 사례 (MX 21) 두개 이상의 요인형 변수를 가지고 있는 Moore 데이터셋을 활성화시키면, 의 음영이 사라지고 사용할 수 있는 기능이 된다. Linux 사례 (MX 21) 행 변수와 열 변수에 요인형 변수 하나씩을 선택한다. Linux 사례 (MX 21) Linux 사례 (MX 21) 데이터 창과 함께 통계 창이 있다. 통계 창을 선택하면 다음과 같은 화면에 다양한 선택 기능을 선택할 수 있다. 다른 선택으로 출력 내용의 변화를 주지 않을 경우, 데이터 창으로 돌아가서 예(OK) 버튼을 누른다. Linux 사례 (MX 21) 다음과 같은 출력물을 볼 수 있다. 행 변수에 partner.status, 열 변수에 fcategory를 선택한 경우의 출력물이다. Linux 사례 (MX 21) 행 변수에 fcategory, 열 변수에 partner.status를 선택한 경우의 출력물이다. Linux 사례 (MX 21) 프롬프트의 입력 스크립트를 살펴보면, xtabs() 함수를 사용하는 것이 보인다. 7.3 평균 / Means 7.3.1 일-표본 t-검정… / Single-sample t-test… Linux 사례 (MX 21) datasets 패키지에 있는 sleep 데이터셋을 활용해보자. &lt;일-표본 t-검정…&gt; 기능을 선택하면, 아래와 같은 선택 창으로 넘어간다. sleep 데이터셋에서 일-표본 t-검정으로 점검할 수 있는 변수는 extra 하나가 보인다. 예(OK) 버튼을 누르자. Linux 사례 (MX 21) with(sleep, (t.test(extra, alternative=&#39;two.sided&#39;, mu=0.0, conf.level=.95))) 에 관련된 선택사항에 변화를 주지 않았다. 아래 명령문과 같은 결과를 얻는다. t.test(extra ~ 1, data = sleep) Linux 사례 (MX 21) 7.3.2 독립 표본 t-검정…/ Independent samples t-test… Linux 사례 (MX 21) datasets 패키지에 있는 sleep 데이터셋을 활용해보자. 활성화시키자. sleep 데이터셋의 수치형 변수 extra에 대하여 2개의 수준을 가진 요인형 집단인 group 변수의 t-검정을 한다. Linux 사례 (MX 21) 창에는 1그룹과 2그룹의 차이를 비교하는 , , 의 선택 사항이 있다. 일단 기본 선택 들을 사용하자. Linux 사례 (MX 21) t.test(extra~group, alternative=‘two.sided,’ conf.level=.95, var.equal=FALSE, data=sleep) alternative 이하의 선택 사항들은 기본 설정을 사용하였기에 다음과 같은 결과를 갖는다. t.test(extra ~ group, data = sleep) Linux 사례 (MX 21) 참고로 group1 과 group2의 사례들을 상자그림(boxplot)을 이용하여 비교해보자. Linux 사례 (MX 21) 한편, 비교하는 두 집단의 분산의 차이가 없다는 것을 먼저 확인한 경우에 진행하는 t-검정도 있을 수 있다. 통계 &gt; 분산 &gt; 이-분산 F-검정의 결과를 바탕으로 독립-표본 t-검정을 진행하는 사례이다. 창에서 &lt;등분산을 가정합니까?&gt;에 ’예’를 선택한다. Linux 사례 (MX 21) t.test(extra~group, alternative=&#39;two.sided&#39;, conf.level=.95, var.equal=TRUE, data=sleep) Linux 사례 (MX 21) 7.3.3 Paired t-검정…/ Paired t-test… Linux 사례 (MX 21) datasets 패키지에 포함된 sleep 데이터셋에는 extra라는 수치형 변수가 포함되어 있다. 수치형 변수가 하나만 있는 경우는 Paired t-검정을 사용할 수 없다. 10명이 각각 2개의 약을 복용한 후 group1, group2라는 집단 안에서 수면 시간의 변화를 측정한 데이터셋이다. reshape(), reshapeL2W() 등의 함수를 사용하여 extra라는 수치형 변수를 group1 , group2 별로 두개의 수치형 변수로 변환시켜야 한다. 변환이 되면 &lt;Statistics : Means : Paired t-test&gt; 기능이 활성화된다. Linux 사례 (MX 21) extra 변수를 두개의 집단 X1, X2 로 이미 나눈 상황이다. X1과 X2를 각각 와 에 선택하자. Linux 사례 (MX 21) 창 추가 선택 사항들이 있다. 기본 선택을 이용하자. Linux 사례 (MX 21) with(sleepWide, (t.test(X1, X2, alternative=&#39;two.sided&#39;, conf.level=.95, paired=TRUE))) 아래의 함수 사용과 같은 결과를 얻는다. t.test(Pair(X1, X2) ~ 1, data = sleepWide) Linux 사례 (MX 21) 7.3.4 일원 분산 분석…/ One-way ANOVA… Linux 사례 (MX 21) datasets 패키지에 있는 sleep 데이터셋을 활용해보자. &lt;집단 (하나 선택)&gt;에 요인형 변수 group을, &lt;반응 변수 (하나 선택)&gt;에 수치형 변수 extra를 선택한다. 통계 &gt; 분산 &gt; 이-분산 F-검정을 통하여 비교되는 두 집단의 extra 변수의 사례 분포는 등분산임을 알고 있는 상황이다. Two variances F-test… Linux 사례 (MX 21) AnovaModel.1 &lt;- aov(extra ~ group, data=sleep) summary(AnovaModel.1) with(sleep, numSummary(extra, groups=group, statistics=c(&quot;mean&quot;, &quot;sd&quot;))) 일원 분산 분석의 명령문 작성과 분석 결과는 아래와 같다. Linux 사례 (MX 21) 추가로 carData 패키지의 Prestige 데이터셋을 이용하여 일원 분산 분석을 연습해보자. Prestige 데이터셋에는 type 이라는 요인형 변수가 있다. 그러나 앞서 연습한 sleep 데이터셋의 group 변수처럼 요인 수준이 두개가 아니라 요인의 수준이 셋이다. 직업의 사회적 권위에 대한 직업 유형별 (bc, prof, wc) 평균의 차이가 있는가를 점검한다. Linux 사례 (MX 21) AnovaModel.3 &lt;- aov(prestige ~ type, data=Prestige) summary(AnovaModel.3) with(Prestige, numSummary(prestige, groups=type, statistics=c(&quot;mean&quot;, &quot;sd&quot;))) 직업유형 (bc, prof, wc)에 따른 직업의 사회적 권위는, 각 유형별 평균을 비교할 때, 차이가 있다는 결과를 얻는다. Linux 사례 (MX 21) 7.3.5 다원 분산 분석…/ Multi-way ANOVA… Linux 사례 (MX 21) 다중 분산 분석 (Multi-way ANOVA)은 두개 이상의 요인형 변수들의 작용으로 하나의 수치형 변수에 영향을 주었는가를 점검하는 통계기법이다. Linux 사례 (MX 21) data(Adler, package=&quot;carData&quot;) help(&quot;Adler&quot;, package=&quot;carData&quot;) AnovaModel.1 &lt;- lm(rating ~ expectation*instruction, data=Adler, contrasts=list(expectation =&quot;contr.Sum&quot;, instruction =&quot;contr.Sum&quot;)) Anova(AnovaModel.1) Tapply(rating ~ expectation + instruction, mean, na.action=na.omit, data=Adler) # means Tapply(rating ~ expectation + instruction, sd, na.action=na.omit, data=Adler) # std. deviations xtabs(~ expectation + instruction, data=Adler) # counts Linux 사례 (MX 21) 7.4 비율 / Proportions 7.4.1 일-표본 비율 검정…/ Single-sample proportion test… Linux 사례 (MX 21) carData 패키지에 있는 Chile 데이터셋을 활용한다. 요인형 변수 vote를 변형시켜 vote.f 변수를 새롭게 코딩하고 사용하도록 하자. data(Chile, package=&quot;carData&quot;) Chile &lt;- within(Chile, { vote.f &lt;- Recode(vote, &#39;&quot;Y&quot; = &quot;yes&quot;; &quot;N&quot; = &quot;no&quot;; else = NA&#39;, as.factor=TRUE) }) Linux 사례 (MX 21) 창에 표시되어 있는 기본 설정을 그대로 사용하자. Linux 사례 (MX 21) local({ .Table &lt;- xtabs(~ vote.f , data= Chile ) cat(&quot;\\nFrequency counts (test is for first level):\\n&quot;) print(.Table) prop.test(rbind(.Table), alternative=&#39;two.sided&#39;, p=.5, conf.level=.95, correct=FALSE) }) 출력창에 나오는 결과는 아래와 같다: Linux 사례 (MX 21) 7.5 분산 / Variance 7.5.1 이-분산 F-검정…/ Two variances F-test… Linux 사례 (MX 21) datasets 패키지에 포함된 sleep 데이터셋을 활용해보자. 메뉴창에서 요인형 변수 group을 &lt;집단 (하나 선택)&gt;에, 수치형 변수 extra를 &lt;반응 변수 (하나 선택)&gt;으로 결정하자. Two variances F-test (이-분산 F-검정)은 두 개의 집단 비교로 반응 변수의 분산을 점검하는 기법이다. Linux 사례 (MX 21) Tapply(extra ~ group, var, na.action=na.omit, data=sleep) # variances by group var.test(extra ~ group, alternative=&#39;two.sided&#39;, conf.level=.95, data=sleep) alternative 이후 선택 사항들은 기본 선택을 사용하였다. 변화를 준 것은 없다. 따라서 아래의 명령문과 같은 의미이기도 하다. var.test(extra ~ group, data=sleep) sleep 데이터셋에 있는 extra 변수의 요인 수준 (group1, group2)별 분산은 차이가 있다고 통계적으로 말하기 어렵다는 결론을 얻는다. 줄여서 거칠게 말하면, 두 분산의 차이가 없다고 할 수 있다. Linux 사례 (MX 21) 7.5.2 Bartlett의 검정…/ Bartlett’s test… Linux 사례 (MX 21) carData 패키지에서 제공하는 Prestige 데이터셋을 활성화 시키자. Prestige 데이터셋에는 type 이라는 세개의 수준을 가진 요인형 변수가 있다. 그 수준 이름은 bc, prof, wc 이다. 직업유형(type)별로 사회적인 권위가 다른지를 확인하는 문제의식이 있다고 하자. 집단별(직업유형, type)로 직업의 사회적 권위(prestige)에 대한 분산의 차이가 있는지를 통계적으로 살펴본다. Linux 사례 (MX 21) Tapply(prestige ~ type, var, na.action=na.omit, data=Prestige) # variances by group bartlett.test(prestige ~ type, data=Prestige) Linux 사례 (MX 21) 7.5.3 Levene의 검정…/ Levene’s test… Linux 사례 (MX 21) carData 패키지에서 제공하는 Prestige 데이터셋을 활성화 시키자. Prestige 데이터셋에는 type 이라는 세개의 수준을 가진 요인형 변수가 있다. 그 수준 이름은 bc, prof, wc 이다. 직업유형(type)별로 사회적인 권위가 다른지를 확인하는 문제의식이 있다고 하자. 집단별(직업유형, type)로 직업의 사회적 권위(prestige)에 대한 분산의 차이가 있는지를 통계적으로 살펴본다. &lt;중앙(센터)&gt;에서 중앙값과 평균을 선택할 수 있다. 중앙값이 기본 설정이다. Linux 사례 (MX 21) Tapply(prestige ~ type, var, na.action=na.omit, data=Prestige) # variances by group leveneTest(prestige ~ type, data=Prestige, center=&quot;median&quot;) Linux 사례 (MX 21) 7.6 비모수 검정 / Nonparametric tests 7.6.1 이-표본 Wilcoxon 검정…/ Two-sample Wilcoxon test… Windows 사례 (10 Pro) ‘통계 &gt; 비모수 검정 &gt; 이-표본 Wilcoxon 검정…’ 기능을 이용하기 위해서 데이터셋을 선택하고, 정비해보자. datasets 패키지에 있는 airquality 데이터셋을 선택하고, 그 안에 있는 변수 Month 사례 값들 중에서 5월, 8월에 해당하는 5, 8을 선택한 하위 데이터셋을 만들고, airquality.sub라 이름 붙이자. 그리고, 5, 8을 요인화 시켜서, May, August라고 수준을 만들자. data(airquality, package=&quot;datasets&quot;) # airquality 데이터셋 불러오기 airquality.sub &lt;- subset(airquality, subset=Month %in% c(5, 8)) # 5월, 8월만 포함하는 하위셋 만들기 summary(airquality.sub) airquality.sub &lt;- within(airquality.sub, { Month.f &lt;- factor(Month, labels=c(&#39;May&#39;,&#39;August&#39;)) }) # Month.f라는 요인형 변수 만들기 집단 변수인 Month.f는 두개의 수준을 갖고 있고, 이 두개의 수준을 기준으로 Ozone을 비교하는 것이다. Windows 사례 (10 Pro) 창에 있는 기본 설정을 우선 그대로 사용해보자. 향후 데이터셋과 변수에 대한 이해력이 높아지면, 다양한 선택을 할 수 있다. Windows 사례 (10 Pro) Tapply(Ozone ~ Month.f, median, na.action=na.omit, data=airquality.sub) # medians by group wilcox.test(Ozone ~ Month.f, alternative=&quot;two.sided&quot;, data=airquality.sub) Windows 사례 (10 Pro) 7.6.2 일-표본 Wilcoxon 검정…/ Single-sample Wilcoxon test… Windows 사례 (10 Pro) 먼저 ’통계 &gt; 비모수 검정 &gt; 쌍-표본 Wilcoxon 검정…’을 살펴보는 것을 추천한다. depression 이라는 데이터셋을 만들고, 변수 first, second, change를 만들었다. change는 second와 first의 차이에 관련 사례 값을 갖는다. 참고: Paired-samples Wilcoxon test… ’통계 &gt; 비모수 검정 &gt; 일-표본 Wilcoxon 검정…’은 depression 데이터셋의 change 변수처럼 두 개 변수의 차이를 갖는 (또는 차이가 계산된) 변수를 기준값과 비교하여 차이 검정을 하는 기법이다. 때로는 특정 변수와 기준 값의 비교를 통하여 검정을 하기도 한다. Windows 사례 (10 Pro) 데이터셋과 변수에 대한 의미적 판단이 깊은 경우 의 선택을 다양하게 결정할 수 있다. 아래 화면에서 ’mu &lt; 0’은 change가 귀무(영) 가설, mu=0.0 일 때 depression 의 변화가 작아졌음을 확인하는 것으로 이해할 수 있다. Windows 사례 (10 Pro) with(depression, median(change, na.rm=TRUE)) with(depression, mean(change, na.rm=TRUE)) with(depression, wilcox.test(change, alternative=&#39;less&#39;, mu=0.0)) 출력 창에 아래와 같이 검정의 통계적 정보가 제공된다: Windows 사례 (10 Pro) 7.6.3 쌍-표본 Wilcoxon test…/ Paired-samples Wilcoxon test… Windows 사례 (10 Pro) depression 이라는 이름의 데이터셋을 만들자. first, second, change 라는 세개의 변수를 갖는다고 하자. change 변수는 second와 first의 차이를 사례 값으로 갖는다고 하자. 아래와 같을 것이다. first &lt;- c(1.83, 0.50, 1.62, 2.48, 1.68, 1.88, 1.55, 3.06, 1.30) second &lt;- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29) change &lt;- second - first # compute new variable 참조할 것 depression &lt;- data.frame(cbind(first, second, change)) # 세개의 vector를 묶어 데이터프레임으로 전환 Compute new variable… Windows 사례 (10 Pro) 창에 있는 기본 선택 사양을 그대로 사용해보자. 에서 ’양쪽(측)’이 선택되어 있다. depression 데이터셋의 second 변수와 first 변수 사이에 순위 차이가 있는가를 살펴보는 것이라 할 수 있다. Windows 사례 (10 Pro) with(depression, median(second - first, na.rm=TRUE)) # median difference with(depression, wilcox.test(second, first, alternative=&#39;two.sided&#39;, paired=TRUE)) # 양측 검정 with(depression, wilcox.test(second, first, alternative=&#39;less&#39;, paired=TRUE)) # 단측 검정 ( 차이 &lt; 0 ) Windows 사례 (10 Pro) 창에서 에 ’차이 &lt; 0’를 선택하자. second 변수의 사례 값이 first 변수의 사례 값보다 작아졌는지를 점검하는 것이다. (depression이 작아졌다는 것은 개선되었다는 의미로 해석될 수도 있다.) Windows 사례 (10 Pro) Windows 사례 (10 Pro) 7.6.4 Kruskal-Wallis 검정…/ Kruskal-Wallis test… Linux 사례 (MX 21) carData 패키지에 있는 Friendly 데이터셋을 활용한다. Linux 사례 (MX 21) data(Friendly, package=&quot;carData&quot;) Tapply(correct ~ condition, median, na.action=na.omit, data=Friendly) # medians by group kruskal.test(correct ~ condition, data=Friendly) Linux 사례 (MX 21) 7.6.5 Friedman 순위-합 검정…/ Friedman rank-sum test… Linux 사례 (MX 21) &lt;Friendman 순위-합 검정…&gt; 기능은 두개 이상의 수치형 변수가 데이터셋에 포함되어 있을때 활성화된다. &lt;Friedman 순위-합 검정…&gt; 기능의 함수적 특징을 이해하기 위하여 먼저 아래와 같이 RoundingTimes라는 데이터셋을 만들어보자. RoundingTimes &lt;- data.frame(matrix(c(5.40, 5.50, 5.55, 5.85, 5.70, 5.75, 5.20, 5.60, 5.50, 5.55, 5.50, 5.40, 5.90, 5.85, 5.70, 5.45, 5.55, 5.60, 5.40, 5.40, 5.35, 5.45, 5.50, 5.35, 5.25, 5.15, 5.00, 5.85, 5.80, 5.70, 5.25, 5.20, 5.10, 5.65, 5.55, 5.45, 5.60, 5.35, 5.45, 5.05, 5.00, 4.95, 5.50, 5.50, 5.40, 5.45, 5.55, 5.50, 5.55, 5.55, 5.35, 5.45, 5.50, 5.55, 5.50, 5.45, 5.25, 5.65, 5.60, 5.40, 5.70, 5.65, 5.55, 6.30, 6.30, 6.25), nrow = 22, byrow = TRUE, dimnames = list(1 : 22, c(&quot;Round Out&quot;, &quot;Narrow Angle&quot;, &quot;Wide Angle&quot;)))) summary(RoundingTimes) # RoundingTimes 데이터셋 보기 이 데이터셋을 만드는 이유는 friedman.test()라는 함수의 예제 연습에 포함되어있기 때문이다. RoundingTimes 데이터셋은 아래와 같은 내부 구성을 갖는다: Linux 사례 (MX 21) RoungdingTimes 라는 데이터셋을 만들고, 화면 맨 위에 있는 &lt;Friedman 순위-합 검정…&gt; 기능을 선택하면 추가적인 선택 메뉴 창으로 넘어간다. 창에서 &lt;반복-측정 변수 (두개 이상 선택)&gt;에서 세개의 변수를 모두 선택하고, 예(OK) 버튼을 누른다. Linux 사례 (MX 21) local({ .Responses &lt;- na.omit(with(RoundingTimes, cbind(Narrow.Angle, Round.Out, Wide.Angle))) cat(&quot;\\nMedians:\\n&quot;) print(apply(.Responses, 2, median)) friedman.test(.Responses) }) Linux 사례 (MX 21) help(&quot;friedman.test&quot;) # Friedman 순위 합 검정 도움말 보기 example(&quot;friedman.test&quot;) # Friedman 순위 합 검정 예제 연습하기 7.7 차원 분석 / Dimensional analysis 7.7.1 군집 분석 &gt; k-평균 군집 분석…/ Cluster analysis &gt; k-means cluster analysis… Windows 사례 (10 Pro) datasets 패키지에서 제공하는 USArrests 데이터셋을 이용해보자. 데이터셋에 포함된 네개의 변수를 모두 선택한다. Windows 사례 (10 Pro) 창에서, 군집의 수를 3개, 초기값의 수를 5번으로, 최대 반복 횟수를 5회로 정해보자. 데이터셋에 추가될 변수 이름이 KMeans가 될 것이다. 아래 있는 선택사항에서 데이터셋에 군집 할당하기를 선택한다. Windows 사례 (10 Pro) 위 화면에서 선택된 군집 행렬도(Bi-plot)이 아래와 같이 생산된다. Windows 사례 (10 Pro) USArrests 데이터셋에 변수 KMeans가 추가될 것이다. R Commander 상단에 있는 버튼을 눌러보자. KMeans 변수는 요인형으로 1, 2, 3 이라는 세개의 군집을 표시한다. Windows 사례 (10 Pro) 아래 화면은 다소 복잡해보일 것이다. 그러나 객체 .cluster가 만들어졌으며, 그 객체안에 있는 $size, $withinss, $tot.withinss, $betweenss 등의 정보를 차례를 보여준다고 생각하자. 그리고 biplot을 생산하고, USArrests 데이터셋에 KMeans라는 변수를 추가하는 것이다. Windows 사례 (10 Pro) 7.7.2 군집 분석 &gt; 위계 군집 분석…/ Cluster analysis &gt; Hierarchical cluster analysis… Linux 사례 (MX 21) datasets 패키지에 있는 USArrests 데이터셋을 활용해서, 위계 군집 분석을 연습해보자. 우선 USArrests 데이터셋을 활성화시킨다. 창에서 아래와 같이 변수 네개를 모두 선택한다. 그리고, 기본으로 추천되는 HClust.1를 군집화 이름으로 사용하자. Linux 사례 (MX 21) 창에서 기본설정된 사항들을 그대로 사용해보자. , , 등을 살펴본다. Linux 사례 (MX 21) 예(OK) 버튼을 누르면, 아래와 같은 그래픽 창이 등장한다. Linux 사례 (MX 21) data(USArrests, package=&quot;datasets&quot;) HClust.1 &lt;- hclust(dist(model.matrix(~-1 + Assault+Murder+Rape+UrbanPop, USArrests)) , method= &quot;ward&quot;) plot(HClust.1, main= &quot;Cluster Dendrogram for Solution HClust.1&quot;, xlab= &quot;Observation Number in Data Set USArrests&quot;, sub=&quot;Method=ward; Distance=euclidian&quot;) 7.7.3 군집 분석 &gt; 위계 군집화 요약하기…/ Cluster analysis &gt; Summarizing hierarchical clustering… Linux 사례 (MX 21) ‘통계 &gt; 차원 분석 &gt; 군집 분석 &gt; 위계 군집 분석’을 하였다고 하자. 그 다음에는 &lt;위계 군집화 요약하기…&gt; 기능을 사용할 수 있다. 창에서 를 3으로 변경해보자. , &lt;군집 행렬도(Bi-plot)&gt; 등이 선택되어 있는 것을 점검하자. Linux 사례 (MX 21) 예(OK) 버튼을 누르면, 아래와 같은 그래픽 창이 등장한다. Linux 사례 (MX 21) summary(as.factor(cutree(HClust.1, k = 3))) # Cluster Sizes by(model.matrix(~-1 + Assault + Murder + Rape + UrbanPop, USArrests), as.factor(cutree(HClust.1, k = 3)), colMeans) # Cluster Centroids biplot(princomp(model.matrix(~-1 + Assault + Murder + Rape + UrbanPop, USArrests)), xlabs = as.character(cutree(HClust.1, k = 3))) Linux 사례 (MX 21) 7.7.4 군집 분석 &gt; 위계 군집화를 데이터셋에 추가하기…/ Cluster Analysis &gt; Add hierarchical clustering to data set… Linux 사례 (MX 21) ’ 통계 &gt; 차원 분석 &gt; 군집 분석 &gt; 위계 군집 분석…’ 기능을 진행했다고 하자. 그 다음에 &lt;위계군집화를 데이터 셋에 추가하기…&gt;를 이용할 수 있다. 를 3으로 변경하자. 그리고 예(OK) 버튼을 누르면, hclus.label라는 변수가 USArrests 데이터셋에 추가된다. Linux 사례 (MX 21) R Commander 상단에 있는 버튼을 눌러보자. 아래와 같이 데이터셋의 내부 구성이 보일 것이다. hclus.label 변수가 추가되어 있음을 확인할 수 있다: Linux 사례 (MX 21) 7.7.5 척도 신뢰성…/ Scale reliability… Linux 사례 (MX 21) carData 패키지에서 제공하는 DavisThin 데이터셋을 활성화시키자. DavisThin 데이터셋에는 DT1, DT2, DT3, …, DT7 이라는 7개의 수치형 변수가 있다. 이 변수들은 “drive for thinness” 척도를 구성한다. 창에서 &lt;변수 (세개 이상 선택)&gt; 기능에서 DT1부터 DT7까지 일곱개의 변수를 선택하고, 예(OK) 버튼을 누른다. Linux 사례 (MX 21) reliability(cov(DavisThin[,c(&quot;DT1&quot;,&quot;DT2&quot;,&quot;DT3&quot;,&quot;DT4&quot;,&quot;DT5&quot;,&quot;DT6&quot;,&quot;DT7&quot;)], use=&quot;complete.obs&quot;)) Linux 사례 (MX 21) 7.7.6 주-성분 분석…/ Principal-components analysis… Linux 사례 (MX 21) 메뉴 창에서 &lt;변수 (두개 이상 선택)&gt; 에서 4개의 변수를 모두 선택해보자. Linux 사례 (MX 21) 창에서 기본 설정되어 있는 기능을 기억하자. Linux 사례 (MX 21) local({ .PC &lt;- princomp(~Assault+Murder+Rape+UrbanPop, cor=TRUE, data=USArrests) cat(&quot;\\nComponent loadings:\\n&quot;) print(unclass(loadings(.PC))) cat(&quot;\\nComponent variances:\\n&quot;) print(.PC$sd^2) cat(&quot;\\n&quot;) print(summary(.PC)) }) Linux 사례 (MX 21) .PC &lt;- princomp(~Assault+Murder+Rape+UrbanPop, cor=TRUE, data=USArrests) plot(.PC) Linux 사례 (MX 21) biplot(.PC) Linux 사례 (MX 21) 7.7.7 요인 분석…/ factor analysis… Linux 사례 (MX 21) 7.8 적합성 모델 / Fit models 7.8.1 선형 회귀…/ Linear regression… Linux 사례 (MX 21) carData 패키지에서 제공하는 Prestige 데이터셋을 불러와서 활성화시키자. 그러면, 위의 화면처럼 &lt;선형 회귀…&gt; 기능이 활성화될 것이다. 이 기능을 선택하면 아래와 같이 Prestige 데이터셋의 변수 목록이 등장하며, 회귀분석을 위한 구조적 설계를 시작한다. 교육연수(education)와 연소득(income)이 직업의 사회적권위(prestige)에 영향을 미치는가? 어떤 영향을 미치는가? 등의 문제의식을 통계적으로 점검한다고 해보자. 교육연수와 연소득은 설명 변수일 것이며, 직업의 사회적 권위는 이 두개의 설명 변수로부터 영향을 받는 반응 변수가 될 것이다. 한편, 에는 RegModel.1이 자동적으로 추천된다. 여러 개의 모델을 만들어 점검하는 경우, 지속적으로 일련번호가 추가된다. 분석가가 자유롭게 모델 이름을 정할 수 있다. Linux 사례 (MX 21) 예(OK) 버튼을 누르면, R Commander 화면 상단에 있는 &lt;모델:&gt;옆에 파란색으로 RegModel.1이 등장한다. Linux 사례 (MX 21) RegModel.1 &lt;- lm(prestige~education+income, data=Prestige) summary(RegModel.1) R Commander의 출력 창에는 만든 선형 회귀 모델의 결과가 출력된다. Linux 사례 (MX 21) 7.8.2 선형 모델…/ Linear model… Linux 사례 (MX 21) 아래와 같은 선택 창에서 변수들을 선택할 수 있다. &lt;통계 : 적합성 모델 : 선형 회귀…&gt; 기능의 &lt;선형 회귀…&gt;창과 달리 선택할 수 있는 변수에 ’type [요인]’이 추가되어 있다. carData 패키지에서 제공되는 Prestige 데이터셋에는 요인형 변수 type이 포함되어 있다. 기능에는 요인형 변수를 함께 넣어서 계산할 수 있고, 표본을 모집단 크기에 비율적으로 맞추고자 사례 값에 가중치를 넣어서 계산하는 선택 기능이 있다. 그리고 변수를 선택하는 것을 뛰어넘어 변수들 사이의 관계성을 수식화 할 수 있는 기능이 포함되어 있다. Linux 사례 (MX 21) 아래 창은 위의 모델 구성식과는 다른 방식을 제안한다. 직업의 사회적 권위 (prestige)에 대한 education + income + women + type 의 영향력을 계산하는 것이 아니라, education + log(income)의 결과와 type의 관계가 prestige 변수에 미치는 영향력을 계산하는 식이다. Linux 사례 (MX 21) LinearModel.1 &lt;- lm(prestige ~ (education + log(income))*type, data=Prestige) summary(LinearModel.1) Linux 사례 (MX 21) - R Markdown 보고서 결과 7.8.3 일반화 선형 모델…/ Generalized linear model… Linux 사례 (MX 21) MASS 패키지에 있는 birthwt 데이터셋을 활용하자. birthwt 데이터셋을 분석을 위하여 변형시켜서 bwt라는 데이터셋으로 만들자. bwt &lt;- with(birthwt, { race &lt;- factor(race, labels = c(&quot;white&quot;, &quot;black&quot;, &quot;other&quot;)) ptd &lt;- factor(ptl &gt; 0) ftv &lt;- factor(ftv) levels(ftv)[-(1:2)] &lt;- &quot;2+&quot; data.frame(low = factor(low), age, lwt, race, smoke = (smoke &gt; 0), ptd, ht = (ht &gt; 0), ui = (ui &gt; 0), ftv) }) options(contrasts = c(&quot;contr.treatment&quot;, &quot;contr.poly&quot;)) bwt 데이터셋을 활성화시키자. Linux 사례 (MX 21) GLM.3 &lt;- glm(low ~ ., family=binomial(logit), data=bwt) summary(GLM.3) Linux 사례 (MX 21) - R Markdown 에서 exp(coef(GLM.3)) # Exponentiated coefficients (&quot;odds ratios&quot;) Linux 사례 (MX 21) ## an example with offsets from Venables &amp; Ripley (2002, p.189) utils::data(anorexia, package = &quot;MASS&quot;) GLM.2 &lt;- glm(Postwt ~ Prewt + Treat + offset(Prewt), family=gaussian(identity), data=anorexia) summary(GLM.2) Linux 사례 (MX 21) data(Cowles, package=&quot;carData&quot;) Linux 사례 (MX 21) GLM.1 &lt;- glm(volunteer ~ sex + neuroticism*extraversion, family=binomial(logit), data=Cowles) summary(GLM.1) exp(coef(GLM.1)) # Exponentiated coefficients (&quot;odds ratios&quot;) Linux 사례 (MX 21) 7.8.4 다항 로짓 모델…/ Multinomial logit model… Linux 사례 (MX 21) MASS 패키지에 있는 birthwt 데이터셋을 활용해보자. 먼저 birthwt 데이터셋을 활성화 시킨다. 이후 일부 변수의 특징을 변화시켜 bwt라는 새로운 데이터셋을 만들자.아래의 연습 중간에 bwt를 만드는 스크립트가 있다. 참고: Generalized linear model… 아래 화면은 bwt 데이터셋을 활용한 사례이다. Linux 사례 (MX 21) MLM.1 &lt;- multinom(low ~ ., data=bwt, trace=FALSE) summary(MLM.1, cor=FALSE, Wald=TRUE) Linux 사례 (MX 21) "],["그래프-graph.html", "8 . 그래프 / Graph 8.1 색 팔레트…/ Color palette… 8.2 색인 그림…/ Index plot… 8.3 히스토그램…/ Histogram… 8.4 이산형 수치 변수 그리기…/ Plot discrete numeric variable… 8.5 밀도 추정…/ Density estimate… 8.6 줄기-잎 전시…/ Stem-and-leaf display… 8.7 상자그림…/ Boxplot… 8.8 분위수-비교 그림…/ Quantile-comparison plot… 8.9 대칭 상자그림…/ Symmetry boxplot… 8.10 산점도…/ Scatterplot… 8.11 산점도 행렬…/ Scatterplot matrix… 8.12 선 그래프…/ Line graph… 8.13 XY 조건 그림…/ XY conditioning plot… 8.14 평균 그림…/ Plot of means… 8.15 조각 도표…/ Strip chart… 8.16 막대 그래프…/ Bar graph… 8.17 원 그래프…/ Pie chart… 8.18 3D 그래프 / 3D Graph 8.19 그래프 파일에 저장 / Save graph to file", " 8 . 그래프 / Graph 8.1 색 팔레트…/ Color palette… Linux 사례 (CentOS 7.x) &lt;색 팔레트…&gt; 기능을 선택하면 8개의 주요 색깔이 등장하고 그 색의 16진수(hexadecimal)값과 이름이 표시된다. Linux 사례 (CentOS 7.x) 다섯째 색인 cyan, 일곱째 색인 yellow를 각각 gold, orange로 바꿔보자. Linux 사례 (CentOS 7.x) gold의 16진수 값인 #fad800, orange의 16진수 값인 #ffa500을 기억하자. cyan의 16진수 값인 #00ffff, yellow의 16진수 값인 #ffff00을 기억하자. gold를 cyan으로, orange를 yellow로 다시 바꿔보자. Selection: #fad800을 cyan의 #00ffff로 바꾸고 실행(엔터키)을 한다. Linux 사례 (CentOS 7.x) Linux 사례 (CentOS 7.x) yellow로 바꾸려면, 16진수 값 #ffff00을 입력하고 실행(엔터키)을 한다. 다음과 같이 바뀔 것이다: Linux 사례 (CentOS 7.x) 8.2 색인 그림…/ Index plot… 데이터셋이 활성화되어 있는 경우, 색인 그림(index plot)을 사용할 수 있다. 예를 들어, carData 패키지의 Prestige 데이터셋이 활성화되어있다고 하자. Linux 사례 (MX 21) Prestige 데이터셋에 있는 education 변수의 색인 그림을 만들자. 메뉴창에 있는 variable (pick one or more) 에서 education을 선택한다. 그 아래에 있는 &lt;집단별 표시…&gt;에서 요인형 변수를 선택하여 요인 수준별로 색인 그림을 출력할지 결정할 수 있다(이 설명에서는 이 기능을 사용하지 않는다). 그리고 디렉토리로 이동하여 세부사항을 점검한다. Linux 사례 (MX 21) 의 메뉴창에 다양한 기능이 있다. 에서 는 자동적으로 변수이름이 사용되고 제목은 미설정되는데, ’교육연수’와 ’education index plot’이라고 입력하자. 그리고 예(OK) 버튼을 누른다. Linux 사례 (MX 21) 새로운 그래픽 장치창이 등장한다. 그리고 그 장치창에 안의 아래 화면 왼쪽에 ’교육연수’가, 상단 중앙에 ’education index plot’이 출력된다. 한편 그래프 안에 두개의 사례 이름이 겹쳐서 인쇄된 현상을 보게된다. Linux 사례 (MX 21) 아래 출력창을 살펴보자. indexplot() 함수의 코드 사용법을 먼저 살펴본다. 앞서 입력한 ‘교육연수,’ ’education index plot’이 인자 안에 들어있는 알 수 있다. indexplot(Prestige[,&#39;education&#39;, drop=FALSE], type=&#39;h&#39;, id.method=&#39;y&#39;, id.n=2, ylab=&quot;교육연수&quot;, main=&quot;education index plot&quot;) education 변수의 사례 값 중에서 university.teachers는 15.97, physicians는 15.96라는 두개의 최고 값을 갖는다. 출력창에는 university.teachers, physicians 라는 순서와 함께 사례번호인 21, 24가 출력된다. 한편 그 밑에 있는 명령문은 출력된 그래픽창의 그림을 저장하는 내용을 담고 있다. dev.print(png, filename=&quot;/home/jhshin/사진/Rcmdr/Graphs/indexplot/RGraph_indexplot1.png&quot;, width=13, height=8, pointsize=12, units=&quot;in&quot;, res=300) Linux 사례 (MX 21) Graphs &gt; Save graph to file 메뉴에서 &lt;bitmap(으)로…&gt; 기능을 선택하면 아래와 같은 선택창이 등장한다. 해상도를 300으로 최대한으로 올려보자. 예(OK) 버튼을 누른다. Linux 사례 (MX 21) 그래픽 파일을 저장할 위치를 결정하고, 결정한 파일 이름을 입력하고 저장하기(save)를 누른다. 실용적으로 RGraph_indexplot1.png라고 저장해보자. ## 점 플롯 / Dot plot… 8.3 히스토그램…/ Histogram… Linux 사례 (MX 21) 히스토그램으로 시각화할 변수는 수치형 (numeric, integer)이다. Prestige의 요인형 변수 type은 &lt;집단기준으로 그리기…&gt;에서 선택할 수 있다. Linux 사례 (MX 21) income 변수의 정보를 몇 개의 구간으로 나눠서 히스토그램을 만들 것인가, 그래프의 이름(title, label)관련 정보를 어떻게 넣을 것인가를 조정, 입력할 수 있다. Linux 사례 (MX 21) with(Prestige, Hist(income, scale=&quot;frequency&quot;, breaks=&quot;Sturges&quot;, col=&quot;darkgray&quot;, ylab=&quot;수입(연봉)&quot;, main=&quot;1971년 캐나다 직업 연봉&quot;)) 그래픽장치 창에 다음과 같은 히스토그램이 등장한다. Linux 사례 (MX 21) 파일로 저장하여 활용하고자 할 때 사용하는 기능이다. Linux 사례 (MX 21) &lt;bitmap(으)로…&gt; 기능을 열면, 아래와 같은 파일 저장 선택기능들을 점검할 수 있다. 표현하고자는 시각화 목표에 따라 넓이와 높이를 변화줄 수 있고, 해상도를 높게, 글 크기를 크게 할 수 있다. Linux 사례 (MX 21) dev.print(png, filename=&quot;/home/jhshin/RGraph_historgram1.png&quot;, width=7, height=7, pointsize=16, units=&quot;in&quot;, res=300) 예(OK) 버튼을 누르면 파일의 경로와 이름을 정할 수 있는 메뉴창이 아래와 같이 등장한다. 저장 경로를 결정하고, 희망이름.png 파일로 저장하자. Linux 사례 (MX 21) 저장된 파일을 다시 한번 열어보자. 아래와 같다: Linux 사례 (MX 21) 8.4 이산형 수치 변수 그리기…/ Plot discrete numeric variable… Linux 사례 (MX 21) carData 패키지의 Cowles 데이터셋을 활용해서 연습해보자. data(Cowles, package=&quot;carData&quot;) # Cowles 데이터셋 불러오기 summary(Cowles) # Cowles 데이터셋의 요약정보 보기 (변수이름, 사례요약) 외향성을 의미하는 이산형 수치 변수인 extraversion을 선택한다. Linux 사례 (MX 21) 요인형 변수 목록에 sex와 volunteer가 있다. volunteer를 선택한다. Linux 사례 (MX 21) 창의 선택 기능중에서 에 ’백분율”을 선택한다. 그리고 에는 내용적 이해를 돕는 사항들을 넣을 수 있다. Linux 사례 (MX 21) 아래와 같이 그래픽 창에 ‘이산형 수치 변수’ extraversion의 백분율 분포가 자원봉사 지원 여부인 volunteer 변수의 요인형 수준인 ‘no,’ ‘yes’ 별로 그래프화된다. Linux 사례 (MX 21) with(Cowles, discretePlot(extraversion, by=volunteer, scale=&quot;percent&quot;, xlab=&quot;외향성 (extraversion)&quot;, ylab=&quot;비율 (%)&quot;, main=&quot;자원봉사 지원여부 그룹에 따른 외향성 분포&quot;)) Cowles 데이터셋 이해하기 8.5 밀도 추정…/ Density estimate… Linux 사례 (MX 21) 밀도 그래프(densityplot)은 수치형 변수를 촘촘히 배열하면서 그 사례사이의 거리를 역으로 밀도화시키는 방법이다. 줄여 말하면, 거리가 가까우면 밀도가 높고, 거리가 멀면 밀도가 낮게 계산되고 시각화된다. Prestige 데이터셋의 income 변수를 사용해보자. Linux 사례 (MX 21) Linux 사례 (MX 21) 밀도 추정 그래프를 시각화하는 경우, 그래프의 시작점과 끝점에 대한 사전정보를 수치적 정보 요약 등을 활용하여 미리 알고서 지정해주면 그래프가 보다 정교해진다. 위의 그래프를 보라. 수입(연봉)을 표시하는 촘촘한 사례들의 영역 바깥에 그래프의 왼쪽 긑과 오른쪽 끝이 표시된 것을 보게된다. 변화를 줘보자. numSummary(Prestige\\[,&quot;income&quot;, drop=FALSE\\], statistics=c(“mean,” “sd,” “IQR,” “quantiles”), quantiles=c(0,.25,.5,.75,1)) numSummary() 함수를 활용하여 최소값, 최대값 등을 찾아보자. 그 사례 값을 아래의 입력창에 넣는다. Linux 사례 (MX 21) 그래프의 시작점에 최소값을, 끝점에 최대값을 넣고 그래프를 만들면, 수입(연봉)의 분포가 보다 분명하게 보일 것이다. densityPlot( ~ income, data=Prestige, bw=bw.SJ, adjust=1, kernel=dnorm, method=&quot;adaptive&quot;, from=611, to=25879, xlab=&quot;수입(연봉)&quot;, ylab=&quot;밀도(Density)&quot;) Linux 사례 (MX 21) 한편, 직업유형인 요인형 변수 type을 기준으로 수입(연봉)의 분포를 재분류해보자. &lt;집단 기준으로 그리고…&gt; 버튼을 누르면 &lt;집단 변수 (하나 선택)&gt; 기능에서 요인형 변수 목록이 나타날 것이다. Prestige 데이터셋에는 type 하나만 있다. 그리고 예(OK) 버튼을 누른다. Linux 사례 (MX 21) 그러면 &lt;집단 기준으로 그리기…&gt; 버튼이 으로 바뀐다. type의 수준별로 income의 밀도 분포를 시각화할 준비가 된 것이다. Linux 사례 (MX 21) 그래픽장치 창에 type 별 수입(연봉)에 대한 밀도 그래프가 등장한다. 그래프의 오른쪽에는 네모상자 안에 범례 표시가 있어서 어떤 선이 요인형 변수의 어떤 수준을 나타내는지 알려준다. Linux 사례 (MX 21) 그래프 &gt; 그래프를 파일로 저장하기 &gt; PDF/Postscript/EPS(으)로 에서 PDF 파일로 저장해보자. 넓이와 높이에 대한 조정 없이&lt;글 크기 (점)&gt;을 16까지 키워보자. Linux 사례 (MX 21) 아래 코드에서 ’main’인자를 살펴보라. 메뉴창에 등장하는 기능을 활용하면서 적용할 수 있는 범위에 DensityPlot 함수에는 제목 입력이 없다. 아쉽기도 한 부분이다. 이 경우는 입력창에서 main=“제목 이름”을 추가하여 넣고 실행하기 버튼을 누르면 된다. densityPlot(income~type, data=Prestige, bw=bw.SJ, adjust=1, kernel=dnorm, method=&quot;adaptive&quot;, from=611, to=25879, xlab=&quot;수입(연봉)&quot;, ylab=&quot;밀도(Density)&quot;, main=&quot;1971년 캐나다 직업 유형별 수입에 관한 밀도그래프&quot;) Linux 사례 (MX 21) Q1&gt; 첨부된 PDF 파일에는 제목과 축에 사용된 한글이 보이지 않고 점(…)으로 표시됩니다. 고쳐주세요. 8.6 줄기-잎 전시…/ Stem-and-leaf display… Linux 사례 (MX 21) Prestige 데이터셋의 income 변수로 연습해보자. 먼저 income 변수의 수리적 특징에 대하여 점검한다. Linux 사례 (MX 21) Prestige 데이터셋에 있는 수치형 변수 중에서 income 변수를 선택한다. 그리고 선택기능을 살펴본다. Linux 사례 (MX 21) Linux 사례 (MX 21) Linux 사례 (MX 21) 8.7 상자그림…/ Boxplot… Linux 사례 (MX 21) Prestige 데이터셋의 수치형 변수 income을 요인형변수 type의 수준별로 상자그림을 만들고 type별로 비교해보자. Linux 사례 (MX 21) 옆에 있는 으로 넘어가서 살펴보자. 기본설정으로 되어있는 의 ’자동적으로’를 놔두고, 에 한글을 입력하면서 의미적 해석이 가능한 이름과 제목을 넣는다. Linux 사례 (MX 21) 그래픽장치 창에 상자그림이 등장한다. 직업유형의 수준인 bc, prof, wc (블라칼라, 전문직, 화이트칼라) 별로 상자그림이 시각화되어 최소값, 중앙값(median), 최대값과 25%, 75% 수준의 값과 이상치 등이 표시된다. Linux 사례 (MX 21) 아래와 같은 명령문이 사용된다: Boxplot(income~type, data=Prestige, id=list(method=&quot;y&quot;), xlab=&quot;직업유형(type)&quot;, ylab=&quot;수입(연봉, income)&quot;, main=&quot;1971년 캐나다 직업유형별 수입&quot;) 8.8 분위수-비교 그림…/ Quantile-comparison plot… 분위수-비교 그림은 수치형 변수 사례 값의 분포적 경향성을 확인하는데 사용된다. 또한 변수들의 관계에 대한 수리적 계산 과정에서 발생하는 잔차(Residuals)들의 분포적 특징을 확인하는데 활용할 수 있다. Linux 사례 (MX 21) Prestige 데이터셋에 있는 수치형 변수중에 income 변수를 선택해보자. Linux 사례 (MX 21) 메뉴 창을 열면, income 변수의 특징을 맞춰 볼 분포들을 선택하는 기능이 있다. 기본 설정으로 되어있는 정규분포를 많이 사용한다. 오른쪽에 있는 에 출력될 그래프의 정보를 담는 내용을 입력할 수 있다. Linux 사례 (MX 21) 정규분포적 특징 안에서 income 변수의 사례적 흐름을 시각적으로 확인할 수 있다. 오른쪽 상단에 두 개의 이상치가 있는데, general.managers, physicians 직업이라고 알려준다. Linux 사례 (MX 21) with(Prestige, qqPlot(income, dist=“norm,” id=list(method=“y,” n=2, labels=rownames(Prestige)), ylab=“income (수입),” main=“income 변수의 분위수-비교 그림”)) Linux 사례 (MX 21) 아래 그래프는 income 변수 대신 education 변수를 선택해서 정규분포적 특징 안에서 살펴본 것이다. income 변수에 비해서 이상치들이 적게 보인다. Linux 사례 (MX 21) 아래 그래프는 Prestige 데이터셋에 포함된 prestige 변수의 분위수-비교 그림의 시각화 결과이다. 정규분포적 특징 안에서 prestige 변수의 사례들이 분포되어 있음을 알 수 있다. Linux 사례 (MX 21) 참고로 income 변수에 log 계산을 한 후 분위수-비교 그림을 그려보자. 원래의 income 변수보다 정규분포적 특징이 강화된다. Linux 사례 (MX 21) 8.9 대칭 상자그림…/ Symmetry boxplot… Linux 사례 (MX 21) Prestige 데이터셋에 있는 income 변수를 선택해보자. Linux 사례 (MX 21) symbox(~ income, data=Prestige, trans=bcPower, powers=c(-1,-0.5,0,0.5,1)) 그래픽장치 창에 아래와 같이 시각화된다: Linux 사례 (MX 21) 8.10 산점도…/ Scatterplot… Windows 사례 (10 Pro) 산점도(Scatterplot)은 두개의 수치형 변수 사이의 수리적 연관성에 관한 시각화 기법이다. 아래의 화면에서 각 하나씩을 x-변수와 y-변수에 선택해야 한다. Prestige 데이터셋에 있는 education (교육연수), income (수입, 연소득)을 각각 선택해보자. Windows 사례 (10 Pro) 창에 여러가지 추가 기능과 선택사양들이 있다. 먼저 중에 , 을 선택해보자. 그리고 에 변수와 그래프를 이해하는 데 도움을 주는 내용을 입력한다. 그리고 &lt;Point(점) 크기&gt;, , 등의 크기를 조금씩 변경할 수 있다. Windows 사례 (10 Pro) scatterplot(income~education, regLine=TRUE, smooth=list(span=0.5, spread=FALSE), boxplots=FALSE, xlab=&quot;education (교육연수)&quot;, ylab=&quot;income (수입, 연소득)&quot;, main=&quot;교육연수와 연소득의 관계&quot;, cex.axis=1.5, cex.lab=1.5, data=Prestige) 새로운 그래픽장치 창에 산점도가 출력된다. 를 시각적으로 살펴보고자 한 목적으로 점들의 분포와 추가된 최소제곱선, 평활선 등을 점검한다. 교육연수와 연소득의 관계의 방향, 크기 및 경향성 등에 대한 통찰력을 키울 수 있다. Windows 사례 (10 Pro) 한편, 산점도에 요인형 변수의 수준별로 나누어 시각화를 할 수 있다. Prestige 데이터셋에는 type 이라는 요인형 변수가 있는데, 직업유형에 따른 를 보다 미시적으로 살펴볼 수 있다. 그리고 x-축, y-축 이름 옆에 을 추가하여 각 변수들의 수치적 특징을 추가할 수 있다. scatterplot(income~education | type, regLine=TRUE, smooth=list(span=0.5, spread=FALSE), boxplots=&#39;xy&#39;, xlab=&quot;education (교육연수)&quot;, ylab=&quot;income (수입, 연소득)&quot;, main=&quot;교육연수와 연소득의 관계&quot;, cex.axis=1.5, cex.lab=1.5, by.groups=TRUE, data=Prestige) Windows 사례 (10 Pro) 8.11 산점도 행렬…/ Scatterplot matrix… Windows 사례 (10 Pro) 산점도(Scatterplot)는 두개의 수치형 변수 사이의 관계성을 시각적으로 보면서 통찰력을 얻고자 하는 기법이다. 그런데 세개 이상의 수치형 변수들을 함께 점검하면서 관계성을 시각화하고자 할 때, 산점도의 이용은 다소 불편함이 생긴다. 이 때 산점도 행렬(Scatterplot matrix)을 사용한다. Prestige 데이터셋에서 네개의 수치형 변수를 점검한다고 하자. 교육연수, 연소득, 직업권위의식, 여성참여율 등과 관련된 변수들 네개를 선택하자. Windows 사례 (10 Pro) 창에서 는 을 선택하고, 에서는 , 을 선택하고, 그래프 제목을 추가한다. Windows 사례 (10 Pro) scatterplotMatrix(~education+income+prestige+women, regLine=TRUE, smooth=list(span=0.5, spread=FALSE), diagonal=list(method=&quot;density&quot;), data=Prestige, main=&quot;Prestige 데이터셋 주요변수들의 산점도 행렬&quot;) 아래와 같은 그래픽장치 창에 산점도 행렬이 등장한다. education, income, prestige, women 이라는 네개의 변수 각각의 밀도함수가 변수 이름과 함께 작성되어 있으며, 행렬 매 칸마다 두개의 변수 사이의 산점도가 제공된다. 행렬 칸 바깥에 있는 숫자들은 수치형 변수들의 사례 값 범위를 요약해서 보여준다. Windows 사례 (10 Pro) 산점도행렬에는 많은 정보가 담겨있다. 확인하고자 하는 정보만을 부각시키고자 산점도행렬을 단순화시키는 노력이 요구된다. 8.12 선 그래프…/ Line graph… Windows 사례 (10 Pro) 선 그래프(Line graph/ lineplot)는 주로 시계열적인 흐름을 가진 수치형 변수의 변화를 점검할 때 사용한다. carData 패키지에 있는 Bfox 데이터셋을 활성화시키자. Bfox 데이터셋이 활성화된 후, R Commander 화면에서 버튼을 눌러보자. 행의 이름이 연속형 숫자인 연도로 되어있다. 연도형 행 이름을 time 이라는 변수로 전환시켜보자. 아래 창의 을 참고하라. data(Bfox, package=“carData”) Bfox$time &lt;- with(Bfox, as.numeric(rownames(Bfox))) Windows 사례 (10 Pro) 아래와 같이 데이터셋 내부 구성이 보일 것이다. Windows 사례 (10 Pro) Bfox 데이터셋에서 새롭게 만든 변수 time을 &lt;x 변수 (하나 선택)&gt;에서 선택하고, &lt;y 변수 (하나 이상 선택)&gt;에 주별(weekly) 남성급여, 여성급여를 뜻하는 menwage, womwage 두 변수를 선택한다. y 변수에 두개의 변수를 선택했다는 것은 두개의 선그래프가 time 변수의 흐름에 따라 만들겠다는 의미이기도 하다. Windows 사례 (10 Pro) with(Bfox, lineplot(time, menwage, womwage)) 그래픽장치 창에 다음과 같은 선 그래프가 출력된다. 1946년부터 1975년까지의 남성과 여성의 주급(weekly wage)의 변화를 보게된다. Windows 사례 (10 Pro) 또 다른 선 그래프를 만들어보자. partic은 노동인구내의 여성비율, parttime은 주당 34시간 이내의 시간제노동 비율이다. 이 두 변수의 연도별 변화 추이를 살펴보기 위하여 선 그래프를 만든다면 아래와 같을 것이다: Windows 사례 (10 Pro) 선 그래프를 만드는데 가장 기본적인 출발점은 x 변수에 시간적 흐름을 갖는 변수를 선택하는 것이다. 만약 시계열적 수치형 변수가 선택되지 않는다면, 선그래프는 시사점을 가지 못하는 불규칙한 그림을 갖게 될 것이다. 예를 들어, carData에 있는 Prestige 데이터셋에는 시계열적 정보를 갖는 수치형 변수가 없다. prestige 변수를 x 변수에 놓고, education과 income을 y 변수에 놓고, 그래프를 그려보자. Windows 사례 (10 Pro) 다음과 같은 경고문을 만나게된다. x 변수인 prestige 변수의 사례배열에 순서가 없다는 지시문을 보게된다. Windows 사례 (10 Pro) Windows 사례 (10 Pro) 8.13 XY 조건 그림…/ XY conditioning plot… Windows 사례 (10 Pro) carData 패키지의 Prestige 데이터셋을 활성화시키자. 연소득과 직업의 사회적귄위에 대한 이해를 확대하고자 income, prestige 변수의 연관성에 대하여 시각적으로 점검한다고 하자. bc, prof, wc라는 수준을 가진 요인형 변수 type을 집단화시켜 시각화에 포함시키자. Windows 사례 (10 Pro) 창에 있는 많은 선택 기능은 기본설정으로 놓고 오른쪽의 에 그래프의 내용적 이해를 높이고자 관련 사항을 추가적으로 입력하자. Windows 사례 (10 Pro) xyplot(prestige ~ income, groups=type, type=&quot;p&quot;, pch=16, auto.key=list(border=TRUE), par.settings=simpleTheme(pch=16), scales=list(x=list(relation=&#39;same&#39;), y=list(relation=&#39;same&#39;)), data=Prestige, xlab=&quot;income (연소득)&quot;, ylab=&quot;prestige (직업의권위)&quot;, main=&quot;연소득에 따른 직업의 사회적 권위인식&quot;) 그래픽장치 창에 아래와 같은 그래프가 출력된다. 직업유형을 뜻하는 type 변수의 수준인 bc, prof, wc 수준의 범례가 보인다. 그리고 그 색깔별로 점들이 찍혀 있어, 추가적인 이해를 제공한다. Windows 사례 (10 Pro) 아래 그림은 직업유형 변수인 type을 “Groups ‘groups=’에서 해제하고, Conditions’|’에 선택한다. Windows 사례 (10 Pro) 창의 오른쪽에 있는 에 내용적인 이해를 높이는 이름표과 제목을 넣자. Windows 사례 (10 Pro) Windows 사례 (10 Pro) xyplot(prestige ~ income | type, type=&quot;p&quot;, pch=16, auto.key=list(border=TRUE), par.settings=simpleTheme(pch=16), scales=list(x=list(relation=&#39;same&#39;), y=list(relation=&#39;same&#39;)), data=Prestige, xlab=&quot;income (연소득)&quot;, ylab=&quot;prestige (직업의권위)&quot;, main=&quot;연소득에 따른 직업의 사회적 권위의식&quot;) 아래에 있는 그래픽장치 창은 위에 있는 그래픽장치 창과 달리 직업유형별(bc, prof, wc)별로 산점도가 각각 제작된다. Windows 사례 (10 Pro) xyplot() 함수는 시계열적 수치형 변수와 관련해서는 lineplot()과 유사하게 그래프를 출력할 수 있다. carData 패키지의 Bfox의 사례를 수치형 time 변수로 변환시키고 그래프를 만들어보자. Windows 사례 (10 Pro) 창에 있는 &lt;그림 유형(하나 또는 둘 모두)&gt;에 점/줄(선) 모두 선택해보자. 물론 에 내용을 추가할 수도 있다. Windows 사례 (10 Pro) xyplot(menwage + womwage \\~ time, type=c(&quot;p&quot;, &quot;l&quot;), pch=16, auto.key=list(border=TRUE), par.settings=simpleTheme(pch=16), scales=list(x=list(relation=&#39;same&#39;), y=list(relation=&#39;same&#39;)), data=Bfox) 시간의 흐름에 따른 수치형 변수들의 변화 흐름을 파악할 수 있다. 주의해야할 점은 두개 이상의 수치형 변수를 그래프에 모두 넣을 경우, 각 변수들의 사례 기준(크기, 비율 등)이 동일해야 시각화가 특징을 잡아내는데 효과적이다. Windows 사례 (10 Pro) 8.14 평균 그림…/ Plot of means… Linux 사례 (CentOS 7.x) carData 패키지에 있는 Prestige 데이터셋을 활성화시키고, 그래프 메뉴창에 &lt;평균 그림…&gt; 기능을 선택하면 아래와 같은 추가 선택 창이 등장한다. type 이라는 요인형 변수 하나가 Prestige 데이터셋에 있어 자동 선택되며, &lt;반응 변수 (하나 선택)&gt;에서 income (수입, 연소득)을 선택해보자. Linux 사례 (CentOS 7.x) 창에서 에 내용적 이해를 돕기 위해 변수이름, 그래프 제목에 설명을 입력하자. Linux 사례 (CentOS 7.x) with(Prestige, plotMeans(income, type, error.bars=&quot;se&quot;, xlab=&quot;type (직업유형)&quot;, ylab=&quot;income (연소득)&quot;, main=&quot;1971년 캐나다 직업유형별 연소득 평균그림&quot;, connect=TRUE)) Prestige 데이터셋의 요인형 변수 type에는 세개의 수준이 있으며, bc, prof, wc 등이다. 아래 그래픽장치 창에는 bc, prof, wc 직업 유형에 포함된 직업들의 평균 소득을 알리는 그래프가 출력된다. Linux 사례 (CentOS 7.x) income 변수 대신 prestige 변수를 선택해보자. 해당 직업에 대한 사회적 권위의 크기를 표시하는 prestige 변수의 평균 그림을 직업유형 bc, prof, wc 별로 제작해 보자. with(Prestige, plotMeans(income, type, error.bars=&quot;se&quot;, xlab=&quot;type (직업유형)&quot;, ylab=&quot;prestige (직업권위)&quot;, main=&quot;1971년 캐나다 직업유형별 직업권위 평균그림&quot;, connect=TRUE)) Linux 사례 (CentOS 7.x) with(Prestige, plotMeans(prestige, type, error.bars=&quot;se&quot;, xlab=&quot;type (직업유형)&quot;, ylab=&quot;prestige (직업권위)&quot;, main=&quot;1971년 캐나다 직업유형별 직업권위 평균그림&quot;, connect=TRUE)) with(Prestige, plotMeans(prestige, type, error.bars=&quot;se&quot;, xlab=&quot;type (직업유형)&quot;, ylab=&quot;prestige (직업권위)&quot;, main=&quot;1971년 캐나다 직업유형별 직업권위 평균그림&quot;, connect=FALSE)) 명령문의 함수 내부를 살펴보자. 맨 마지막의 ‘connect=TRUE/FALSE’ 가 다를 것이다. 아래 메뉴 창의 맨 아래에서 에 표시를 제거해보자. 8.15 조각 도표…/ Strip chart… Linux 사례 (CentOS 7.x) carData 패키지에 포함된 Prestige 데이터셋을 활성화 시킨다. type 이라는 요인이 하나만 있다. &lt;반응 변수 (하나 선택)&gt;에서 income 변수를 선택해보자. Linux 사례 (CentOS 7.x) 창에서, 에 있는 ’움직임(떨림)’을 선택해보자. 그리고, 에 있는 이름표와 제목에 내용 이해를 돕는 변수 이름, 설명, 제목 등을 입력한다. Linux 사례 (CentOS 7.x) stripchart(income ~ type, vertical=TRUE, method=&quot;jitter&quot;, xlab=&quot;type (직업유형)&quot;, ylab=&quot;income (연소득)&quot;, main=&quot;1971년 캐나다 직업유형별 연소득에 관한 조각 도표&quot;, data=Prestige) 아래 그래픽장치 창에 ’조각 도표(Strip chart)’가 제작된다. 직업유형별로 연소득의 사례들이 크기별로 표시되어 있음을 알 수 있다. Linux 사례 (CentOS 7.x) 8.16 막대 그래프…/ Bar graph… Linux 사례 (MX 21) carData 패키지에 있는 Prestige 데이터셋을 활성화시키자. Prestige 데이터셋에는 요인형 변수가 한개 있다. type 변수인데 자동으로 선택된다. 만약 두개 이상이라면, 그 아래 있는 &lt;집단 기준으로 그리기…&gt;에서 추가적인 요인형변수를 선택할 수 있다. Linux 사례 (MX 21) 창에 있는 에서 ’백분율’을 선택하자. 에서 ’색깔 팔레트에서’를 선택하자. 그리고 에 그래프를 이해하는 데 효과적인 이름표와 제목을 입력하자. Linux 사례 (MX 21) with(Prestige, Barplot(type, xlab=&quot;type (직업유형)&quot;, ylab=&quot;Percent&quot;, main=&quot;1971년 캐나다 직업군에서 직업유형별 막대그래프&quot;, col=palette()[2], scale=&quot;percent&quot;, label.bars=TRUE)) 아래와 같이 그래픽장치 창에 막대 그래프가 출력된다. Linux 사례 (MX 21) 8.17 원 그래프…/ Pie chart… Linux 사례 (MX 21) carData 패키지에서 Prestige 데이터셋을 선택하여 활성화시키자. Prestige 데이터셋에는 요인형 변수가 type 하나이다. 원 그래프는 요인형 변수를 시각화할 때 사용하는 기법의 하나이다. 에서 ’색깔 팔레트에서’를 선택하고 에 내용을 이해하는데 효과적인 이름표와 제목을 입력한다. Linux 사례 (MX 21) with(Prestige, piechart(type, xlab=&quot;type (직업유형)&quot;, ylab=&quot;&quot;, main=&quot;1971년 캐나다 직업군의 유형 비율&quot;, col=palette()[2:4], scale=&quot;percent&quot;)) Linux 사례 (MX 21) 8.18 3D 그래프 / 3D Graph 8.18.1 3차원 산점도…/ 3D scatterplot Linux 사례 (MX 21) carData 패키지에 있는 Prestige 데이터셋을 활성화시키자. 교육연수와 연소득이 직업의 사회적 권위에 미치는 영향을 점검한다고 생각하자. &lt;설명 변수 (두개 선택)&gt;에 education, income을 &lt;반응 변수 (한개 선택)&gt;에 prestige 변수를 선택한다. Linux 사례 (MX 21) 창에서 ‘축(axis) 규모 보이기,’ ’표면 그리드 선 보이기’를 선택하고, 에서 ’평활 회귀’를 선택해본다. Linux 사례 (MX 21) scatter3d(prestige~education+income, data=Prestige, fit=&quot;smooth&quot;, residuals=TRUE, bg=&quot;white&quot;, axis.scales=TRUE, grid=TRUE, ellipsoid=FALSE) 아래 그래픽장치 창에 등장하는 3차원 산점도는 회전을 시켜서 최적의 시점(perspective)을 찾을 수 있다. Linux 사례 (MX 21) 8.18.2 마우스로 관찰치 식별하기 / Identify observations with mouse Linux 사례 (MX 21) Linux 사례 (MX 21) 8.18.3 그래프를 파일로 저장하기 / Save graph to file Linux 사례 (MX 21) Linux 사례 (MX 21) carData 패키지에서 제공하는 Prestige 데이터셋을 활용하여 만든 3차원 산점도이다. 위와 같이 3차원 그래프를 만들었다면, 기능이 활성화될 것이다. 이 기능을 선택하면, 아래와 같이 저장경로와 추천하는 파일이름과 형식이 제공된다. Linux 사례 (MX 21) rgl.snapshot(&quot;/home/jhshin/RGLGraph_추가이름1.png&quot;) 8.19 그래프 파일에 저장 / Save graph to file 8.19.1 비트맵 저장…/ As bitmap… 8.19.2 PDF/Postscript/EPS… 8.19.3 3D RGL graph… 8.19.4 3차원 RGL 그래프…/ 3D RGL graph… Linux 사례 (MX 21) Linux 사례 (MX 21) 위의 그래프는 carData 패키지에서 제공하는 Prestige 데이터셋을 활용하여 만들었다. 3차원 그래프가 만들어졌다면, &lt;3차원 RGL 그래프…&gt; 기능이 활성화된다. 그리고 그 기능을 마우스로 선택하면 아래와 같은 경로, 파일이름, 형식을 추천하는 메뉴 창이 등장한다. Linux 사례 (MX 21) rgl.snapshot(&quot;/home/jhshin/RGLGraph_추가이름2.png&quot;) "],["모형-models.html", "9 . 모형 / models 9.1 활성 모델 선택하기…/ Select active model… 9.2 모델 요약하기 / Summarize model 9.3 모델 계수 비교하기…/ Compare model coefficients… 9.4 관찰 통계를 데이터에 추가하기…/ Add observation statistics to data… 9.5 Akaike Information Criterio.. 9.6 Bayesian Information Criter.. 9.7 Stepwise model selection… 9.8 Subset model selection.. 9.9 Confidence intervals… 9.10 Bootstrap confidence interv.. 9.11 Delta method confidence int.. 9.12 가설 검정 / Hypothesis tests 9.13 Numerical diagnostics 9.14 그래프 / Graphs", " 9 . 모형 / models 9.1 활성 모델 선택하기…/ Select active model… Linux 사례 (MX 21) R Commander 상단에는 메뉴 목록이 있다. 오른쪽 끝부분에 &lt;모델: 모델이름&gt;이 활성화되면 데이터셋으로 분석 모델을 만들었다는 의미가 된다. 그런데, 여러개의 모델을 만들면서 다양한 각도로 분석적 통찰력을 키우는 경우가 일반적이다. R Commander에서는 분석과정에서 만들어진 여러개의 모델을 메모리에 상주시키고, 상황에 맞게 활용할 준비를 갖춘다. 아래의 명령문 프롬프트 창은 세개의 모델이 있음을 알린다. carData 패키지의 Prestige 데이터셋을 이용하여, 선형회귀, 선형모델 기법을 통하여 education(교육연수), income(연소득)이 prestige(직업의 사회적 권위)에 어떤 영향을 미치는가, 또 직업유형별로 차이가 있는가를 분석한다고 가정하자. data(Prestige, package=&quot;carData&quot;) # prestige 데이터셋 불러오기 RegModel.1 &lt;- lm(prestige~education+income, data=Prestige) # 선형회귀모델1 summary(RegModel.1) LinearModel.2 &lt;- lm(prestige ~ education + log(income), data=Prestige)# 선형모델1 summary(LinearModel.2) LinearModel.4 &lt;- lm(prestige ~ (education + log(income))*type, data=Prestige)# 선형모델2 summary(LinearModel.4) &lt;활성 모델 선택하기…&gt;기능을 선택하면 아래와 같은 모델 목록창이 등장한다. 목록에서 하나를 선택한다. Linux 사례 (MX 21) 9.2 모델 요약하기 / Summarize model Linux 요약 (MX 21) 모델을 만들고, 모델의 요약 정보를 확인할 때 일반적으로 summary() 함수를 사용한다. carData 패키지의 Prestige 데이터셋으로 선형회귀, 선형모델을 만들었다고 하자. 이 과정에서 다음 사례와 같은 요약 정보가 생산된다: summary(LinearModel.2) Linux 요약 (MX 21) 여러개의 모델이 있고, 특정 모델의 요약정보를 다시 확인하고자 할 때 사용하는 기능이다. Linux 요약 (MX 21) 에 선택이 되어 있는 경우는 summary() 함수 대신 summarySandwich() 함수가 사용된다. Linux 요약 (MX 21) summarySandwich(LinearModel.2, type=&quot;hc3&quot;) Linux 요약 (MX 21) 9.3 모델 계수 비교하기…/ Compare model coefficients… Linux 사례 (MX 21) 두개 이상의 모델을 선택하고 그 안에 포함된 계수(coefficients)를 비교하는 기능이다. carData 패키지에 있는 Prestige 데이터셋을 이용하여 income(연수입)과 education(교육연수)가 prestige(직업의 사회적 권위)에 미치는 영향에 대하여 분석한다고 가정하자. 최적의 모델을 찾기 위해서는 먼저 여러개의 모델을 만들어야 한다. 이 경우, 만들어진 여러개의 모델을 비교하는 과정에서 영향력이 통계적으로 지지되는 변수들을 찾고 또 그 계수에 대한 꼼꼼한 점검을 해야하는 경우가 많다. Linux 사례 (MX 21) compareCoefs(RegModel.1, RegModel.2) Linux 사례 (MX 21) 모델 세개를 선택해보자. Linux 사례 (MX 21) compareCoefs(LinearModel.3, LinearModel.4, LinearModel.5) Linux 사례 (MX 21) 모델의 계수를 비교하는 과정에서, 설명변수가 반응변수에 영향을 미치는가에 대한 통계적인 근거를 찾게된다. zvals, pvals, se 등의 인자에 대한 사용을 통하여 보다 정교한 비교 결과를 만들 수 있다. compareCoefs(RegModel.1, RegModel.2, zvals=TRUE, pvals=TRUE) Linux 사례 (MX 21) 9.4 관찰 통계를 데이터에 추가하기…/ Add observation statistics to data… Linux 사례 (MX 21) 데이터셋을 활성화시킨 다음, 그 데이터셋으로 모델을 만들었다고 생각하자. 예를 들어, carData 패키지의 Prestige 데이터셋으로 선형 모델을 만들었고, 그 모델을 LinearModel.1이라고 하자. 그럼, R Commander의 화면 메뉴 기능에서 ‘모델 &gt; 관찰 통계를 데이터에 추가하기…’ 기능이 활성화된다. 해당 메뉴 기능을 선택하면 아래와 같은 선택 창이 등장한다. 이 통계치들은 lm() 함수를 이용하여 모델을 생성하는 과정에서 함께 연산된 값들이며, 이 값들을 Prestige 데이터셋에 추가할 것인가를 질문받게 된다. Linux 사례 (MX 21) R Commander 화면에서 를 선택하면 관찰 통계치가 추가되어 있음을 아래와 같이 알 수 있다: Linux 사례 (MX 21) data(Prestige) # 데이터셋 불러오기 summary(LinearModel.1) # 모델 만든후 요약정보 보기 Prestige&lt;- within(Prestige, { fitted.LinearModel.1 &lt;- fitted(LinearModel.1) residuals.LinearModel.1 &lt;- residuals(LinearModel.1) rstudent.LinearModel.1 &lt;- rstudent(LinearModel.1) hatvalues.LinearModel.1 &lt;- hatvalues(LinearModel.1) cooks.distance.LinearModel.1 &lt;- cooks.distance(LinearModel.1) obsNumber &lt;- 1:nrow(Prestige) }) 9.5 Akaike Information Criterio.. 9.6 Bayesian Information Criter.. 9.7 Stepwise model selection… 9.8 Subset model selection.. 9.9 Confidence intervals… 9.10 Bootstrap confidence interv.. 9.11 Delta method confidence int.. 9.12 가설 검정 / Hypothesis tests 9.12.1 분산분석표…/ ANOVA table… Linux 사례 (MX 21) Statistics &gt; Fit models &gt; Linear model… (통계 &gt; 적합성 모델 &gt; 선형 모델…) 기능을 통하여 LinearModel.1라는 모델을 만들었다고 하자. 위의 화면 상단에 &lt;모델: LinearModel.1&gt;이라고 보일 것이다. Models &gt; Hypothesis tests &gt; ANOVA table… (모델 &gt; 가설 검정 &gt; 분산분산표…) 기능은 앞선 모델 만들기 작업 위에서 후속적으로 가능함을 명심하자. Linux 사례 (MX 21) Anova(LinearModel.1, type=&quot;II&quot;) Linux 사례 (MX 21) 9.13 Numerical diagnostics 9.14 그래프 / Graphs 9.14.1 효과 그림…/ Effect plots… Linux 사례 (MX 21) ‘모델 &gt; 그래프 &gt; 효과 그림…’ 기능은 미리 모델이 만들어져야 이용할 수 있다. 만들어진 모델은 아래와 같이 R Commander 상단에서 확인할 수 있다. carData 패키지의 Cowles 데이터셋으로 만든 GLM.1 모델을 활용하는 것이다. Linux 사례 (MX 21) &lt;모델 효과 그림(들)&gt; 창 중간에 있는 &lt;예측변수 (하나 이상 선택)&gt; 기능에서 sex, neuroticism, extraversion 세 변수를 모두 선택해보자. Linux 사례 (MX 21) plot(allEffects(GLM.1)) Linux 사례 (MX 21) carData 패키지의 Prestige 데이터셋을 이용하여 연습해보자. 아래와 같이 prestige (직업의 사회적 권위)에 대한 education (교육연수), income (연수입), women (여성 참여율)의 영향력을 type (직업유형)별로 살펴보는 모델을 만들었다고 가정하자. data(Prestige, package=&quot;carData&quot;) LinearModel.1 &lt;- lm(prestige ~ education + income + women + type, data=Prestige) summary(LinearModel.1) 아래와 같이 LinearModel.1의 요약 정보가 출력될 것이다. Linux 사례 (MX 21) 이러한 LinearModel.1의 효과 그림을 시각화 할 수 있다. &lt;모델 효과 그림(들)&gt; 창의 &lt;예측변수(하나 이상 선택)&gt; 기능에서 네개의 변수를 모두 선택해보자. 그리고 예(OK) 버튼을 누른다. Linux 사례 (MX 21) plot(allEffects(LinearModel.1)) 아래와 같이 그래픽 장치 창에 선택된 변수 네개의 효과 그림이 등장할 것이다. Linux 사례 (MX 21) 한편, 기능을 선택해보자. Linux 사례 (MX 21) 그래픽 장치 창에 잔차들이 플롯으로 표시된다. 표시된 잔차의 분포를 보면서 추가로로 통찰력을 키울 수 있다. Linux 사례 (MX 21) "],["도구-tools.html", "10 . 도구 / Tools 10.1 도구 &gt; 패키지 적재하기… 10.2 도구 &gt; Rcmdr 플러그인 적재하기… 10.3 도구 &gt; 선택 기능… 10.4 글꼴(Fonts) 10.5 Tools/Save Rcmdr options… 10.6 Tools/Manage Mac OS X app nap for R.app… 10.7 Tools/Install auxiliary software…", " 10 . 도구 / Tools 10.1 도구 &gt; 패키지 적재하기… 도구 &gt; 패키지 적재하기... / Tools &gt; Load package(s)... R에 설치된 패키지 목록 창이 등장한다. 원하는 패키지(들)을 찾아서 선택하고 예(OK) 버튼을 누른다. 아래 화면은 vcd 패키지를 설치하는 사례이다. library(vcd) # 원하는 패키지 적재하기 vcd 패키지를 적재(loading) 하는데, grid 패키지가 함께 탑재된 것을 출력창에서 확인할 수 있다. grid는 vcd 패키지가 제작되는데 의존한 패키지임을 의미한다. 어느 패키지가 메모리에 적재되는 과정은 그 패키지가 의존하는 패키지의 자동적인 적재를 동반한다. 10.2 도구 &gt; Rcmdr 플러그인 적재하기… 도구 &gt; Rcmdr 플러그인 적재하기... / Tools &gt; Load Rcmdr plug-in(s).... R Commander는 플러그인을 통하여 많은 기능이 확산되는 생태계를 갖고 있다. Rcmdr 플러그인을 사용하기 위해서는 먼저 RcmdrPlugin.이름 을 가진 패키지가 설치되어 있어야 한다. install.packages() # RcmdrPlugin.이름 찾기 아래와 같이 여러개의 RcmdrPlugin.이름을 가진 플러그인들이 설치되었다고 가정하자. 그 중에서 RcmdrPlugin.KMggplot2를 설치해보자. 적재할 플러그인을 찾아서 선택하고, 예(OK) 버튼을 누른다. Linux 사례 (MX 21) Linux 사례 (MX 21) 아래 화면은 플러그인이 적재되기 이전에 새로운 환경이 등장하는 조건을 환기시키는 질문을 담고 있다. R Commander가 사라졌다가 다시 등장하게된다. Linux 사례 (MX 21) 새롭게 등장하는 R Commander 화면 상단을 살펴보자. 와 사이에 메뉴 하나가 추가됨을 알 수 있다. 적재된 플러그인이 메뉴 창에 등장한다. 10.3 도구 &gt; 선택 기능… 도구 &gt; 선택 기능... / Tools &gt; Options... Linux 사례 (MX 21) 창에서 스크립트 창 높이 (줄)과 출력물 창 높이 (줄) 을 조정할 수 있다. 자주 R Commander를 사용하다보면, 하나의 명령문을 실행한 다음 얻게되는 출력물을 출력창에서 한번에 보지 못할 때 불편함을 느낀다. 주로 통계적 모델의 요약 정보를 확인하고자 할 때 발생하는 현상이다. 아래 창은 스크립트 창 높이 (줄)을 7로, 출력물 창 높이 (줄)을 25로 변경한 사례이다. Linux 사례 (MX 21) 스크립트 창과 출력 창의 높이를 조정한 결과는 아래와 같은 비율로 나타난다: 10.4 글꼴(Fonts) R은 사용 컴퓨터에 내장된 여러 폰트를 사용할 수 있다. R Commander에서 폰트를 고민할 때는 그래프 출력에 어떤 폰트를 사용할까와 화면 출력용으로 어떤 폰트가 좋을까 등일 것이다. R Commander에는 , 등의 버튼이 화면 상단에 있다. 활성데이터셋의 내부를 들여다 볼 때, 편집할 때 사용한다. 그런데 간혹 사전에 기본으로 지정된 폰트의 특징 때문에 데이터셋의 내부 정보들의 형식적 일관성(값의 정렬)이 흐트러져 보이는 경우가 있다. 예를 들어, 리눅스에서 한글용으로 사용하는 나눔고딕은 한글 R Commander환경에서 기본 폰트로 사용되는데 버튼을 누르고 내부 정보를 보면 정렬이 일정하지 않는 것을 알 수 있다. 흔히 고정크기를 가진 폰트인가 아닌가에 따른 출력상의 차이라고 한다. 사례 값들의 정렬이 일정하지 않아 데이터셋 내부를 보기가 불편하다면, 경험적으로 나는 Courier로 바꿔준다. 일정한 정렬로 변환될 것이다. 10.5 Tools/Save Rcmdr options… 10.6 Tools/Manage Mac OS X app nap for R.app… 10.7 Tools/Install auxiliary software… "],["도움말-help.html", "11 . 도움말 / Help 11.1 Commander help (0) 11.2 Introduction to the R Comma.. (0) 11.3 R Commander website (0) 11.4 About Rcmdr (0) 11.5 R Commander hex sticker 11.6 Help on active data set (if.. (0) 11.7 Start R help system (0) 11.8 R website (0) 11.9 Using R Markdown (0)", " 11 . 도움말 / Help 11.1 Commander help (0) 11.2 Introduction to the R Comma.. (0) 11.3 R Commander website (0) 11.4 About Rcmdr (0) 11.5 R Commander hex sticker 선택하면 아래와 같은 이미지 파일이 등장한다: 11.6 Help on active data set (if.. (0) 11.7 Start R help system (0) 11.8 R website (0) 11.9 Using R Markdown (0) "],["데이터셋-datasets.html", "12 . 데이터셋 / datasets 12.1 Prestige - carData &gt; Prestige 12.2 Moore - carData &gt; Moore 12.3 OBrienKaiser - carData &gt; OBrienKaiser 12.4 OBrienKaiserLong - carData &gt; OBrienKaiserLong 12.5 airquality - datasets &gt; airquality 12.6 Bfox - carData &gt; Bfox 12.7 sleep - datasets &gt; sleep 12.8 DavisThin - carData &gt; DavisThin 12.9 USArrests - datasets &gt; USArrests 12.10 birthwt - MASS &gt; birthwt 12.11 Friendly - carData &gt; Friendly 12.12 Cowles - carData &gt; Cowles 12.13 Adler - carData &gt; Adler 12.14 warpbreaks - datasets &gt; warpbreaks", " 12 . 데이터셋 / datasets 12.1 Prestige - carData &gt; Prestige data(Prestige, package=&quot;carData&quot;) help(&quot;Prestige&quot;) carData 패키지에 있는 Prestige 데이터셋을 .csv로 저장하여 내보낼 수 있다. 다운로드 참조: 활성 데이터셋 내보내기… 12.2 Moore - carData &gt; Moore data(Moore, package=&quot;carData&quot;) help(&quot;Moore&quot;) 상기 명령 실행을 통해서 Moore 데이터셋에 대한 상세 정보를 얻을 수 있다. Moore {carData} R Documentation Status, Authoritarianism, and Conformity Description The Moore data frame has 45 rows and 4 columns. The data are for subjects in a social-psychological experiment, who were faced with manipulated disagreement from a partner of either of low or high status. The subjects could either conform to the partner’s judgment or stick with their own judgment. Usage Moore Format This data frame contains the following columns: partner.status Partner’s status. A factor with levels: high, low. conformity Number of conforming responses in 40 critical trials. fcategory F-Scale Categorized. A factor with levels (note levels out of order): high, low, medium. fscore Authoritarianism: F-Scale score. Source Moore, J. C., Jr. and Krupat, E. (1971) Relationship between source status, authoritarianism and conformity in a social setting. Sociometry 34, 122–134. Personal communication from J. Moore, Department of Sociology, York University. References Fox, J. (2016) Applied Regression Analysis and Generalized Linear Models, Third Edition. Sage. Fox, J. and Weisberg, S. (2019) An R Companion to Applied Regression, Third Edition, Sage. [Package carData version 3.0-5 Index] 12.3 OBrienKaiser - carData &gt; OBrienKaiser carData 패키지에 있는 OBrienKaiser 데이터셋이다. carData 패키지는 Rcmdr 패키지가 호출될 때 자동으로 함께 호출되기 때문에 R Commander에서 carData 패키지에 포함된 데이터셋들을 자유롭게 호출할 수 있다. Read data set from an attached package… OBrienKaiser 데이터셋은 R Commander에서 활성 데이터셋으로 이용할 수 있다. 그러나 ‘통계 &gt; 요약 &gt; 활성데이터셋’ 기능은 사용할 수 없다. 다음과 같은 오류문을 Rgui 창에서 보게된다. Error in sprintf(gettextRcmdr(“There are %d variables in the data set %s.you want to proceed?”), : ’%d’는 유효하지 않은 포맷입니다; 문자형 객체들에는 포맷 %s를 사용해주세요 입력창에 str(OBrienKaiser) 함수를 입력하고 실행하여 OBrienKaiser 데이터셋의 구조를 살펴보자. 입력창에 summary(OBrienKaiser) 함수를 입력하고 실행하여 요약 정보를 살펴보자. OBrienKaiser {carData} R Documentation O’Brien and Kaiser’s Repeated-Measures Data Description These contrived repeated-measures data are taken from O’Brien and Kaiser (1985). The data are from an imaginary study in which 16 female and male subjects, who are divided into three treatments, are measured at a pretest, postest, and a follow-up session; during each session, they are measured at five occasions at intervals of one hour. The design, therefore, has two between-subject and two within-subject factors. The contrasts for the treatment factor are set to -2, 1, 1 and 0, -1, 1. The contrasts for the gender factor are set to contr.sum. Usage OBrienKaiser Format A data frame with 16 observations on the following 17 variables. treatment a factor with levels control A B gender a factor with levels F M pre.1 pretest, hour 1 pre.2 pretest, hour 2 pre.3 pretest, hour 3 pre.4 pretest, hour 4 pre.5 pretest, hour 5 post.1 posttest, hour 1 post.2 posttest, hour 2 post.3 posttest, hour 3 post.4 posttest, hour 4 post.5 posttest, hour 5 fup.1 follow-up, hour 1 fup.2 follow-up, hour 2 fup.3 follow-up, hour 3 fup.4 follow-up, hour 4 fup.5 follow-up, hour 5 Source O’Brien, R. G., and Kaiser, M. K. (1985) MANOVA method for analyzing repeated measures designs: An extensive primer. Psychological Bulletin 97, 316–333, Table 7. Examples OBrienKaiser contrasts(OBrienKaiser$treatment) contrasts(OBrienKaiser$gender) [Package carData version 3.0-5 Index] 12.4 OBrienKaiserLong - carData &gt; OBrienKaiserLong OBrienKaiserLong 데이터셋은 carData 패키지에 포함되어 있다. carData 패키지는 Rcmdr 패키지가 호출될 때 자동으로 함께 호출되기 때문에, OBrienKaiserLong 데이터셋을 R Commander에서 메뉴기능을 통해서 활성데이터셋으로 불러올 수 있다. 통계&gt; 요약 &gt; 활성 데이터셋 메뉴를 통하여 OBrienKaiserLong 데이터셋의 요약정보를 확인할 수 있다. Windows 사례 summary() 함수를 이용한 것을 알 수 있다. Windows 사례 str() 함수를 활용하여 입력창에 직접 str(OBrienKaiserLong)을 입력하고 실행하여, 출력창에 다음과 같이 OBrienKaiserLong 데이터셋의 구조적 정보도 확인할 수 있다. Windows 사례 R Commander 화면에서 버튼을 누르면 다음과 같은 내부 구성을 볼 수 있다: Linux 사례 (Ubuntu 18.04) head(OBrienKaiserLong, 1) # first subject OBrienKaiserLong {carData} R Documentation O’Brien and Kaiser’s Repeated-Measures Data in \"Long\" Format Description Contrived repeated-measures data from O’Brien and Kaiser (1985). For details see OBrienKaiser, which is for the \"wide\" form of the same data. Usage OBrienKaiserLong Format A data frame with 240 observations on the following 6 variables. treatment a between-subjects factor with levels control, A, B. gender a between-subjects factor with levels F, M. score the numeric response variable. id the subject id number. phase a within-subjects factor with levels pre, post, fup. hour a within-subjects factor with levels 1, 2, 3, 4, 5. Source O’Brien, R. G., and Kaiser, M. K. (1985) MANOVA method for analyzing repeated measures designs: An extensive primer. Psychological Bulletin 97, 316–333, Table 7. See Also OBrienKaiser. Examples head(OBrienKaiserLong, 15) # first subject [Package carData version 3.0-5 Index] 12.5 airquality - datasets &gt; airquality Linux 사례 (MX 21) R이 시작될 때, datasets 패키지가 자동으로 호출된다. 따라서 R Commander를 실행할 때, datasets 패키지는 첨부 패키지화되어 메뉴창을 통해서 내부 데이터셋을 찾고 불러올 수 있다. 메뉴창에서 순서대로 데이터 &gt; 패키지에 있는 데이터 &gt; 첨부된 패키지에서 데이터셋 읽기… 를 선택하면 다음과 같은 창이 등장한다. Windows 사례 출력창을 보면, airquality라는 데이터셋에는 6개의 변수가 있고, 각 변수는 수치형 정보를 담고 있다. Windows 사례 Month 변수는 최소 5에서 최대 9로 값이 있는데, 정확히는 5월부터 9월까지일 것이다. 한달 한달을 뜻하는 월(month)은 5월이 9월보다 크다고 할 수 없고, 5월, 6월, 7월, 8월, 9월 등으로 개체화되어 분리된다. 다시 말하면, 요인형 변수가 되어야 한다는 뜻이다. 그럼 왜, airqualty 데이터셋의 Month 변수는 수치형으로 되어 있을까. 원자료를 R의 데이터셋으로 불러오는 과정에서 해당 변수의 요인화과정이 생략되었을 것이다. airquality {datasets} R Documentation New York Air Quality Measurements Description Daily air quality measurements in New York, May to September 1973. Usage airquality Format A data frame with 153 observations on 6 variables. [,1] Ozone numeric Ozone (ppb) [,2] Solar.R numeric Solar R (lang) [,3] Wind numeric Wind (mph) [,4] Temp numeric Temperature (degrees F) [,5] Month numeric Month (1–12) [,6] Day numeric Day of month (1–31) Details Daily readings of the following air quality values for May 1, 1973 (a Tuesday) to September 30, 1973. Ozone: Mean ozone in parts per billion from 1300 to 1500 hours at Roosevelt Island Solar.R: Solar radiation in Langleys in the frequency band 4000–7700 Angstroms from 0800 to 1200 hours at Central Park Wind: Average wind speed in miles per hour at 0700 and 1000 hours at LaGuardia Airport Temp: Maximum daily temperature in degrees Fahrenheit at La Guardia Airport. Source The data were obtained from the New York State Department of Conservation (ozone data) and the National Weather Service (meteorological data). References Chambers, J. M., Cleveland, W. S., Kleiner, B. and Tukey, P. A. (1983) Graphical Methods for Data Analysis. Belmont, CA: Wadsworth. Examples require(graphics) pairs(airquality, panel = panel.smooth, main = \"airquality data\") [Package datasets version 4.1.3 Index] 12.6 Bfox - carData &gt; Bfox Linux 사례 (MX 21) Linux 사례 (MX 21) data(Bfox, package=&quot;carData&quot;) Bfox 데이터셋이 활성화되었다면, 도움말 기능을 통하여 데이터셋의 정보를 확인할 수 있다. Linux 사례 (MX 21) Bfox {carData} R Documentation Canadian Women’s Labour-Force Participation Description The Bfox data frame has 30 rows and 7 columns. Time-series data on Canadian women’s labor-force participation, 1946–1975. Usage Bfox Format This data frame contains the following columns: partic Percent of adult women in the workforce. tfr Total fertility rate: expected births to a cohort of 1000 women at current age-specific fertility rates. menwage Men’s average weekly wages, in constant 1935 dollars and adjusted for current tax rates. womwage Women’s average weekly wages. debt Per-capita consumer debt, in constant dollars. parttime Percent of the active workforce working 34 hours per week or less. Warning The value of tfr for 1973 is misrecorded as 2931; it should be 1931. Source Fox, B. (1980) Women’s Domestic Labour and their Involvement in Wage Work. Unpublished doctoral dissertation, p. 449. References Fox, J. (2016) Applied Regression Analysis and Generalized Linear Models, Third Edition. Sage. [Package carData version 3.0-5 Index] 12.7 sleep - datasets &gt; sleep Linux 사례 (MX 21) Linux 사례 (MX 21) data(sleep, package=&quot;datasets&quot;) summary(sleep) str(sleep) 데이터셋의 내부는 다음과 같다: Linux 사례 (MX 21) sleep {datasets} R Documentation Student’s Sleep Data Description Data which show the effect of two soporific drugs (increase in hours of sleep compared to control) on 10 patients. Usage sleep Format A data frame with 20 observations on 3 variables. [, 1] extra numeric increase in hours of sleep [, 2] group factor drug given [, 3] ID factor patient ID Details The group variable name may be misleading about the data: They represent measurements on 10 persons, not in groups. Source Cushny, A. R. and Peebles, A. R. (1905) The action of optical isomers: II hyoscines. The Journal of Physiology 32, 501–510. Student (1908) The probable error of the mean. Biometrika, 6, 20. References Scheff챕, Henry (1959) The Analysis of Variance. New York, NY: Wiley. Examples require(stats) ## Student's paired t-test with(sleep, t.test(extra[group == 1], extra[group == 2], paired = TRUE)) ## The sleep *prolongations* sleep1 &lt;- with(sleep, extra[group == 2] - extra[group == 1]) summary(sleep1) stripchart(sleep1, method = \"stack\", xlab = \"hours\", main = \"Sleep prolongation (n = 10)\") boxplot(sleep1, horizontal = TRUE, add = TRUE, at = .6, pars = list(boxwex = 0.5, staplewex = 0.25)) [Package datasets version 4.1.3 Index] 12.8 DavisThin - carData &gt; DavisThin Linux 사례 (MX 21) Linux 사례 (MX 21) Linux 사례 (MX 21) help(&quot;DavisThin&quot;) DavisThin {carData} R Documentation Davis’s Data on Drive for Thinness Description The DavisThin data frame has 191 rows and 7 columns. This is part of a larger dataset for a study of eating disorders. The seven variables in the data frame comprise a \"drive for thinness\" scale, to be formed by summing the items. Usage DavisThin Format This data frame contains the following columns: DT1 a numeric vector DT2 a numeric vector DT3 a numeric vector DT4 a numeric vector DT5 a numeric vector DT6 a numeric vector DT7 a numeric vector Source Davis, C., G. Claridge, and D. Cerullo (1997) Personality factors predisposing to weight preoccupation: A continuum approach to the association between eating disorders and personality disorders. Journal of Psychiatric Research 31, 467–480. [personal communication from the authors.] References Fox, J. and Weisberg, S. (2019) An R Companion to Applied Regression, Third Edition, Sage. [Package carData version 3.0-5 Index] 12.9 USArrests - datasets &gt; USArrests Linux 사례(MX 21) Linux 사례(MX 21) data(USArrests, package=&quot;datasets&quot;) Linux 사례(MX 21) R Commander 화면 상단에서 버튼을 누르면 아래와 같은 내부 구성을 확인할 수 있다. help(&quot;USArrests&quot;) USArrests {datasets} R Documentation Violent Crime Rates by US State Description This data set contains statistics, in arrests per 100,000 residents for assault, murder, and rape in each of the 50 US states in 1973. Also given is the percent of the population living in urban areas. Usage USArrests Format A data frame with 50 observations on 4 variables. [,1] Murder numeric Murder arrests (per 100,000) [,2] Assault numeric Assault arrests (per 100,000) [,3] UrbanPop numeric Percent urban population [,4] Rape numeric Rape arrests (per 100,000) Note USArrests contains the data as in McNeil’s monograph. For the UrbanPop percentages, a review of the table (No. 21) in the Statistical Abstracts 1975 reveals a transcription error for Maryland (and that McNeil used the same “round to even” rule that R’s round() uses), as found by Daniel S Coven (Arizona). See the example below on how to correct the error and improve accuracy for the ‘&lt;n&gt;.5’ percentages. Source World Almanac and Book of facts 1975. (Crime rates). Statistical Abstracts of the United States 1975, p.20, (Urban rates), possibly available as https://books.google.ch/books?id=zl9qAAAAMAAJ&amp;pg=PA20. References McNeil, D. R. (1977) Interactive Data Analysis. New York: Wiley. See Also The state data sets. Examples summary(USArrests) require(graphics) pairs(USArrests, panel = panel.smooth, main = \"USArrests data\") ## Difference between 'USArrests' and its correction USArrests[\"Maryland\", \"UrbanPop\"] # 67 -- the transcription error UA.C &lt;- USArrests UA.C[\"Maryland\", \"UrbanPop\"] &lt;- 76.6 ## also +/- 0.5 to restore the original &lt;n&gt;.5 percentages s5u &lt;- c(\"Colorado\", \"Florida\", \"Mississippi\", \"Wyoming\") s5d &lt;- c(\"Nebraska\", \"Pennsylvania\") UA.C[s5u, \"UrbanPop\"] &lt;- UA.C[s5u, \"UrbanPop\"] + 0.5 UA.C[s5d, \"UrbanPop\"] &lt;- UA.C[s5d, \"UrbanPop\"] - 0.5 ## ==&gt; UA.C is now a *C*orrected version of USArrests [Package datasets version 4.1.3 Index] 12.10 birthwt - MASS &gt; birthwt Linux 사례 (MX 21) data(birthwt, package=&quot;MASS&quot;) birthwt 데이터셋이 활성화된 후, 버튼을 누르면 아래와 같이 내부 구성을 볼 수 있다: Linux 사례 (MX 21) help(&quot;birthwt&quot;) Linux 사례 (MX 21) birthwt {MASS} R Documentation Risk Factors Associated with Low Infant Birth Weight Description The birthwt data frame has 189 rows and 10 columns. The data were collected at Baystate Medical Center, Springfield, Mass during 1986. Usage birthwt Format This data frame contains the following columns: low indicator of birth weight less than 2.5 kg. age mother’s age in years. lwt mother’s weight in pounds at last menstrual period. race mother’s race (1 = white, 2 = black, 3 = other). smoke smoking status during pregnancy. ptl number of previous premature labours. ht history of hypertension. ui presence of uterine irritability. ftv number of physician visits during the first trimester. bwt birth weight in grams. Source Hosmer, D.W. and Lemeshow, S. (1989) Applied Logistic Regression. New York: Wiley References Venables, W. N. and Ripley, B. D. (2002) Modern Applied Statistics with S. Fourth edition. Springer. Examples bwt &lt;- with(birthwt, { race &lt;- factor(race, labels = c(\"white\", \"black\", \"other\")) ptd &lt;- factor(ptl &gt; 0) ftv &lt;- factor(ftv) levels(ftv)[-(1:2)] &lt;- \"2+\" data.frame(low = factor(low), age, lwt, race, smoke = (smoke &gt; 0), ptd, ht = (ht &gt; 0), ui = (ui &gt; 0), ftv) }) options(contrasts = c(\"contr.treatment\", \"contr.poly\")) glm(low ~ ., binomial, bwt) [Package MASS version 7.3-55 Index] 12.11 Friendly - carData &gt; Friendly Linux 사례 (MX 21) data(Friendly, package=&quot;carData&quot;) Linux 사례 (MX 21) help(&quot;Friendly&quot;) Friendly {carData} R Documentation Format Effects on Recall Description The Friendly data frame has 30 rows and 2 columns. The data are from an experiment on subjects’ ability to remember words based on the presentation format. Usage Friendly Format This data frame contains the following columns: condition A factor with levels: Before, Recalled words presented before others; Meshed, Recalled words meshed with others; SFR, Standard free recall. correct Number of words correctly recalled, out of 40 on final trial of the experiment. Source Friendly, M. and Franklin, P. (1980) Interactive presentation in multitrial free recall. Memory and Cognition 8 265–270 [Personal communication from M. Friendly]. References Fox, J. (2016) Applied Regression Analysis and Generalized Linear Models, Third Edition. Sage. Fox, J. and Weisberg, S. (2019) An R Companion to Applied Regression, Third Edition, Sage. [Package carData version 3.0-5 Index] 12.12 Cowles - carData &gt; Cowles Linux 사례 (MX 21) data(Cowles, package=&quot;carData&quot;) Linux 사례 (MX 21) help(&quot;Cowles&quot;) Cowles {carData} R Documentation Cowles and Davis’s Data on Volunteering Description The Cowles data frame has 1421 rows and 4 columns. These data come from a study of the personality determinants of volunteering for psychological research. Usage Cowles Format This data frame contains the following columns: neuroticism scale from Eysenck personality inventory extraversion scale from Eysenck personality inventory sex a factor with levels: female; male volunteer volunteeing, a factor with levels: no; yes Source Cowles, M. and C. Davis (1987) The subject matter of psychology: Volunteers. British Journal of Social Psychology 26, 97–102. [Package carData version 3.0-5 Index] 12.13 Adler - carData &gt; Adler Linux 사례 (MX 21) 데이터 &gt; 패키지에 있는 데이터 &gt; 첨부된 패키지에서 데이터셋 읽기… 기능을 선택하면, 위와 같은 메뉴 창을 보게된다. carData를 선택하여 두번 클릭하면, 오른쪽에 carData 패키지에 내장된 데이터셋 목록이 등장한다. Adler 데이터셋을 선택한다. Linux 사례 (MX 21) data(Adler, package=&quot;carData&quot;) # Adler 데이터셋 활성화시키기 help(&quot;Adler&quot;, package=&quot;carData&quot;)# 도움말파일 열기 Adler {carData} R Documentation Experimenter Expectations Description The Adler data frame has 108 rows and 3 columns. The “experimenters” were the actual subjects of the study. They collected ratings of the apparent success of people in pictures who were pre-selected for their average appearance of success. The experimenters were told prior to collecting data that particular subjects were either high or low in their tendency to rate appearance of success, and were instructed to get good data, scientific data, or were given no such instruction. Each experimenter collected ratings from 18 randomly assigned subjects. This version of the Adler data is taken from Erickson and Nosanchuk (1977). The data described in the original source, Adler (1973), have a more complex structure. Usage Adler Format This data frame contains the following columns: instruction a factor with levels: good, good data; none, no stress; scientific, scientific data. expectation a factor with levels: high, expect high ratings; low, expect low ratings. rating The average rating obtained. Source Erickson, B. H., and Nosanchuk, T. A. (1977) Understanding Data. McGraw-Hill Ryerson. References Adler, N. E. (1973) Impact of prior sets given experimenters and subjects on the experimenter expectancy effect. Sociometry 36, 113–126. [Package carData version 3.0-5 Index] 12.14 warpbreaks - datasets &gt; warpbreaks Linux 사례 (MX 21) data(warpbreaks, package=&quot;datasets&quot;) # 데이터셋 불러오기 help(&quot;warpbreaks&quot;) # 데이터셋 도움말 보기 summary(warpbreaks) # 데이터셋 통계 요약 보기 Linux 사례 (MX 21) R Commander 화면 상단 우측에 있는 버튼을 누른다. 아래와 같이 warpbreaks 데이터셋의 내부 구성을 볼 수 있다. Linux 사례 (MX 21) warpbreaks {datasets} R Documentation The Number of Breaks in Yarn during Weaving Description This data set gives the number of warp breaks per loom, where a loom corresponds to a fixed length of yarn. Usage warpbreaks Format A data frame with 54 observations on 3 variables. [,1] breaks numeric The number of breaks [,2] wool factor The type of wool (A or B) [,3] tension factor The level of tension (L, M, H) There are measurements on 9 looms for each of the six types of warp (AL, AM, AH, BL, BM, BH). Source Tippett, L. H. C. (1950) Technological Applications of Statistics. Wiley. Page 106. References Tukey, J. W. (1977) Exploratory Data Analysis. Addison-Wesley. McNeil, D. R. (1977) Interactive Data Analysis. Wiley. See Also xtabs for ways to display these data as a table. Examples require(stats); require(graphics) summary(warpbreaks) opar &lt;- par(mfrow = c(1, 2), oma = c(0, 0, 1.1, 0)) plot(breaks ~ tension, data = warpbreaks, col = \"lightgray\", varwidth = TRUE, subset = wool == \"A\", main = \"Wool A\") plot(breaks ~ tension, data = warpbreaks, col = \"lightgray\", varwidth = TRUE, subset = wool == \"B\", main = \"Wool B\") mtext(\"warpbreaks data\", side = 3, outer = TRUE) par(opar) summary(fm1 &lt;- lm(breaks ~ wool*tension, data = warpbreaks)) anova(fm1) [Package datasets version 4.1.3 Index] "],["참고문헌.html", "참고문헌", " 참고문헌 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
