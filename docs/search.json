[{"path":"index.html","id":"들어가며","chapter":"1 .  들어가며","heading":"1 .  들어가며","text":"한국 알(R) 사용자회는 디지털 불평등 해소와 통계 대중화를 오픈 통계 패키지 개발을 2021년부터 추진하였습니다.\n더불어 설치형 오픈 통계 패키지를 신종화 님께서 John Fox 교수님이 개발한 Rcmdr 기반으로 한글화 및 문서화에 10년 넘게 기여해주셨습니다. 이에 한국 알(R) 사용자회는 신종화님의 Rcmdr 거인의 어깨위에 디지털 불평등 해소와 통계 대중화를 위해 한 걸음 더 나아가게 되었습니다. 특히 신종화님께서 기여하신 한글화 및 문서를 근간으로 더 많은 분들이 오픈 통계 패키지를 사용할 수 있도록 bookdown으로 내용을 정리하여 통계 대중화가 한층 앞당겨질 것으로 기대됩니다.신종화님께서 왜 오픈 통계 패키지로 Rcmdr를 근간으로 해야 하는지 이유를 명쾌하게 다음과 같이 정리해 주셨습니다.R에는 여러 개의 GUI 작업도구들이 있습니다. 모두 목적이 분명하고, 좋은 도구이며, 일부는 현재도 향상작업이 진행되고 있습니다. 그럼에도 불구하고 R Commander를 위한 블로그 작업을 진행하는 이유는 크게 두가지 입니다.첫째, R Commander는 직관적으로 기존의 기초통계학 도구와 유사합니다. Command Line 에서 작업하는 것에 익숙하지 않은, 또 어려움을 겪고 있는 사용자들에게 기초통계학분야를 학습하고 활용하는데 도움을 주기 위하여 R Commander가 개발되었습니다. 개발자인 John Fox 교수는 이 목적과 관리방향을 분명히하고 있습니다. 중급이상의 R 사용자/ 고급통계 연구자들에게는 R Commander가 불필요할 수 있습니다.둘째, 지난 10년동안 R Commander의 메뉴 한글화작업을 진행해왔으며, 현재도 유지관리를 하고 있습니다. (이 정보는 R Commander 안의 Help > Rcmdr 에 있습니다) [Translations: Korean, Chel Hee Lee, Dae-Heung Jang, Shin Jong-Hwa] 지난 10년 동안 개인적인 메모 차원에서 R Commander 사용 및 한글화 관련 블로그 포스트를 만들고 관리되어 왔고 블로그에 전체 과정이 고스란히 남아있고 계속적으로 유지관리될 것입니다.신종화 Rcmdr : R CommanderCRAN Rcmdr 패키지 정보개발자 John Fox 교수의 Rcmdr 소개FOSSER_Ricoop","code":""},{"path":"install.html","id":"install","chapter":"2 .  설치","heading":"2 .  설치","text":"","code":""},{"path":"install.html","id":"맥os","chapter":"2 .  설치","heading":"2.1 맥OS","text":"Rcmdr 통계 프로그램을 맥에서 설치하는 경우 다음 전제 조건을 충족시키고 순서대로 진행하여 설치작업을 완료한다.가장 최신 맥OS로 갱신R 설치 다운로드XQuartz 설치 다운로드재부팅R.app에서 R 실행메뉴에서 Packages & Data > Package Installer 이동\nRcmdr 검색\nRcmdr 선택\nInstall Dependecies 체크박스 클릭\nInstall Selected 클릭\nRcmdr 검색Rcmdr 선택Install Dependecies 체크박스 클릭Install Selected 클릭R 명령 프롬프트에서 library(Rcmdr) 실행자세한 사항은 아래 동영상 참조","code":""},{"path":"install.html","id":"윈도우즈","chapter":"2 .  설치","heading":"2.2 윈도우즈","text":"R 설치 다운로드바탕화면 R x64 4.*.* 아이콘 더블클릭 R 실행\nR 명령 프롬프트에서 install.packages(\"Rcmdr\", dep = TRUE) 실행\nRcmdr 패키지를 다운로드 받을 CRAN mirror를 선택 (예를 들어, 0-Cloud [https])\nR 명령 프롬프트에서 library(Rcmdr) 실행\nR 명령 프롬프트에서 install.packages(\"Rcmdr\", dep = TRUE) 실행Rcmdr 패키지를 다운로드 받을 CRAN mirror를 선택 (예를 들어, 0-Cloud [https])R 명령 프롬프트에서 library(Rcmdr) 실행","code":""},{"path":"install.html","id":"rstudio-에서-rcmdr-설치","chapter":"2 .  설치","heading":"2.3 RStudio 에서 Rcmdr 설치","text":"RStudio 설치 다운로드콘솔 창에 install.packages(\"Rcmdr\") 입력우측하단 Packages –> install –> Rcmdr 입력후 install 버튼 클릭Rcmdr 실행\n콘솔창에 library(“Rcmdr”) 입력 실행\n콘솔창에 library(“Rcmdr”) 입력 실행","code":""},{"path":"파일-file.html","id":"파일-file","chapter":"3 .  파일 / File","heading":"3 .  파일 / File","text":"","code":""},{"path":"파일-file.html","id":"작업-디렉토리-바꾸기-file-change-working-directory","chapter":"3 .  파일 / File","heading":"3.1 작업 디렉토리 바꾸기…/ File > Change working directory…","text":"Windows 사례R이 시작되는 곳, 불러올 데이터가 보관되는 곳, 그리고 데이터를 저장할 곳이 다른 경우가 흔히 발생한다. 흔히 ‘경로’ 변경과 관련된 일인데, 일일이 수작업으로 입력하기가 불편하다. GUI 환경에서 R 작업을 할 때, 효과적인 영역이다.MS-Windows 경우, user > 문서 경로부터 화면이 시작된다.관련된 함수는 getwd(), setwd() 등이 있다.","code":""},{"path":"파일-file.html","id":"스크립트-파일-열기-file-open-script-file","chapter":"3 .  파일 / File","heading":"3.2 스크립트 파일 열기…/ File > Open script file…","text":"Windows 사례.R 형식의 스크립트 파일을 만드는 것은 R을 사용하는 데이터과학자의 일반적인 활동이다. 때로는 길게, 때로는 짧게 .R 파일들을 만든다. 저장된 파일을 다시 불러서 추가적인 작업을 하거나, 코드를 고치거나, 때로는 다른 사용자가 만든 .R 파일을 불러와 작업을 하는 것이 흔하다..R 파일은 일반적으로 문서 편집기로 작업을 할 수 있다. R Commander는 입력창과 출력창을 나눠서 작업이 가능하기 때문에, 입력창을 문서 편집기처럼 활용해서 .R 파일을 작업할 수 있다.","code":""},{"path":"파일-file.html","id":"스크립트-저장하기-file-save-script","chapter":"3 .  파일 / File","heading":"3.3 스크립트 저장하기…/ File > Save script…","text":"R Commander의 입력창에서 작업한 내용을 .R 파일 형식으로 저장한다. 저장하는 작업공간을 선택 또는 변경할 수 있다.RCommander.R이 기본설정으로 스크립트 이름이 나온다. 원하는 이름으로 변경하여 사용하자.","code":""},{"path":"파일-file.html","id":"스크립트-다른-이름으로-저장하기-file-save-script-as","chapter":"3 .  파일 / File","heading":"3.4 스크립트 다른 이름으로 저장하기…/ File > Save script as…","text":"작업한 스크립트 파일을 다른 이름으로 저장한다. 기본으로 설정된 파일 이름은 RCommander.R이다. 이름을 원하는 것으로 변경한다.","code":""},{"path":"파일-file.html","id":"open-r-markdown-file","chapter":"3 .  파일 / File","heading":"3.5 Open R Markdown file…","text":"R의 Reproducible Research 분야에서 온라인 웹보고서용으로 최근 크게 부각되는 형식이 Markdown이다. 제작된 R Markdown 파일을 불러오는데 사용하는 기능이다.","code":""},{"path":"파일-file.html","id":"r-markdown-파일-저장하기-file-save-r-markdown-file..","chapter":"3 .  파일 / File","heading":"3.6 R Markdown 파일 저장하기…/ File > Save R Markdown file..","text":"R Markdown 파일을 (원하는 위치에) 저장한다.","code":""},{"path":"파일-file.html","id":"r-markdown-파일을-다른-이름으로-저장하기-file-save-r-markdown-file-as","chapter":"3 .  파일 / File","heading":"3.7 R Markdown 파일을 다른 이름으로 저장하기…/ File > Save R Markdown file as…","text":"R Markdown file을 열고 작업한 뒤에, 새로운 이름으로 변경하여 원하는 위치에 저장한다.","code":""},{"path":"파일-file.html","id":"출력물-저장하기-file-save-output","chapter":"3 .  파일 / File","heading":"3.8 출력물 저장하기…/ File > Save output…","text":"Linux 사례 (Ubuntu 18.04)출력창에 다음과 같은 내용들이 있다고 가정하자:Linux 사례 (Ubuntu 18.04)출력창에 나온 결과 값들을 파일로 저장한다. 이 파일은 기본설정으로 RCommander .txt 형식으로 되어있는데, 이름을 자유롭게 변경하여 저장할 수 있다.Linux 사례 (Ubuntu 18.04)RCommander.txt라는 이름으로 출력물을 파일로 저장하였다고 가정하자. 텍스트파일을 열고 편집할 수 있는 편집기를 열고 살펴보면 다음과 같이 저장된 것을 볼 것이다:저장할 파일의 이름을 결정하고, 파일로 저장한 이후에 <출력물 저장하기…> 기능은 출력물을 계속 업데이트해서 저장하는데 반복적으로 사용한다.","code":"\nlibrary(carData)\n\ndata(\"Prestige\")\n\nstr(Prestige)## 'data.frame':    102 obs. of  6 variables:\n##  $ education: num  13.1 12.3 12.8 11.4 14.6 ...\n##  $ income   : int  12351 25879 9271 8865 8403 11030 8258 14163 11377 11023 ...\n##  $ women    : num  11.16 4.02 15.7 9.11 11.68 ...\n##  $ prestige : num  68.8 69.1 63.4 56.8 73.5 77.6 72.6 78.1 73.1 68.8 ...\n##  $ census   : int  1113 1130 1171 1175 2111 2113 2133 2141 2143 2153 ...\n##  $ type     : Factor w/ 3 levels \"bc\",\"prof\",\"wc\": 2 2 2 2 2 2 2 2 2 2 ...\nsummary(Prestige)##    education          income          women           prestige    \n##  Min.   : 6.380   Min.   :  611   Min.   : 0.000   Min.   :14.80  \n##  1st Qu.: 8.445   1st Qu.: 4106   1st Qu.: 3.592   1st Qu.:35.23  \n##  Median :10.540   Median : 5930   Median :13.600   Median :43.60  \n##  Mean   :10.738   Mean   : 6798   Mean   :28.979   Mean   :46.83  \n##  3rd Qu.:12.648   3rd Qu.: 8187   3rd Qu.:52.203   3rd Qu.:59.27  \n##  Max.   :15.970   Max.   :25879   Max.   :97.510   Max.   :87.20  \n##      census       type   \n##  Min.   :1113   bc  :44  \n##  1st Qu.:3120   prof:31  \n##  Median :5135   wc  :23  \n##  Mean   :5402   NA's: 4  \n##  3rd Qu.:8312            \n##  Max.   :9517"},{"path":"파일-file.html","id":"출력물을-다른-이름으로-저장하기-file-save-output-as","chapter":"3 .  파일 / File","heading":"3.9 출력물을 다른 이름으로 저장하기…/ File > Save output as…","text":"Linux 사례 (Ubuntu18.04)출력 결과를 다른 이름으로 원하는 위치에 저장할 수 있다. 기본 설정된 파일 이름은 RCommander.txt 인데, 이름을 바꿔서 저장한다.Linux 사례 (Ubuntu18.04)자료처리와 분석과정에서 여러 개의 출력물을 만드는 것이 일반적이다. 하나의 파일에 길고 많은 양의 출력파일을 만들기도 하지만, 분석과정에서 다양하게 분류될 수 있는 분석범주들을 구성할 때가 흔히 발생하기 때문이다. 출력물을 원하는 곳에 원하는 이름으로 저장하는데 쓰이는 기능으로 자주 활용된다.","code":""},{"path":"파일-file.html","id":"r-작업공간-저장하기-file-save-r-workspace","chapter":"3 .  파일 / File","heading":"3.10 R 작업공간 저장하기…/ File > Save R workspace…","text":"작업공간에서 만든/생성된 하나 이상의 객체를 원하는 이름의 파일로 저장할 수 있다. .RData 파일 형식인데, 이름을 만들어 원하는 위치에 파일을 저장할 수 있다.메뉴에 Data > load data set… 이 있다. 이 기능을 통하여 저장된 R 작업공간의 객체들을 다시 불러올 수 있다.","code":""},{"path":"파일-file.html","id":"r-작업공간을-다른-이름으로-저장하기-file-save-r-workspace-as","chapter":"3 .  파일 / File","heading":"3.11 R 작업공간을 다른 이름으로 저장하기…/ File > Save R workspace as…","text":"R 작업공간의 이름을 바꿀 수 있다. 이름을 바꾼다는 것은 앞서 생산한 작업공간 파일(.RData)을 불러들여서 추가 작업을 진행한 것을 뜻할 것이다.","code":""},{"path":"파일-file.html","id":"나가기-commander와-r에서-file-exit-from-commander-and-r","chapter":"3 .  파일 / File","heading":"3.12 나가기 > Commander와 R에서 / File > Exit > From Commander and R","text":"Exit?Save script file?Save R Markdown file?Save output file? 등의 추가 질문을 받는다.File 메뉴에 있는 기능들과 동일하다. 사용자로 하여금 ‘시간과 노력을 들여 작업한 내용을’ 저장없이 잃어버리는 것을 환기시키기 위하여 제공된다.터미날의 쉘 환경으로 돌아간다. 그런데 아쉬운 점이 하나 발생한다. 다시 R과 R Commander를 실행할 경우, 새로운 쉘을 이용해야 한다. 기존 쉘 환경에서는 입력내용이 화면에 출력되지 않는다. 예를 들어, Commander R을 실행하여 R을 종료한 다음, 다시 R을 실행하려고 ’R’을 쉘에 입력하면, 화면에 ’R’이 보이지 않는다. 하지만, R은 실행된다. 또 R 프롬프트에서도 입력이 되지 않는다.","code":""},{"path":"파일-file.html","id":"나가기-commander에서-file-exit-from-commander","chapter":"3 .  파일 / File","heading":"3.13 나가기 > Commander에서 / File > Exit > From Commander","text":"Exit?Save script file?Save R Markdown file?Save output file? 등의 추가 질문을 받는다.File 메뉴에 있는 기능들과 동일하다. 사용자로 하여금 ‘시간과 노력을 들여 작업한 내용을’ 저장없이 잃어버리는 것을 환기시키기 위하여 제공된다.Commander에서 나가면 R 프롬프트 상태가 된다. 다시 R Commander를 부르기 위해서 library(Rcmdr), require(Rcmdr) 등은 작동하지 않는다. 대신 Commander()를 사용한다.","code":""},{"path":"편집-edit.html","id":"편집-edit","chapter":"4 .  편집 / Edit","heading":"4 .  편집 / Edit","text":"","code":""},{"path":"편집-edit.html","id":"editedit-r-markdown-document","chapter":"4 .  편집 / Edit","heading":"4.1 Edit/Edit R Markdown document","text":"","code":""},{"path":"편집-edit.html","id":"마지막-markdown-명령어-블록-제거하기-edit-remove-last-markdown-command-block","chapter":"4 .  편집 / Edit","heading":"4.2 마지막 Markdown 명령어 블록 제거하기 / Edit > Remove last Markdown command block","text":"(이 기능의 효과를 솔직히 모르겠다)","code":""},{"path":"편집-edit.html","id":"자르기-edit-cut","chapter":"4 .  편집 / Edit","heading":"4.3 자르기 / Edit > Cut","text":"","code":""},{"path":"편집-edit.html","id":"복사하기-edit-copy","chapter":"4 .  편집 / Edit","heading":"4.4 복사하기 / Edit > Copy","text":"","code":""},{"path":"편집-edit.html","id":"붙이기-edit-paste","chapter":"4 .  편집 / Edit","heading":"4.5 붙이기 / Edit > Paste","text":"","code":""},{"path":"편집-edit.html","id":"삭제하기-edit-delete","chapter":"4 .  편집 / Edit","heading":"4.6 삭제하기 / Edit > Delete","text":"","code":""},{"path":"편집-edit.html","id":"찾기-edit-find","chapter":"4 .  편집 / Edit","heading":"4.7 찾기 / Edit > Find…","text":"스크립트 창에서 원하는 문자열의 위치를 찾는다. 긴 스크립트인 경우, 효과적으로 사용할 수 있다.","code":""},{"path":"편집-edit.html","id":"모두-선택하기-edit-select-all","chapter":"4 .  편집 / Edit","heading":"4.8 모두 선택하기 / Edit > Select all","text":"스크립트창의 내용 모두를 선택할 수 있다.","code":""},{"path":"편집-edit.html","id":"뒤돌리기-edit-undo","chapter":"4 .  편집 / Edit","heading":"4.9 뒤돌리기 / Edit > Undo","text":"바로 앞 단계의 작업으로 되돌아간다.Linux 사례 (Ubuntu 18.04)입력창의 내용이 지워졌다고 가정하자. (가슴이 철렁할 것이다) 어떤 내용을 입력했는지 기억하기 어렵고, 다시 입력하는데 불편함을 느낄 것이다. 이 때  기능을 사용할 수 있다. 앞선 화면에서 지워진 입력창의 내용이 이 기능을 이용하면 다시 되살아난다:Linux 사례 (Ubuntu 18.04) : 입력창을 되살린 간혹, 복잡해진 출력창을 지우려다가 입력창을 지우는 경우가 있을 수 있다. 마우스의 커서가 있는 곳이 지워지기 때문이다. 이 때  기능을 이용하여 잘못 지워진 창의 내용을 되살릴 수 있다.","code":""},{"path":"편집-edit.html","id":"다시하기-edit-redo","chapter":"4 .  편집 / Edit","heading":"4.10 다시하기 / Edit > Redo","text":"Undo 명령으로 앞 단계로 (후퇴하여) 되돌아간 상태에서 다시 앞의 단계로 전진하기 위하여 사용한다. Undo는 계속 뒤로 돌아가는 명령이며, Redo는 계속 앞으로 되돌아 나아가는 명령이다.","code":""},{"path":"편집-edit.html","id":"창-지우기-edit-clear-window","chapter":"4 .  편집 / Edit","heading":"4.11 창 지우기 / Edit > Clear window","text":"Linux 사례 (Ubuntu 18.04)입력창 또는 출력창이 복잡해 보일 경우, 그래서 그 창을 지우고 다시 새롭게 입력창에서 작업하거나, 출력창으로 보고 싶을 때 사용하는 기능이다. 입력된 스크립트를 정돈하여 저장하거나, 출력물을 정돈하여 출력파일을 만들 때 활용된다.예를 들어, 데이터셋을 불러오고, 데이터의 내부구조를 살펴보고, 요약정보를 보고자 한다면 다음과 같은 스크립트를 입력하고 또 출력해서 보게될 것이다:이 때,  기능을 사용하면 창에 기록된 내용이 지워진다.Linux 사례 (Ubuntu 18.04) : 입력창 지우기Linux 사례 (Ubuntu 18.04) : 출력창 지우기지워지는 창은 마우스의 커서가 있는 곳이다. 입력창에 마우스 커서가 있는 경우에 를 하면 입력창이 지워지고, 출력창에 마우스 커서가 있는 경우에 를 하면 출력창이 지워진다.","code":"\ndata(Prestige) # car 뙣궎吏쓽 Prestige 뜲씠꽣뀑 遺덈윭삤湲NAstr(Prestige)  # Prestige 뜲씠꽣뀑쓽 궡遺援ъ“ 蹂닿린NAsummary(Prestige) # Prestige 뜲씠꽣뀑 슂빟젙蹂 蹂닿린NA"},{"path":"분포-distribution.html","id":"분포-distribution","chapter":"5 .  분포 / distribution","heading":"5 .  분포 / distribution","text":"","code":""},{"path":"분포-distribution.html","id":"난수생성기-시드seed-생성기-distributions-set-random-number-generator-seed","chapter":"5 .  분포 / distribution","heading":"5.1 난수생성기 시드(seed) 생성기… / Distributions > Set random number generator seed…","text":"Linux 사례 (MX 21)번호 하나를 선택한다. 그 번호는 앞으로 생성되는 난수 값들을 기억한다.Linux 사례 (MX 21)","code":"\nset.seed(9723)"},{"path":"분포-distribution.html","id":"분포도","chapter":"5 .  분포 / distribution","heading":"5.2 분포도","text":"","code":""},{"path":"분포-distribution.html","id":"연속-분포-정규-분포-정규-분위수-distributions-continuous-distributions-normal-distribution-normal-quantiles","chapter":"5 .  분포 / distribution","heading":"5.2.1 연속 분포 > 정규 분포 > 정규 분위수…/ Distributions > Continuous distributions > Normal distribution > Normal quantiles…","text":"Linux 사례 (MX 21)확률을 넣고, 분포도의 (꼬리) 방향을 정해주면, 분위수가 계산된다. 을 95%(.095)로 선택해보자.  선택에 따라 어떻게 값이 변하는지 살펴보자.Linux 사례 (MX 21)Linux 사례 (MX 21)아래 화면에서 95% 확률로  방향의 값을 확인할 수 있다.Linux 사례 (MX 21)","code":"\nqnorm(c(.95), mean=0, sd=1, lower.tail=TRUE)## [1] 1.644854\nqnorm(c(.95), mean=0, sd=1, lower.tail=FALSE)## [1] -1.644854"},{"path":"분포-distribution.html","id":"연속-분포-정규-분포-정규-확률-distributions-continuous-distributions-normal-distribution-normal-probabilities","chapter":"5 .  분포 / distribution","heading":"5.2.2 연속 분포 > 정규 분포 > 정규 확률…/ Distributions > Continuous distributions > Normal distribution > Normal probabilities…","text":"Linux 사례 (MX 21)사례 값을 넣고, 분포도의 (꼬리) 방향을 정해주면 확률이 계산된다.Linux 사례 (MX 21)Linux 사례 (MX 21)Linux 사례 (MX 21)Linux 사례 (MX 21)Linux 사례 (MX 21)","code":"\npnorm(c(1.644854), mean=0, sd=1, lower.tail=TRUE)## [1] 0.95\npnorm(c(1.644854), mean=0, sd=1, lower.tail=FALSE)## [1] 0.04999996\npnorm(c(-1.644854), mean=0, sd=1, lower.tail=TRUE)## [1] 0.04999996\npnorm(c(-1.644854), mean=0, sd=1, lower.tail=FALSE)## [1] 0.95"},{"path":"분포-distribution.html","id":"연속-분포-정규-분포-정규-분포-그리기-distributions-continuous-distributions-normal-distribution-plot-normal-distribution","chapter":"5 .  분포 / distribution","heading":"5.2.3 연속 분포 > 정규 분포 > 정규 분포 그리기… / Distributions > Continuous distributions > Normal distribution > Plot normal distribution…","text":"Linux 사례 (MX 21)<밀도 함수 그리기 (Plot density function)>를 선택하고 을 선택한 상황에서 몇 몇 사례를 만들어본다.Linux 사례 (MX 21)Linux 사례 (MX 21)Linux 사례 (MX 21)Linux 사례 (MX 21)Linux 사례 (MX 21)Linux 사례 (MX 21)<밀도 함수 그리기 (Plot density function)>를 선택하고 를 선택한 상황에서 몇 몇 사례를 만들어본다.Linux 사례 (MX 21)에 입력할 수 있는 범위는 0에서 1까지의 확률이다. 이 범위 안에 들어오는 숫자는 아래 명령문 내부 regions에서 보이듯이 분위수로 전환된다.Linux 사례 (MX 21)Linux 사례 (MX 21)Linux 사례 (MX 21)Linux 사례 (MX 21)Linux 사례 (MX 21)","code":"\nlocal({\n  .x <- seq(-3.291, 3.291, length.out=1000)  \n  plotDistr(.x, dnorm(.x, mean=0, sd=1), cdf=FALSE, xlab=\"x\", ylab=\"Density\", \n  main=paste(\"Normal Distribution:  Mean=0, Standard deviation=1\"), regions=list(c(-1.644854, Inf)), \n  col=c('#BEBEBE', '#FFA500'), legend.pos='topright')\n})\nlocal({\n  .x <- seq(-3.291, 3.291, length.out=1000)  \n  plotDistr(.x, dnorm(.x, mean=0, sd=1), cdf=FALSE, xlab=\"x\", ylab=\"Density\", \n  main=paste(\"Normal Distribution:  Mean=0, Standard deviation=1\"))\n})\nlocal({\n  .x <- seq(-3.291, 3.291, length.out=1000)  \n  plotDistr(.x, dnorm(.x, mean=0, sd=1), cdf=FALSE, xlab=\"x\", ylab=\"Density\", \n  main=paste(\"Normal Distribution:  Mean=0, Standard deviation=1\"), regions=list(c(1.96, Inf), c(-Inf, \n  -1.96)), col=c('#BEBEBE', '#FFA500'), legend.pos='topright')\n})\nlocal({\n  .x <- seq(-3.291, 3.291, length.out=1000)  \n  plotDistr(.x, dnorm(.x, mean=0, sd=1), cdf=FALSE, xlab=\"x\", ylab=\"Density\", \n  main=paste(\"Normal Distribution:  Mean=0, Standard deviation=1\"), regions=list(c(-1.64485362695147, \n  1.64485362695147)), col=c('#BEBEBE', '#FFA500'), legend.pos='topright')\n})\nlocal({\n  .x <- seq(-3.291, 3.291, length.out=1000)  \n  plotDistr(.x, dnorm(.x, mean=0, sd=1), cdf=FALSE, xlab=\"x\", ylab=\"Density\", \n  main=paste(\"Normal Distribution:  Mean=0, Standard deviation=1\"), regions=list(c(-Inf, \n  1.64485362695147)), col=c('#BEBEBE', '#FFA500'), legend.pos='topright')\n})\nlocal({\n  .x <- seq(-3.291, 3.291, length.out=1000)  \n  plotDistr(.x, dnorm(.x, mean=0, sd=1), cdf=FALSE, xlab=\"x\", ylab=\"Density\", \n  main=paste(\"Normal Distribution:  Mean=0, Standard deviation=1\"), regions=list(c(-Inf, \n  1.64485362695147), c(2.32634787404084, Inf)), col=c('#BEBEBE', '#FFA500'), legend.pos='topright')\n})"},{"path":"분포-distribution.html","id":"연속-분포-정규-분포-정규-분포의-표본-distributions-continuous-distributions-normal-distributions-sample-from-normal-distribution","chapter":"5 .  분포 / distribution","heading":"5.2.4 연속 분포 > 정규 분포 > 정규 분포의 표본…/ Distributions > Continuous distributions > Normal distributions > Sample from normal distribution…","text":"Linux 사례 (MX 21) 창에는 다양한 선택 기능이 있다. 표본의 수 (행)과 관찰 수 (열)에 표본 범위를 넣자. ’데이터셋의 이름 입력하기’에는 원하는 이름을 넣을 수 있다. 나는 set.seed(번호)를 연상시키는 번호를 입력하기도 한다.Linux 사례 (MX 21)Set random number generator seed… 참고Linux 사례 (MX 21)","code":"\nset.seed(9723)\nNormalSamples_9723 <- as.data.frame(matrix(rnorm(10*5, mean=0, sd=1), ncol=5))\nrownames(NormalSamples_9723) <- paste(\"sample\", 1:10, sep=\"\")\ncolnames(NormalSamples_9723) <- paste(\"obs\", 1:5, sep=\"\")"},{"path":"분포-distribution.html","id":"이산분포-discrete-distributions","chapter":"5 .  분포 / distribution","heading":"5.3 이산분포 / Discrete distributions","text":"","code":""},{"path":"data.html","id":"data","chapter":"6 .  데이터 / Data","heading":"6 .  데이터 / Data","text":"","code":""},{"path":"data.html","id":"새로운-데이터셋-data-new-data-set","chapter":"6 .  데이터 / Data","heading":"6.1 새로운 데이터셋…/ Data > New data set…","text":"Windows 사례메뉴를 선택하면 다음과 같은 화면으로 넘어간다. 만들고자하는 데이터셋의 이름을 정하는 기능이다. Dataset 이라고 기본 설정되어 있다.Windows 사례새롭게 만들고자하는 데이터셋의 구조가 나타난다. 변수는 V1, V2, V3 등으로 자동적으로 일련변호화된다.Windows 사례변수 3개(V1, V2, V3), 사례 3개(1, 2, 3) 등으로 열과 행을 추가할 수 있다.Windows 사례셀(Cell)에 마우스를 놓고, 마우스의 오른쪽 버튼을 누르면 선택사항의 메뉴가 등장한다.Windows 사례Tcl package ‘Tktable’ must installed first 라는 오류 메세지가 뜰 수 있다.\n데이터셋을 만들기 위하여 추가적인 패키지가 필요하다는 뜻이다. (내가 지금 작업하는 우분투 18.04 리눅스에서 맞대고 있는 상황이다)sudo apt install tktable*로 시스템에 추가 패키지를 설치하고, 다시 R 과 R Commander를 실행하면 테이블 형태의 새로운 데이터셋 (데이터프레임)을 만들 새로운 창이 뜬다. 행과 열을 추가하거나 지우고, 사례의 이름과 값을 넣고 지우는 방식으로 데이터셋을 만들 수 있다.","code":""},{"path":"data.html","id":"데이터셋-탑재하기-data-load-data-set","chapter":"6 .  데이터 / Data","heading":"6.2 데이터셋 탑재하기… / Data > Load data set…","text":"linux 사례 (Ubuntu 18.04)저장된 R 데이터 파일을 메모리로 불러오는 기능이다. 확장자 .RData, .RDA 등으로 저장된 파일을 찾는다.linux 사례 (Ubuntu 18.04)","code":""},{"path":"data.html","id":"데이터-데이터셋-병합하기-data-merge-data-sets","chapter":"6 .  데이터 / Data","heading":"6.3 데이터 > 데이터셋 병합하기… / Data > Merge data sets…","text":"Linux 사례 (Ubuntu 18.04)두 개 이상의 데이터셋이 객체로서 메모리에 있는 경우 (R Commander에서 인식하는 경우), Merge data sets…라는 기능을 이용할 수 있다. 데이터셋이 없거나 하나인 경우, 회색의 불활성 메뉴로서 표시된다.Linux 사례 (Ubuntu 18.04)행 병합하기는 두개의 데이터셋을 위, 아래로 이어 붙인다.열 병합하기는 두개의 데이터셋을 왼쪽, 오른쪽으로 이어 붙인다.’행 병합하기’를 하려면 동일한 변수들을 갖고 있어야 하며, ’열 병합하기’를 하려면 동일한 사례들을 갖고 있어야 한다.carData 패키지에 있는 Prestige 데이터셋으로 연습해보자. Prestige 데이터셋Prestige 데이터셋의 하위셋 Prestige.sub1과 Prestige.sub2 두개를 만들자.10. Remove row(s) active data set… <- 화면의 메뉴를 이용하여 사례 제거를 연습할 수 있다.아래의 내용은 Prestige.sub1과 Prestige.sub2를 병합하고자 하는 연습이다. <첫째 데이터셋(하나 선택)>과 <둘째 데이터셋 (하나 선택)>에서 데이터셋을 하나씩 선택하고, 공통의 데이터 구조를 가진 두개의 데이터셋을 이어붙이는 의 병합 방향을 선택해보자.Linux 사례 (Ubuntu 18.04)","code":"\ndata(Prestige, package=\"carData\")    # Prestige 뜲씠꽣뀑 遺덈윭삤湲NAPrestige.sub1 <- Prestige[-c(61:nrow(Prestige)),] \n                                     # Prestige 뜲씠꽣뀑뿉꽌 궗濡 吏슦湲1 (61遺꽣 걹源뚯)NAPrestige.sub2 <- Prestige[-c(1:60),] # Prestige 뜲씠꽣뀑뿉꽌 궗濡 吏슦湲2 (1遺꽣 60源뚯)NA\nMergedDataset <- mergeRows(Prestige.sub1, Prestige.sub2, common.only=FALSE)"},{"path":"data.html","id":"데이터-가져오기-import-data","chapter":"6 .  데이터 / Data","heading":"6.4 데이터 가져오기 / Import data","text":"","code":""},{"path":"data.html","id":"엑셀-파일-import-data-from-excel-file","chapter":"6 .  데이터 / Data","heading":"6.4.1 엑셀 파일 / Import data > from EXCEL file…","text":"Microsoft사의 Office 제품에 포함된 EXCEL은 광범위하게 사용되는 수치정보 관리 및 시각화 툴이다. 관리/재무 정보를 다루는 수많은 기업과 개인이 사용하기 때문에 R 사용자가 엑셀의 .xls, 또는 .xlsx 파일을 불러오는 요구는 매우 크다. 관심사가 크기 때문일까, R에서 EXCEL파일을 불러오기 위해서 개발자들이 만든 기여패키자들도 많다. R Commander에서 EXCEL파일을 불러오기 위하여 사용하는 외부 패키지도 변해왔다. 2019년 5월 현재는 readxl 이라는 패키지이다.EXCEL은 다른 통계분석툴과 달리 sheet 개념이 있다. 따라서 불러올 데이터의 객체화 과정에서 EXCEL 파일의 어느 sheet를 불러올 것인가를 선택할 수 있다.EXCEL은 다른 통계분석툴과 달리 sheet 개념이 있다. 따라서 불러올 데이터의 객체화 과정에서 EXCEL 파일의 어느 sheet를 불러올 것인가를 선택할 수 있다.EXCEL은 다른 통계분석툴과 달리 데이터 프레임화에 필요한 변수명에 대한 강한 규칙을 갖고 있지 않다. 따라서 R Commander의 기본 설정은 선택된 sheet의 첫 행의 정보를 변수 정보로 활용하는 것이다.EXCEL은 다른 통계분석툴과 달리 데이터 프레임화에 필요한 변수명에 대한 강한 규칙을 갖고 있지 않다. 따라서 R Commander의 기본 설정은 선택된 sheet의 첫 행의 정보를 변수 정보로 활용하는 것이다.","code":""},{"path":"data.html","id":"stata-데이터-import-data-from-stata-data-set","chapter":"6 .  데이터 / Data","heading":"6.4.2 STATA 데이터 / Import data > from STATA data set…","text":"STATA는 사회과학분야의 고급통계문화에서 많이 사용하는 분석툴중 하나이다. SPSS처럼 문자 변수를 요인화시키는 것이 기본 설정이다.\n날짜를 R 형식으로 전환하는 것이 기본 설정이다. (추후 논의하겠다)","code":""},{"path":"data.html","id":"미니탭-데이터-import-data-from-minitab-data-set","chapter":"6 .  데이터 / Data","heading":"6.4.3 미니탭 데이터 / Import data > from Minitab data set…","text":"","code":""},{"path":"data.html","id":"sas-데이터-import-data-from-sas-b7dat-file","chapter":"6 .  데이터 / Data","heading":"6.4.4 SAS 데이터 / Import data >from SAS b7dat file…","text":"","code":""},{"path":"data.html","id":"sas-데이터-import-data-from-sas-xport-file","chapter":"6 .  데이터 / Data","heading":"6.4.5 SAS 데이터 / Import data > from SAS xport file…","text":"","code":""},{"path":"data.html","id":"spss-데이터-import-data-from-spss-data-set","chapter":"6 .  데이터 / Data","heading":"6.4.6 SPSS 데이터 / Import data > from SPSS data set…","text":"데이터셋의 기본이름은 Dataset으로 되어있다. 원하는 (영문)이름으로 바꿀 수 있다.데이터셋의 기본이름은 Dataset으로 되어있다. 원하는 (영문)이름으로 바꿀 수 있다.기본설정으로 클릭되어 제공되는 선택사항이 ’Convert character variables factors’이다. 문자형 변수를 요인형 변수로 바꾼다는 것이다. 문자형을 요인형으로 바꾸는 것이 필요한가? 필요하지 않은가? 이 질문은 R을 이해하는 데 있어서 중요하다. 필요할 수 도 있고, 불필요하고 오히려 분석에 거추장스러울 수 있다. 하지만, R Commander에서 제공하는 대부분의 기능은 문자형을 요인형으로 만들어 처리한다.기본설정으로 클릭되어 제공되는 선택사항이 ’Convert character variables factors’이다. 문자형 변수를 요인형 변수로 바꾼다는 것이다. 문자형을 요인형으로 바꾸는 것이 필요한가? 필요하지 않은가? 이 질문은 R을 이해하는 데 있어서 중요하다. 필요할 수 도 있고, 불필요하고 오히려 분석에 거추장스러울 수 있다. 하지만, R Commander에서 제공하는 대부분의 기능은 문자형을 요인형으로 만들어 처리한다.SPSS라는 인기있는 GUI 사회과학 통계분석툴이 있다. 70년대 초반부터 발전해온 전산 통계툴이기 때문에, 대부분의 학자들에게 무척 친숙하다. SPSS 경험자들이 R을 배울 때 어색한 개념이 factor이다. R의 데이터 유형(Type) 중 하나인 factor는 흔히 ‘범주형(categorical)’ 으로 SPSS 사용자들이 이해하고 있기 때문이다. 아울러 factor하면 요인분석에서 등장하는 개념으로 바로 넘어가는 경우가 흔하다.요인형으로 바꾸는 이유는 시각화 작업과도 연관성이 크다. R에서 시각화되는 정보는 수치형과 요인형이다. 수치형은 연속형 자료로, 요인형은 이산형 자료로 시각화되기 때문에, plot()로 호출되는 방식이 크게 다르다. 문자형을 요인형으로 바꾼다는 것은 곧 시각화 준비를 마쳤다는 의미이기도 하다.","code":""},{"path":"data.html","id":"데이터-데이터-불러오기-텍스트-파일-클립보드-또는-url에서-import-data-from-text-file-clipboard-or-url","chapter":"6 .  데이터 / Data","heading":"6.4.7 데이터 > 데이터 불러오기 > 텍스트 파일, 클립보드 또는 URL에서…/ Import data > from text file, clipboard, or URL…","text":"Linux 사례 (MX 21)개인적인 경험과 판단이지만, R에서 외부 데이터 파일을 불러오는 것을 초급자들은 너무 어려워한다. 쉽지 않다. 분석과 시각화 작업을 하기에 앞서서 자료 불러오기가 어려우니, 많은 사람이 쉬운 GUI 분석도구로 되돌아가려고 한다. read.table() 계열 함수가 어렵다.R Commander는 이러한 불편함을 최소화하기 위하여 인자들을 쉽게 선정하도록 화면 구성이 되어있다. 하지만, 먼저 알아야할 것이 있다. R Commander에서 불러오는 객체, 다시말해 외부 데이터 파일로부터 불러올 대상은 반드시 데이터 프레임 형식을 취한다. 변수이름을 갖고, 엑셀과 같은 스프레드시트 형식으로 사례값들이 배열되어 있는 것만 GUI 메뉴로 작업할 수 있다. 만약, 데이터프레임 형식이 아니라면, 일반 콘솔 환경과 같은 조건에서 Command Line 작업을 해야한다.Linux 사례 (MX 21)data set의 기본이름은 Dataset이다. 원하는 것으로 이름을 바꿀 수 있다. 가급적 영문을 추천한다. 행여 다른 시스템에서 파일이름의 호환문제를 겪을 수 있기 때문이다. (위의 메뉴 창에서는 Nations라고 데이터셋의 이름을 변경했다.)data set의 기본이름은 Dataset이다. 원하는 것으로 이름을 바꿀 수 있다. 가급적 영문을 추천한다. 행여 다른 시스템에서 파일이름의 호환문제를 겪을 수 있기 때문이다. (위의 메뉴 창에서는 Nations라고 데이터셋의 이름을 변경했다.)결측치 표시는 NA가 기본설정이다.결측치 표시는 NA가 기본설정이다.외부 파일을 불러올지, 메모리(clipboard)에서 불러올지, 외부인터넷 경로에서 내려받을 지를 선택할 수 있다.외부 파일을 불러올지, 메모리(clipboard)에서 불러올지, 외부인터넷 경로에서 내려받을 지를 선택할 수 있다.필드 구분자를 선택할 수 있다. 사실, 필드 구분자가 초급자에게는 어렵다. 빈 공백, commas, 세미 콜론, 탭 등이 사용되기 때문에 혼란스러울 수 있다. 일반적으로 .txt로 되어 있는 것은 빈 공백, .csv로 되어 있는 파일은 comman인 경우가 흔하다. 하지만, 정확한 내부 규칙이 없기 때문에 어려개를 번갈아 선택해봐야할 수 있다.필드 구분자를 선택할 수 있다. 사실, 필드 구분자가 초급자에게는 어렵다. 빈 공백, commas, 세미 콜론, 탭 등이 사용되기 때문에 혼란스러울 수 있다. 일반적으로 .txt로 되어 있는 것은 빈 공백, .csv로 되어 있는 파일은 comman인 경우가 흔하다. 하지만, 정확한 내부 규칙이 없기 때문에 어려개를 번갈아 선택해봐야할 수 있다.Decimal-Point의 경우, 한국은 미국스타일의 Period[.]를 관행적으로 쓰기 때문에 기본설정을 따르면 된다.Decimal-Point의 경우, 한국은 미국스타일의 Period[.]를 관행적으로 쓰기 때문에 기본설정을 따르면 된다.Linux 사례 (MX 21)Nations라는 이름으로 불러온 데이터셋이 활성화되어 R Commander 에서 활용할 수 있는 환경이 시작된다.사례를 하나 소개한다. libreOffice Calc에서 엑셀파일을 불러오고, 또 이것의 첫 시트를 clipboard에 복사하고, R Commander로 불러온다고 생각해보자.Locatioin Data File에서 Clipboard를 선택하고,Locatioin Data File에서 Clipboard를 선택하고,Field Separator에서 Tabs(탭)을 선택해야 한다. 기본설정을 바꿔야한다는 뜻이다.Field Separator에서 Tabs(탭)을 선택해야 한다. 기본설정을 바꿔야한다는 뜻이다.한가지 유의해야할 것은 변수이름이 바뀌는 규칙이 있다는 점이다.R에서는 괄호를 변수이름에 넣을 수 없다. 앞뒤 괄호는 ..으로 바뀐다. ’연락처(대표)’는 ’연락처.대표.’로 바뀐다.데이터 파일이 (어떤 규칙성에 의하여 성공적으로) 불러와지면, 상단의 R 아이콘 옆에 Data set:에 파란 색의 객체이름이 보인다. 기본설정이라면 Dataset이 될 것이다.","code":"Nations <- read.table(\"/home/jhshin/다운로드/Rcmdr/inst/etc/Nations.txt\", header=TRUE, \n  stringsAsFactors=TRUE, sep=\"\", na.strings=\"NA\", dec=\".\", strip.white=TRUE)"},{"path":"data.html","id":"패키지-데이터-data-in-packages","chapter":"6 .  데이터 / Data","heading":"6.5 패키지 데이터 / Data in packages","text":"","code":""},{"path":"data.html","id":"패키지의-데이터셋-목록-data-in-packages-list-data-sets-in-packages","chapter":"6 .  데이터 / Data","heading":"6.5.1 패키지의 데이터셋 목록 / Data in packages > List data sets in packages","text":"Windows 사례R과 Rcmdr에서 불러온 패키지에 담겨있는 데이터셋의 목록을 보여준다.data() 함수를 사용한다. R이 시작될 때 기본 설정으로 함께 호출되는 Datasets 패키지, Rcmdr 패키지를 호출할 때 의존성을 갖는 carData, sandwish 패키지의 데이터셋 목록을 포함한다.Windows 사례","code":""},{"path":"data.html","id":"첨부된-패키지에서-데이터셋-읽기-data-in-packages-read-data-set-from-an-attached-package","chapter":"6 .  데이터 / Data","heading":"6.5.2 첨부된 패키지에서 데이터셋 읽기…/ Data in packages > Read data set from an attached package…","text":"Windows 사례R에는 많은 예제 데이터셋이 있다. 대부분의 패키지들에 예제 데이터셋이 담겨 있다. R과 R Commander를 사용하는 과정에서 불러온, 다른 말로 하면 메모리로 호출된 패키지들에 데이터셋이 포함되어 있을 수 있다. 예제로 포함된 데이터셋을 선택하여 메모리 안으로 불러들일 때, 이 기능을 사용한다. 주로 통계 방법론이나 함수 사용법을 연습할 때, 주로 활용하게 된다.하나의 사례로서, carData 패키지의 Prestige 데이터셋을 선택한다.Windows 사례Windows 사례출력 창을 보면, data() 함수가 사용됨을 알 수 있다:data(데이터셋이름, package=\"패키지이름\")Windows 사례","code":""},{"path":"data.html","id":"데이터-활성-데이터셋-data-active-data-set","chapter":"6 .  데이터 / Data","heading":"6.6 데이터 활성 데이터셋 / Data > Active data set …","text":"","code":""},{"path":"data.html","id":"활성-데이터셋-데이터-보기-active-data-set-view-data","chapter":"6 .  데이터 / Data","heading":"6.6.1 활성 데이터셋 > 데이터 보기…/ Active data set > View data…","text":"메모리로 불러온 데이터의 내부 값들을 볼 때 사용한다. 데이터프레임화 된 객체 전체를 보거나, 일부 변수들만 추려서 볼 수도 있다.Linux 사례 (MX 21)기본 설정에는 ’모든 변수 포함하기’가 선택되어 있다.Linux 사례 (MX 21)데이터셋의 크기가 작거나, 변수의 갯수가 적은 경우는 크게 무리 없이 ’모든 변수 포함하기’를 이용할 수 있다.Linux 사례 (MX 21)데이터셋에 대한 이해가 깊어지고, 분석의 대상의 명확해지면서 소량의 변수를 중심으로 데이터를 살펴볼 경우도 있다. 이 때는 ‘모든 변수 포함하기’ 설정을 해제하고 필요한 변수들만으로 제한할 수 있다. Prestige 데이터셋에서 교육연수와 수입(연봉)이 직업의 권위에 대한 인식에 어떤 영향을 미치는가를 연구주제로 정했다고 하면, education, income, prestige 등의 변수로 제한할 수 있다:Windows 사례 (10 Pro)Windows 사례 (10 Pro)조금 난이도가 있는 고민을 해보자. 데이터셋 내부를 보고자 한다. 그러나, 데이터셋에 대한 기초적인 이해를 확보한 이후, 범위를 좁혀서 통찰력을 키우기 위하여 다양한 방식으로 데이터셋 내부를 보고자 할 수 있다. 몇 개의 변수를 선택하고, 또 요인형 변수의 어느 수준으로 제한된 범위 안에서 데이터셋 내부를 볼 수 있다. 아래 화면에서 원하는 변수를 선택하고, 을 추가한 것을 볼 수 있다. type (직업 유형)에는 bc, prof, wc 라는 수준이 있다는 것을 미리 알고, white collar 직업군 내부의 정보를 보고자 type == “wc”로 제한하도록 하자.Windows 사례 (10 Pro)아래의 데이터는 Prestige 데이터셋에서 white collar 직업군으로 제한하여, education, income, prestige, women 변수의 사례를 출력한 결과이다.Windows 사례 (10 Pro)","code":"\nrelimp::showData()"},{"path":"data.html","id":"활성화된-데이터셋-선택하기-active-data-set-select-active-data-set","chapter":"6 .  데이터 / Data","heading":"6.6.2 활성화된 데이터셋 선택하기…/ Active data set > Select active data set…","text":"메모리에 여러개의 데이터셋이 올려져 있을 수 있다. 그 중 하나를 선택하는 기능이다. 여러 개의 데이터셋에서 하나를 선택한다는 것은 그 데이터셋을 갖고 분석 작업을 수행하겠다는 것으로 이해할 수 있다. 그 과정에서 매번 그 데이터셋을 지정할 필요가 없다는 것이다.Linux 사례 (MX 21)메모리에 탑재된 데이터셋이 하나인 경우 다음과 같은 경고문을 알림글에서 보게 된다.Linux 사례 (MX 21)아래와 같이 두개의 데이터셋이 메모리에 있다고 가정하자. 이 경우 어느 데이터셋을 선택해서 자료처리와 분석을 진행할 것인가를 결정해야 한다.Linux 사례 (MX 21)아래 화면은 Prestige 데이터셋이 선택된 상황이다. 예(OK)를 누른다.Linux 사례 (MX 21)R Commander 화면에서 R 아이콘 옆에 ‘데이터셋: Prestige’ 이 뜬다.Linux 사례 (MX 21)만약, Moore 데이터셋을 선택하면 ’데이터셋: Moore’로 바뀐다.Linux 사례 (MX 21)Linux 사례 (MX 21)한편, 위와 같은 방식 (Pull-)의 메뉴와 기능 선택을 거치지 않고, 바로 데이터셋을 바꿔가며 활성화시켜 작업하고자 할 때는 마우스를 이용하여 바로 버튼을 누를 수 있다. 파란색의 Prestige 버튼을 눌러보라:Linux 사례 (MX 21)","code":""},{"path":"data.html","id":"활성-데이터셋-다시활력넣기refresh-active-data-set-refresh-active-data-set","chapter":"6 .  데이터 / Data","heading":"6.6.3 활성 데이터셋 다시활력넣기(refresh) / Active data set > Refresh active data set","text":"메모리에 올려진 데이터셋으로 작업하는 경우, 변수와 사례를 추가/삭제하는 경우가 빈번하게 발생한다. 줄여 말하면, 벡터를 만들거나 삭제할 수 있다. 이 경우, 작업이 진행된 객체의 ‘현재’ 정보가 필요한 경우가 있다. 객체의 행과 열, 변수와 사례의 갯수를 업데이터해서 메세지로 알려준다.Linux 사례 (MX 21)","code":""},{"path":"data.html","id":"활성-데이터셋에-관한-도움말-만약-이용가능하다면-active-data-set-help-on-active-data-set-if-available","chapter":"6 .  데이터 / Data","heading":"6.6.4 활성 데이터셋에 관한 도움말 (만약 이용가능하다면) / Active data set > Help on active data set (if available)","text":"R에서 이용가능한 많은 패키지에는 예제용 데이터셋이 많이 포함되어 있다. 이러한 예제용 데이터셋은 대부분 도움말을 갖고 있다. 내장된 예제용 데이터셋을 활성 데이터로 불러온 경우는 이 명령을 유용하게 사용할 수 있다.Linux 사례 (MX 21)carData 패키지의 Prestige 데이터셋이 활성화되었다면, 도움말을 볼 수 있다:Windows 사례?(Prestige) 등으로 입력창에 직접 입력할 수 도 있다.help(\"데이터셋이름\")아래의 참고사항은 Prestige 데이터셋과 유사하게, carData 패키지에 담겨있는 DavisThin 데이터셋이다. 같은 방식으로 연습할 수 있다. DavisThin 데이터셋","code":"\nhelp(\"Prestige\")\n\nhelp(Prestige)"},{"path":"data.html","id":"활성-데이터셋의-변수-active-data-set-variables-in-active-data-set","chapter":"6 .  데이터 / Data","heading":"6.6.5 활성 데이터셋의 변수 / Active data set > Variables in active data set","text":"활성 데이터셋으로 불러온 데이터프레임에는 사례값들을 가지는 변수가 있을 것이다. 변수이름을 목록화시켜 보여주는 기능이다. 예제용 데이터셋은 핵심적인 목적을 위하여 정제된 경우가 대부분이기 때문에 이 기능이 큰 효과를 가지지 않는다. 하지만, 백 개 이상의 변수를 가진 데이터들도 흔한 상황에서 분석을 위한 데이터셋을 불러온 경우, 그리고 변수들이 많은 경우, 이 기능은 효과적으로 사용될 수 있다.Linux 사례 (MX 21)활성 데이터셋에 있는 변수들의 목록이 출력된다. Prestige 데이터셋에는 있는 변수 목록은 다음과 같다:names(데이터셋)","code":"\nlibrary(carData)\ndata(\"Prestige\")\nnames(Prestige)## [1] \"education\" \"income\"    \"women\"     \"prestige\"  \"census\"    \"type\""},{"path":"data.html","id":"사례-이름-정하기-active-data-set-set-case-names","chapter":"6 .  데이터 / Data","heading":"6.6.6 사례 이름 정하기… / Active data set > Set case names…","text":"활성 데이터셋으로 사용되는 데이터프레임은 행과 열을 갖는다. 변수이름이 열을 대표한다. 행의 경우, 일련번호로 사례를 대표하기도하고 고유한 이름을 붙이기도 한다. 이 기능은 행의 이름을 지정하는 것이다.그런데, 이 기능을 사용하기 위해서는 R의 특징을 알아야 한다. 첫째, 사례 이름은 유일해야 한다. 동일한 행의 이름을 넣을 수 없다는 것이다. 이 원칙은 행의 이름으로 사용하기 위해서 변수들에서 하나를 선택해야하는 이 기능 에서 많은 변수들이 이 원칙을 위배하기 때문에 오류문을 생산하는 경우가 흔하다. 행이름은 흔히 key 값이라 부르는 고유성을 가져야 하는데, 이 고유성이 어느 변수의 사례값에서 발견되기는 쉽지 않다.Linux 사례 (MX 21) 메뉴창에서, Prestige의 어떤 변수를 선택하더라도 알림글에 ’오류: 사례 이름은 유일해야 합니다.’는 메세지를 볼 것이다. 숫자 형태의 일련번호 또는 개별화된 문자형 사례 이름에는 중복되는 이름을 넣을 수 없다는 뜻이다.Windows 사례Prestige 데이터셋의 변수이름은 아래와 같이 문자형 정보를 담고 있다. 만약 숫자 형태의 일련번호가 있었다면, 직업 이름을 담고 있는 변수의 사례들을 행 이름으로 바꿀 수 있었을 것이다.Windows 사례row.names(데이터셋이름)","code":""},{"path":"data.html","id":"활성-데이터셋의-하위셋-만들기","chapter":"6 .  데이터 / Data","heading":"6.6.7 활성 데이터셋의 하위셋 만들기…","text":"Data > Active Data set > Subset active data set…데이터셋에 담긴 모든 변수를 분석에 활용하는 경우는 거의 없다. 분석을 위하여 데이터셋의 일부를 사용하는 경우가 일반적이다. 분석에 필요한 변수집단을 선택하여 하위셋을 만드는 기능이다.Linux 사례 (MX 21)변수집단을 선택할 경우는 에 기본지정된 옵션을 해제해야 한다. 물론 변수일부를 선택하는 것과 별개로 사례값(행) 일부를 선택할 수도 있다. 이 경우는 사용자가 직접 에 스크립트를 입력해야 한다. 초보자는 당황할 수 있다.Windows 사례변수 일부나 행 일부를 선택한 후에는 새로운 데이터셋 이름을 입력해야 한다. 그렇지 않으면 기존 데이터셋 이름을 덮어쓰는 위험이 발생한다. 경험적으로 나는 하위데이터셋 이름은 데이터셋.sub1, 데이터셋.sub2 또는 sub1.데이터셋, sub2.데이터셋 등으로 사용하여 원데이터의 이름을 유지시킨다.Prestige 데이터셋에서 변수 네개를 선택한다고 하자. education, income, prestige, type 변수를 선택하고, sub1.Prestige라고 데이터셋의 이름을 붙였다고 하자.Windows 사례그런데, type 변수에는 “prof,” “bc,” “wc”라는 요인(factor)형 정보가 담겨있다. 이 중에서 전문직(prof)에 관한 데이터의 정보만 추출하려면 다음과 같이 조건을 지정해야 한다.Windows 사례다음 화면의 입력창, 출력창, 알림글을 살펴보라. 활성 데이터셋의 이름이 sub1.prof.Prestige라고 바뀌었고, subset()의 인자가 추가되었으며, sub1.prof.Prestige 데이터셋의 행과 열 정보를 찾을 수 있다:Windows 사례Windows 사례subset(데이터셋이름, subset=조건, select=선택된변수목록)","code":""},{"path":"data.html","id":"활성-데이터셋-정렬하기-active-data-set-sort-active-data-set","chapter":"6 .  데이터 / Data","heading":"6.6.8 활성 데이터셋 정렬하기…/ Active Data set > Sort active data set…","text":"데이터셋의 행의 순서를 조정할 수 있다. 이 기능은 특정 변수(들)을 선택하여 증가/감소 등의 순서로 행의 순서를 조정하는 기능이다. 보통 데이터셋에서 필요 변수(사례들)를 선택하여 하위셋을 만들고, 이후 내용적인 이해를 위하여 이 기능을 사용한다.Linux 사례 (MX 21)새롭게 정렬할 변수(들)을 선택하고, 증가/감소 등의 방향을 결정한 후, 새로운 데이터셋의 이름을 입력하게 된다. 입력하지 않으면 현재 사용중인 데이터셋의 이름을 덮어쓰는 위험이 있다. 경험적으로 나의 경우는 데이터셋.sort1, 데이터셋.sort2 등으로 새로운 데이터셋의 이름을 정한다.직종의 권위에 대한 인식의 높낮이를 기준으로 자료를 정렬해보자. prestige 변수를 선택하고, 에서 감소하기를 선택하고, 에서 Prestige.sort1 이라고 입력한다.Windows 사례출력창에 함수의 용례를 확인할 수 있다. 정렬의 기준 변수를 선택하고, order() 함수와 높은 순서로 정렬하는 인자인 ’decreasing=TRUE’를 사용한다. 새로운데이터셋 <- (활성데이터셋, 활성데이터셋[order(기준변수이름, decreasing=TRUE), ]) 등의 함수 용례를 보게된다:Windows 사례R Commander의 상단에 있는 R 아이콘 옆에 <데이터셋: Prestige.sort1>이라고 활성데이텃 이름이 바뀐 것을 보게될 것이다. 어떻게 데이터셋이 정렬되었는지 보려면  버튼을 누른다.Windows 사례두개 이상의 변수를 선택할 경우는 추가 대화창에서 정렬 키의 순서를 결정할 수 있다. 직업의 권위가 높은 순서로, 교육 연수가 높은 순서로 정렬해보자.Windows 사례기준(key)이 되는 변수가 하나일 때와 달리, 둘 이상의 변수를 선택할 때는  창이 등장한다. 앞서 만든 기준을 위하여 prestige를 1로, education을 2로 순서를 바꿔보자.Windows 사례R Commander의 화면에서 활성 데이터셋이 Prestige.sort2로 바뀐다. 그리고 출력창에 새로운 함수 용례가 다음과 같이 등장할 것이다. 새로운데이터셋 <- (활성데이터셋, 활성데이터셋[order(기준변수1이름, 기준변수2이름, decreasing=TRUE), ])Windows 사례를 눌러서 정렬의 결과를 살펴보자. prestige 변수의 사례 값이 68.8인 것이 두개 있다. mining.engineers, gov.administrators 인데, 둘째 기준변수인 education의 높은 순서로 정렬되어 있다. 각각 14.64, 13.11 이다. 앞서 기준변수가 prestige 하나였던 데이터셋과 정렬을 비교해보자. 상단의 Prestige.sort1 데이터셋에는 gov.administrators가 mining.engineers보다 위에 있는 것을 확인할 수 있다.Windows 사례","code":""},{"path":"data.html","id":"활성-데이터셋의-합계-변수-active-data-set-aggregate-variables-in-active-data-set","chapter":"6 .  데이터 / Data","heading":"6.6.9 활성 데이터셋의 합계 변수… / Active data set > Aggregate variables in active data set…","text":"Linux 사례 (MX 21)데이터셋의 변수에는 수치형과 범주형, 문자형 등이 있다. 범주형 변수, 보통 R에서 factor(요인)형이라 부르는 변수를 기준으로 수치형 값들을 묶을 수 있다. 이 기능을 이해하기 위해서는 사용자가 수치형/요인형/문자형 등의 데이터유형에 대하여 알고 있어야 한다.대화창에서 <Aggregate (하나 이상 선택) > 에 등장하는 변수는 요인형 변수이며, 이 변수의 개별 요인형 사례를 기준으로 나머지 변수들의 정보가 묶이게 된다. 아래 화면의 type 변수는 요인형 변수이며, 나머지 변수는 수치형 변수인 것이다. <평균/합/다른 (지정하기)>의 옵션에서 선택할 수 있다. 은 ’AggregateData’로 지정되어 있으나, 사용자가 임의로 바꿔서 사용할 수 있다.Windows 사례예(OK)를 누르면, AggregatedData라는 데이터셋이 생성된다.  를 통해서 내부를 살펴보면, 직업 유형 (type)별로 직업의 권위에 대한 인식(prestige)의 평균 값이 보인다.Windows 사례하나 이상의 수치형 변수를 선택해보자. Prestige 데이터셋에서 세개의 변수, education, income, prestige 를 선택하고 예(OK) 버튼을 누르자.Windows 사례 버튼을 눌러 AggregatedData 내부를 살펴보면, 직업 유형 (type) 별로, 교육 연수(education), 연 수입(income), 권위 인식(prestige)의 평균 값이 확인할 수 있다.Windows 사례아래 입력창은 두개의 합계 데이터셋을 만든다. AggregatedData, AggregatedData1인데, aggregate() 함수가 사용되는 것을 알 수 있다.Windows 사례합계데이터셋 <- aggregate(수치형변수 ~ 요인형변수, data=활성데이터셋, FUN=mean)","code":""},{"path":"data.html","id":"활성-데이터셋에서-행rows-제거하기-active-data-set-remove-rows-from-active-data-set","chapter":"6 .  데이터 / Data","heading":"6.6.10 활성 데이터셋에서 행(rows) 제거하기…/ Active data set > Remove row(s) from active data set…","text":"Linux 사례 (MX 21)활성 데이터셋에서 행을 제거하는 기능이다. 대화창이 열리면 사용자는 제거할 행의 정보를 알고 있는 상황에서 제거를 위한 행을 지정해야 한다. 색인 또는 행의 이름, 행의 일련번호 등을 알고 있어야 한다. 초보자에게는 쉽지 않은 기능이다.Linux 사례 (Ubuntu 18.04)예를 들어 100개의 사례가 일련번호로 지정되어 있다고 가정하자. 1번을 제거하기 위해서는 1을 입력하면 되고, 90번을 제거하기 위해서는 90을 입력하면 되고, 11번에서 20번까지 묶음을 제거하려면 11:20을 입력하면 된다. 만약 1, 11:20, 90을 한꺼번에 제거하려면 어떻해야할까. 1, 11:20, 90을 넣으면 오류문이 출력된다. 오류문을 살펴보면 쉼표(,)가 두 개 찍혀있는 것을 보게될 것이다. 1 11:20 90 으로 입력하면 작동할 것이다. 빈공간(스페이스)이 쉼표 기능을 한다.예를 들어, Prestige 데이터셋은 6개의 변수와 102개의 사례가 있다. 91번부터 102번까지 12개의 사례를 제거하려고 한다. 다음과 같이 ’91:102’를 <제거할 색인 또는 인용된 행(row) 이름> 에 입력한다.Linux 사례 (Ubuntu 18.04)출력창을 살펴보자. 다음과 같은 형식이다:새로운데이터셋 <- 활성데이터셋[-c(제거시작행번호: 제거마지막행번호), ]출력창 아래를 보면 알림글에서 사례의 갯수가 90개로 바뀌었음을 알 수 있다.Linux 사례 (Ubuntu 18.04)이렇게 제거할 행을 지정하면, 행의 일련번호가 바뀌는 것을 기억해야 한다. 으로 데이터셋을 지정하는 것이 필요하다. 이름을 입력하지 않으면 기존 활성 데이터셋 이름을 덮어쓰는 위험이 있다.한편, Prestige 데이터셋의 type 변수에 값이 입력되지 않은 것이 있다. newsboys, babysitters, farmers 라는 사례명을 가진 행의 type 변수 칸에는  으로 되어있다.Linux 사례 (Ubuntu 18.04)babysitters, farmers라는 두개의 사례를 제거해보자. 이 경우는 앞서서 행의 번호를 입력한 것과 달리 “babysitters,” “farmers”라고 입력해야 한다.Linux 사례 (Ubuntu 18.04)다소 생소하고 복잡해 보이는 방식으로 명령문을 입력해야 한다. 논리적으로 보면, 데이터셋의 사례 이름들 중에서 제거하고자 하는 사례 이름들을 찾아서 데이터셋에서 삭제하라는 뜻이다.새로운데이터셋 <- 활성데이터셋[!(rownames(활성데이터셋) %% c(“제거사례이름1,” “제거사례이름2”)), ]Prestige.sub1 데이터셋에서 babysitters, farmers 두개의 사례를 제거했기 때문에, 알림글의 지시문을 보면 사례수는 90개에서 88개로 줄어들었음을 확인할 수 있다.","code":""},{"path":"data.html","id":"활성-데이터셋의-누적변수-active-data-set-stack-variables-in-active-data-set","chapter":"6 .  데이터 / Data","heading":"6.6.11 활성 데이터셋의 누적변수…/ Active data set > Stack variables in active data set…","text":"Linux 사례 (MX 21)변수에는 수치형 변수와 요인(범주)형 변수, 문자형 변수 등이 있다. 수치형 변수이름을 요인화시켜 데이터셋을 재배열화시키는 것이 이 기능이다. , ,  에 미리 추천된 내용이 입력되어 있으나 사용자가 임의로 새롭게 지정할 수 있다. 일반적으로 변수이름을 바꾸기도 한다.Windows 사례재배열된 데이터셋에서 선택된 수치형 변수들은 요인화된 새로운 변수의 요인 이름으로 변하기 때문에 일반적으로 데이터셋의 사례가 크게 증가한다. 변수를 2개 선택하면 2배, 3개 선택하면 3배로 행의 길이가 길어진다. 위의 화면에서 변수 두개, education, income을 선택하고 나머지를 기본설정 그대로 유지하고 예(OK) 버튼을 누른다. 아래 화면처럼 변경 사항들이 등장한다. R 아이콘 옆에<데이터셋: StackedData>으로 활성 데이터셋이 변경되고, 알림글에 StackedData 데이터셋의 행과 열 정보가 등장한다.Windows 사례새로운데이터셋 <- stack(활성데이터셋[, c(“선택된수치형변수1,” “선택된수치형변수2”)])\nnames(새로운데이터셋) <- c(“새로운변수이름1,” “새로운변수이름2(요인형변수)”) 버튼을 누르면 어떤 형식으로 데이터셋이 재구성되는지 확인할 수 있다.Windows 사례Windows 사례Q1) stack() 함수를 이용하여 만든 누적변수는 어떤 분석에 사용되나요?만약 두개 연도의 정보가 여러개의 변수로 저장되어 있다고 가정해보겠습니다. 동일 정보대상에 대한 두개 연도의 정보를 비교하고자 할 때, 두개의 연도별 변수를 하나의 변수로 만들고, 각 연도를 요인형으로 변화시켜 분석하는 것입니다.만약 두개 연도의 정보가 여러개의 변수로 저장되어 있다고 가정해보겠습니다. 동일 정보대상에 대한 두개 연도의 정보를 비교하고자 할 때, 두개의 연도별 변수를 하나의 변수로 만들고, 각 연도를 요인형으로 변화시켜 분석하는 것입니다.유사하게, 남녀 등의 성별로 두개의 변수들이 구성되어 있거나, 1학년~3학년 등으로 중고등학교 학년의 변수들이 있을때, 남녀별-학년별 등으로 수치형 정보의 흐름을 살펴보고, 또 비교분석하고자 할 때 활용되는 데이터의 형식 변경 기능입니다.유사하게, 남녀 등의 성별로 두개의 변수들이 구성되어 있거나, 1학년~3학년 등으로 중고등학교 학년의 변수들이 있을때, 남녀별-학년별 등으로 수치형 정보의 흐름을 살펴보고, 또 비교분석하고자 할 때 활용되는 데이터의 형식 변경 기능입니다.","code":""},{"path":"data.html","id":"결측자료-사례-제거하기-active-data-set-remove-cases-with-missing-data","chapter":"6 .  데이터 / Data","heading":"6.6.12 결측자료 사례 제거하기…/ Active data set > Remove cases with missing data…","text":"데이터셋에 결측자료가 포함되는 경우가 흔하다. Count missing observations관측 결측치 셈하기 Statistics > Summaries > Count missing observations 데이터셋을 구성하는 사례에 값이 입력되지 않은 결측치가 있는 경우가 있다. 어떤 변수에 관측값이 없는 결측치가 있는지를 확인할분석을 앞두고 결측자료(결측데이터)를 어떻게 처리할 것인가가 중요한 경우도 많다. 결측데이터(결측자료)를 제거하는 기능이다. 결측자료가 많은 상황에서 모든 결측자료를 제거하면 사례의 수가 크게 감소하는 위험이 발생하기도 한다. 그래서 결측자료를 제거하기전에 분석에 필요한 하위셋을 먼저 만드는 것을 추천한다.Linux 사례 (MX 21)분석에 사용될 하위셋을 만들고, 결측자료를 제거할 때 /<변수 (하나 이상 선택)>을 결정해야 한다. 선택 이후 새로운 데이터셋 이름을 지정하는 것을 추천한다.Windows 사례출력창의 정보를 보면 na.omit() 함수가 사용된다. 결측치 4개가 제거된다. 행의 수가 102개에서 98개로 축소된다.Windows 사례새로운데이터셋 <- na.omit(활성데이터셋)만약, 데이터셋에서 분석에 포함되는 변수 선정이 분명하고, 선정된 변수들 안에 있을 수 있는 결측치를 제거하고자 할 때는  대신 <변수 (하나 이상 선택) >에서 변수들을 선택하면 된다.Windows 사례출력창을 보면,  의 명령문보다 복잡하다.Windows 사례새로운데이터셋 <- na.omit(활성데이터셋[ , c(“선택변수1,” “선택변수2,” “선택변수3,” “선택변수4”)])","code":""},{"path":"data.html","id":"긴-형식에서-넓은-형식으로-데이터셋-모양바꾸기-active-data-set-reshape-data-set-from-long-to-wide-format","chapter":"6 .  데이터 / Data","heading":"6.6.13 긴 형식에서 넓은 형식으로 데이터셋 모양바꾸기…/ Active data set > Reshape data set from long to wide format…","text":"Linux 사례 (MX 21)간혹, ID를 갖는 주체(subject, 주로 사람 또는 집단의 개체)가 반복적으로 사례 값을 갖는 데이터가 있다. 또는 시간의 경과/어떤 사건 전후에 따른 변화값을 갖는 개체들을 다루는 분야에서는 흔한 데이터 형식일 수 있다.carData 패키지에 포함된 OBrienKaiser, OBrienKaiserLong 데이터를 살펴보자.OBrienKaiser 데이터셋 요약정보OBrienKaiserLong 데이터셋 요약정보먼저 OBrienKaiserLong 데이터를 살펴보자. id 변수를 보면 개체 번호(subject)가 반복됨을 알 수 있다. phase 변수는 pre, post, fup가 hour 변수는 1, 2, 3, 4, 5가 반복된다.Linux 사례 (Ubuntu 18.04)전체 240개의 사례는 16개의 개체, 각 개체별 3개의 단계 (pre, post, fup), 각 단계별 5개의 시간대(1, 2, 3, 4, 5)의 score를 1 ~ 11까지 갖는다. 개체 1 ~ 5는 control 집단으로, 개체 6 ~ 9는 처방 집단, 개체 10 ~ 16는 B 처방 집단이며, 개체는 여성과 남성 각각 8명씩이다.Linux 사례 (Ubuntu 18.04)새롭게 만드는 변형된 데이터셋의 이름은 활성데이터셋이름Wide로 기본 설정되어있다. OBrienKaiserLong 데이터셋에서 개체를 나타내는 id 변수를 <Subject ID 변수(하나선택)>으로, 변화되는 값을 갖는 요인형 정보 hour, phase를 <Within-subjects 요인 (하나 또는 그 이상 선택)>으로, 변화되는 값인 score를 <상황에 의해 다양화되는 변수 (하나 또는 그 이상 선택)>에서 선택한다.Linux 사례 (Ubuntu 18.04)R Commander 맨 아래에 있는 알림글을 살펴보면,주석: 데이터셋 OBrienKaiserLong(은)는 240 행과 6 열을 가지고 있습니다.주석: 데이터셋 OBrienKaiserLongWide(은)는 16 행과 17 열을 가지고 있습니다.라는 정보를 확인할 수 있다. treatment, gender 변수는 그대로 사용되지만, score별로 hour.phase의 요인 값이 표기되는 형식으로 변수가 15개 생성된다. score.hour(1~5).phase(pre, post, fup) 순서가 되겠다.Linux 사례 (Ubuntu 18.04)","code":""},{"path":"data.html","id":"넓은-형식에서-긴-형식으로-데이터셋-모양바꾸기-active-data-set-reshape-data-set-from-wide-to-long-format","chapter":"6 .  데이터 / Data","heading":"6.6.14 넓은 형식에서 긴 형식으로 데이터셋 모양바꾸기…/ Active data set > Reshape data set from wide to long format…","text":"Linux 사례 (MX 21)먼저, 첨부된 carData 패키지에서 OBrienKaiser 패키지를 활성화하자.Data > Read data set attached package… 메뉴를 통해서 carData 패키지선택 후 OBrienKaiser 데이터셋을 찾아 선택할 수 있다.OBrienKaiser 데이터셋은 다음처럼 16개의 행과 17개의 열로 구성되어 있다:Linux 사례 (Ubunt 18.04)17개의 변수에서 pre.(1, 2, 3, 4, 5), post.(1, 2, 3, 4, 5), fup.(1, 2, 3, 4, 5) 등이 15개의 변수를 구성하고 있다.아래 메뉴창에서 <within-subjects 행(row) 요인 이름: >에 pre, post, fup을 포괄하는 phase를, <within-subjects 열(column) 요인 이름: >에 1, 2, 3, 4, 5를 포괄하는 hour를 넣자.<최대 5수준까지 각 within-subjects 요인의 수준 이름을 지정하기> 아래의 행(row) 이름에 pre, post, fup을 넣고, 열(column) 이름에 1, 2, 3, 4, 5을 넣는다. 사례가 담길 곳에는 pre.1, pre.2, pre.3, pre.4, pre.5, post.1, post.2, post.3, post.4, post.5, fup.1, fup.2, fup.3, fup.4, fup.5 을 차례로 찾아 넣는다. 만약 잘못 입력되어 중복이름이 포함되면, 오류: 이중의 행(row) 수준 이름이 있습니다: 라는 오류문을 알림글에서 보게 될 것이다.Linux 사례 (Ubunt 18.04)선택기능 메뉴창을 열고, OBrienKaiserLong1이라고 데이터셋 이름을 넣자. 그리고, <반응변수: >에 score라고 입력하자. carData 패키지에 있는 OBrienKaiserLong과 동일한 구조를 만들고 데이터셋 내부를 비교하기 위함이다.Linux 사례 (Ubunt 18.04)OBrienKaiserLong1의 데이터셋 내부는 다음과 같은 구성이다:Linux 사례 (Ubunt 18.04)OBrienKaiserLong 데이터셋 요약정보","code":""},{"path":"data.html","id":"모든-문자-변수를-요인으로-변환하기-active-data-set-convert-all-character-variables-to-factors","chapter":"6 .  데이터 / Data","heading":"6.6.15 모든 문자 변수를 요인으로 변환하기 / Active data set > Convert all character variables to factors","text":"Linux 사례 (MX 21)메뉴창의 기능이 비활성화되어 있다. 어느 데이터셋이 활성화되었음에도 이 기능이 비활성화되어 있다면, 이 데이터셋에는 문자 변수가 없다는 뜻이다. 예를 들어, carData 패키지에 있는 Prestige 데이터셋에는 문자변수가 없다. 이 경우,  기능이 비활성화 상태에 있다.str() 함수를 이용하여 Prestige 변수의 내부 구조를 살펴보면, 변수 유형에 int, num, factor가 있지만, chr (character)는 없다.Linux 사례 (Ubuntu 18.04)임의로 character 변수를 생성해보자. Prestige 데이터셋의 요인형 type 변수를 문자형으로 변환시킨후 R Commander의 인식 과정을 살펴보자.Prestige\\(문자형변수이름 <- .character(Prestige\\)요인형변수)그리고, 다시 한번 str(Prestige)로 추가된 문자형 변수가 담긴 데이터셋의 내부 구조를 살펴보자. type.chr 라는 문자형 변수의 정보가 마지막에 보일 것이다. 입력창에 다음과 같이 입력한다:Linux 사례 (Ubuntu 18.04)활성화된 데이터셋에 문자형 변수가 포함된 경우,  기능이 활성화된다.Linux 사례 (Ubuntu 18.04)strings2factors() 함수를 사용한다. 마지막 변수 type.chr의 변수 유형을 살펴보라.Linux 사례 (Ubuntu 18.04)","code":""},{"path":"data.html","id":"활성-데이터셋-저장하기-active-data-set-save-active-data-set","chapter":"6 .  데이터 / Data","heading":"6.6.16 활성 데이터셋 저장하기…/ Active data set > Save active data set…","text":"Linux 사례 (MX 21)활성데이터셋을 저장하는 기능이다. 데이터셋과 관련된 여러 작업(하위셋, 결측자료 제거, 누적/합계 등으로 데이터셋 변형 등)을 마친 후 사용하게된다. 대화창에서 저장위치를 결정하고 이름을 정한다. 확장자는 .RData 이다.Linux 사례 (Ubuntu 18.04)save() 함수를 사용한다. Linux 환경에서는아래화면처럼 경로명을 사용한다.save(“활성데이터셋이름,” file=“경로/Prestige.RData”)Linux 사례 (Ubuntu 18.04)","code":"\nsave(..., list = character(),\n     file = stop(\"'file' must be specified\"),\n     ascii = FALSE, version = NULL, envir = parent.frame(),\n     compress = isTRUE(!ascii), compression_level,\n     eval.promises = TRUE, precheck = TRUE)"},{"path":"data.html","id":"활성-데이터셋-내보내기-active-data-set-export-active-data-set","chapter":"6 .  데이터 / Data","heading":"6.6.17 활성 데이터셋 내보내기…/ Active data set > Export active data set…","text":"작업을 마친/ 또는 다른 업무를 위하여 일시적으로 작업한 자료를 하드디스크에 저장하는 경우가 흔하다. .RData로 자료를 저장할 수 있고, 공동작업자와 공유할 수 있지만, 행여 R을 사용하지 않는 분석가/사용자에게 자료를 보내야 하는 경우가 있다. 이 때 사용하는 기능이다.Linux 사례 (MX 21)자료를 텍스트 형식으로 저장하는 경우 다른 도구 사용자(예, 엑셀, PSPP 등)가 쉽게 불러와서 추가 작업을 할 수 있을 것이다. 변수, 행, 문자 등에 대하여 지정하는 옵션이 있다. 결측값 표현 방식도 정할 수 있다. 중요한 것은 필드 구분자이다. 쉼표(,)를 기준으로하는 필드는 .csv로 파일이 저장되고, 여백-탭-세미콜론 등으로 필드 구분자를 지정하면 .txt로 저장된다.Linux 사례 (MX 21)Linux 사례 (MX 21)쉼표(‘,’)를 필드 구분자로 사용하는 경우, 내보내는 데이터셋의 확장자는 .csv로 저장된다.Linux 사례 (MX 21)Linux 사례 (MX 21)write.table() 함수를 사용한다.write.table(활성데이터셋, “경로/파일이름.확장자, sep=”필드구분자”, col.names=, row.names=, quote=, na=“결측치표시”)신경써야 할 것이 하나 더 있다. 대화창에는 등장하지 않지만, 현재 작업하는 컴퓨터의 인코딩 방식으로 자료가 내보내진다. 이 경우 윈도우-맥 애플-리눅스 등의 이기종간 자료 교환에는 인코딩 호환 문제가 발생할 수 있다. Linux는 utf-8, Windows는 cp949를 기본 인코딩으로 사용한다.또 하나, 불편한 점이 있다. 와 관련된 것이다. 를 하고 저장한 파일에는 변수이름이 한자리 앞으로 오는 문제가 있다. 행 이름 위의 빈 칸에 첫 변수 이름이 쓰여지기 때문이다. 엑셀이나 다른 도구에서 행 이름 위에 있는 변수 이름을 이동시켜야 하는 불편함이 있다. 그렇다고 행 이름을 안쓰는 것도 문제가 될 수 있다. 일련번호는 상관없겠으나 사례 이름이 삭제되면 정보량이 축소되기 때문이다. 그래서 사례이름을 추가적인 변수명으로 사용하는 꼼수가 흔한 상황이다.","code":"\nwrite.table(x, file = \"\", append = FALSE, quote = TRUE, sep = \" \",\n            eol = \"\\n\", na = \"NA\", dec = \".\", row.names = TRUE,\n            col.names = TRUE, qmethod = c(\"escape\", \"double\"),\n            fileEncoding = \"\")"},{"path":"data.html","id":"활성-데이터셋-변수-관리-manage-variables-in-active-data-set","chapter":"6 .  데이터 / Data","heading":"6.7 활성 데이터셋 변수 관리 / Manage variables in active data set","text":"","code":""},{"path":"data.html","id":"변수를-다시-코딩하기-manage-variables-in-active-data-set-recode-variables","chapter":"6 .  데이터 / Data","heading":"6.7.1 변수를 다시 코딩하기…/ Manage variables in active data set > Recode variables…","text":"Linux 사례 (Ubuntu 18.04)기존 변수를 이용하여 새로운 변수를 만들 수 있다. R Commander에서 이 기능은 일반적으로 수치형 변수를 요인형으로 바꾸는데 사용된다. <(각각의) 새로운 변수를 요인으로 만들기>에 선택이 되어 있는 것은 요인형으로 만드는 과정이다.물론 수치형 변수의 사례값들을 다른 값으로 변환시킬수도 있다. 이 기능을 이해하기 위해서는 <“다시 코딩하기” 지시문 입력하기>에 대한 정확한 사용법을 익히는 것이 필수적이다. 초보자에게는 쉽지 않다. 하지만, 논리적으로 이해한다면 차후에 큰 어려움은 없을 것이다.Linux 사례 (Ubuntu 18.04)예를 들어 연령과 같은 수치 정보를 담은 변수가 있다고 하자.10세 구간으로 바꾸려고 할 때, 10대, 20대, 30대, 40대, 50대, 60대, 70대 이상 등으로 사용할 수 있다. 때로는 65세이상으로 마지막 구간을 사용할 수 있다. 태어난 후 10세가 아닌 아이들을 배제시키기도 한다. 선거와 같은 정치적인 이슈에 대한 입장에서 20대 이상부터 시작하기도 한다. 이 경우 수치형 정보를 구간으로 바꾸어 요인화 시키는 과정이 필요하다.때로는 소득과 관련하여 상-중-하 등의 3구간으로 나누는 것도 흔하다. 아래의 예와 같이 사용할 수 있다.Prestige 데이터셋에 있는 수치형 변수 education의 구간을 만들어 사례값들을 넣고 요인형로 변수로 만들고자 한다. 아래와 같이 <‘다시 코딩하기’ 지시문 입력하기>에 입력할 수 있다. 1부터 6까지는 elementary로, 6.01에서 9까지는 middle로 , 9.01에서 12까지는 high로, 12.01에서 16까지 univ라는 구간명을 만들어 넣을 수 있다.Linux 사례 (Ubuntu 18.04)주의점으로, ’다시코딩하기’지시문에 오직 큰 따옴표(” “)를 사용해야 한다. 작은 따옴표를 사용하면 알림글에 오류가 뜬다: 오류: ’다시코딩하기’지시문에 오직 큰 따옴표(” “) 사용하기Prestige 데이터셋에 있는 수치형 변수 education, income을 구간을 정해서 나누고 요인형으로 바꿔서 education.level, income.level 이라고 변수명을 만든 명령문의 출력 결과이다.Linux 사례 (Ubuntu 18.04)","code":"1:10000 = \"low\"\n10001:20000 = \"middle\"\n20001:max(데이터셋$변수) = \"high\" \nelse = NA"},{"path":"data.html","id":"새로운-변수-계산하기-manage-variables-in-active-data-set-compute-new-variable","chapter":"6 .  데이터 / Data","heading":"6.7.2 새로운 변수 계산하기…/ Manage variables in active data set > Compute new variable…","text":"Linux 사례 (Ubuntu 18.04)활성 데이터셋에 있는 변수들을 활용하여 새로운 변수를 생성하는 많은 방법이 있다. <Compute new variable…>은 일반적으로 수치형 사례를 갖고 있는 변수(들)을 사칙연산, log, 제곱근 등의 계산기법을 활용하여 새롭게 만드는 것이다. 계산에 의해서 새롭게 생성되는 사례들을 새로운 변수이름으로 저장할 수 있다. variable 이라는 추천된 변수 이름이 있지만, 사용자가 직접 지정할 수 있다.Prestige 데이터셋에 있는 income 변수를 log를 이용하여 변환해보자.Linux 사례 (Ubuntu 18.04)다음과 같은 명령문으로, income.log라는 변수가 새롭게 생성된다.Prestige$income.log <- (Prestige, log(income))","code":""},{"path":"data.html","id":"관찰-수를-데이터셋에-더하기-manage-variables-in-active-data-set-add-observation-number-to-data-set","chapter":"6 .  데이터 / Data","heading":"6.7.3 관찰 수를 데이터셋에 더하기 / Manage variables in active data set > Add observation number to data set","text":"Linux 사례 (Ubuntu 18.04)데이터프레임 형식의 데이터셋은 행과 열로 구성된다. 1부터 행의 길이에 해당되는 값을 일련번호 식으로 맨 앞부터 붙인 사례값을 가진 변수를 만드는 기능이다. 변수이름은 ObsNumber로 자동 정해진다.Prestige$ObsNumber <- 1:102이렇게 일련번호를 가진 변수(ObsNumber)는 어떻게 활용될 수 있을까. 특정 사례(행)에 지정된 고유값을 변수로 전환하고, $ObsNumber를 행의 고유값으로 사용할 수도 있다. 이 작업은 데이터셋을 .csv, .txt 등으로 내보낼 때 활용되기도 한다.Linux 사례 (Ubuntu 18.04)","code":""},{"path":"data.html","id":"변수-표준화하기-manage-variables-in-active-data-set-standardize-variables","chapter":"6 .  데이터 / Data","heading":"6.7.4 변수 표준화하기…/ Manage variables in active data set > Standardize variables…","text":"Linux 사례 (Ubuntu 18.04)활성데이터셋에 있는 수치형 변수들은 서로 다른 기준의 값들을 가질 것이다. 정수형 값도 있을 수 있다. 크기도 다를 수 있다. 만약 크기와 기준이 다른 수치형 변수들을 결합해서 분석 작업을 진행할 경우, 영향력 순위를 확인하는데 불편할 수 있다.예를 들어서, 시험과목 중에서 어느 것이 난이도가 높은가를 알려면 평균점수를 확인할 것이고, 같은 점수라 하더라도 어느 과목점수가 더 높은가를 확인하려면, 이른바 상대평가를 하려면 척도 계산을 해야할 것이다. 변수 표준화하기는 척도 함수를 사용하여 상대화된 기준으로 사례 값을 재조정하는 기능이다. 대화창에서 수치형 변수를 선택하고 변수를 표준화하면, 기존의 변수명 앞에 Z가 붙는, Z.변수라는 새로운 표준화 값을 갖는 변수가 생성된다.Prestige 데이터셋에서 교육연수(education)와 수입(income)이 직업의 권위에 대한 사회적 인식(prestige)에 어떤 영향을 미치는가에 대한 문제의식에 대한 통계학적 접근을 위하여 세개의 수치형 변수를 표준화하려고 한다.Linux 사례 (Ubuntu 18.04)R Commander에 있는  버튼을 눌러 Prestige 데이터셋의 내부를 살펴보자. Z.prestige, Z.income, Z.education 이라는 세개의 변수가 생성되었음을 알 수 있다.Linux 사례 (Ubuntu 18.04)","code":"\nPrestige <- local({\n  .Z <- scale(Prestige[,c(\"education\",\"income\",\"prestige\")])\n  within(Prestige, {\n    Z.prestige <- .Z[,3]\n    Z.income <- .Z[,2]\n    Z.education <- .Z[,1] \n  })\n})"},{"path":"data.html","id":"수치-변수를-요인으로-변환하기-manage-variables-in-active-data-set-convert-numeric-variable-to-factor","chapter":"6 .  데이터 / Data","heading":"6.7.5 수치 변수를 요인으로 변환하기…/ Manage variables in active data set > Convert numeric variable to factor…","text":"Windows 사례수치 변수를 요인으로 전환해야 하는 경우가 흔하다. 남성을 1, 여성을 2로 입력한 엑셀 자료를 불러오는 경우, 1과 2를 요인으로 재지정해야 남성, 여성의 의미를 담은 변수로 활용할 수 있다. 일반적으로 이런 변수를 명목변수(nominal variable)이라고 하지만, R에서는 factor (variable)로 부른다. 간혹 요인분석에 익숙한 사용자가 factor와 factor analysis를 헷갈려하는 경우가 있기도 하다.수치 변수인가? 요인 인가? 변수의 유형에 대한 이해가 필요한 이유는 실용적으로 볼 때, 시각화와 연결된 작업때문이다. 줄여 말하면, 수치 변수로 표현할 수 있는 시각화와 요인으로 표현할 시각화 기법이 다르다고 할 수 있다. 어려운가? 간단히 예를 들면, 히스토그램은 수치 변수의 시각화 기법이다. 그러나, 막대 차트는 요인의 시각화 기법이다. 수치 변수는 더할 수 있고, 요인은 셀 수 있다.먼저 datasets 패키지에 있는 airquality 데이터셋을 활성화시키자.작업창에는 ‘다중 변수를 위한 새로운 변수 이름 또는 접미사: ’ 이라는 조건입력칸이 있다. 변수 이름을 덮어쓰면서, 바뀐 변수 유형을 기억하기도 하지만, 나는 흔히 _f를 추가한다. 원래의 수치 변수 옆에 _f가 붙어있는 요인을 만들어 그 차이를 기억하는 방식이다.Linux 사례 (MX 21)데이터셋 <- (데이터셋, {요인형변수이름 <- .factor(수치형변수) })참고로, 간혹 다음의 오류 지시문 “수준의 숫자 ( ) (이)가 너무 넓습니다”이 아래 알림글에 나올 수 있다. 이것은 요인화로 만들어지는 수준의 갯수가 너무 많다는 의미이다. 그래서 요인 수준 이름을 일일이 넣을 추가 작업창을 R Commander에서 만들 수 없다는 뜻이다. 작업창의 요인 수준에서 “수준 이름 사용하기”를 선택 (기본선택사항)해서 이와 같은 오류 지시문이 나오는 경우, 그 아래에 있는 “숫자 사용하기” 선택을 하면 된다.아래 출력창에서 airquality 데이터셋의 Month 변수와 month.f 변수를 비교해보자. Month 변수는 수치형 변수로서 최소, 평균, 최대 값을 갖고 있는 반면에, month.f 변수는 5에 31, 7에 31, 9에 30 등의 갯수를 갖고 있다.Linux 사례 (MX 21)","code":"\nairquality <- within(airquality, { month.f <- as.factor(Month) })"},{"path":"data.html","id":"문자-변수를-요인으로-변환하기-manage-variables-in-active-data-set-convert-character-variables-to-factors","chapter":"6 .  데이터 / Data","heading":"6.7.6 문자 변수를 요인으로 변환하기…/ Manage variables in active data set > Convert character variables to factors…","text":"Linux 사례 (MX 21)활성화된 데이터셋이 있는 경우에도 <문자 변수를 요인으로 변환하기…> 기능이 비활성화되어있는 때가 있다. 이 상황은 활성화된 데이터셋에 문자 변수가 없는 경우이다.문자 변수를 갖고 있는 데이셋을 만들어(또는 불러와) 이 기능을 활성화시키자. carData 패키지의 Prestige 데이터셋을 Prestige.csv 파일로 내보냈다고 하자.Export active data set…참고로 이 블로그에 Prestige.csv 파일을 올려놓았다. 바로 내려받아 사용할 수 있다.Prestige_csv이 파일을  기능을 통하여 다시 불러보자. 갖고 있는 어떤 .csv파일을 불러오는 것과 같은 사례로 이해할 수 있다. 이 경우는 Data > 데이터 불러오기 > TXT 파일, 클립보드 또는 URL에서… 의 기능을 사용하는 것이다.text file, clipboard, URL…불러올 데이터셋 파일의 이름은 Prestige.csv, 저장될 데이터셋 객체의 이름을 Prestige_csv라고 하자.에 있는 클릭을 제거하자.필드 구분자를 <쉼표 [,]>로 선택하자.그리고 새롭게 열리는 디렉토리 창에서 Prestige.csv 파일을 찾아 선택하자.Linux 사례 (MX 21)Prestige 데이터셋과 달리, Prestige_csv 데이터셋의 type 변수는 요인이 아닌 문자형이다.Linux 사례 (MX 21)문자형 변수가 포함된 Prestige_csv 데이터셋이 활성화되면, <문자 변수를 요인으로 변환하기…> 기능이 활성화된다.Linux 사례 (MX 21)문자형 변수 목록에 type 변수가 보인다. 에 변환시킬문자형변수.f를 넣고, 기존 type 변수와 비교해보자. 예(OK) 버톤을 누른다.Linux 사례 (MX 21)활성데이터셋 <- within(활성데이터셋, { 새로운변수이름 <- .factor(변환시킬문자형변수) })Prestige_csv <- within(Prestige_csv, { type.f <- .factor(type) })\n출력창 아래에 있는 type 변수와 type.f 변수를 비교해보자. type.f 변수는 요인형으로 전환되어 있다.Linux 사례 (MX 21)","code":""},{"path":"data.html","id":"수치-변수-구간만들기-manage-variables-in-active-data-set-bin-a-numeric-variable","chapter":"6 .  데이터 / Data","heading":"6.7.7 수치 변수 구간만들기…/ Manage variables in active data set > Bin a numeric variable…","text":"Linux 사례 (MX 21)수치 변수를 촘촘히 연결된 연속형 변수라고 생각해보자. 선 그래프로 시각화 할 수 있을 것이다. 연속적인 값들을 구간으로 나누어 쪼개어 배치하는 기법이 필요할 수 있다. 흔히 연령을 연령대로 만드는 작업이 이것에 속한다.구간을 만드는 작업창에는 몇 몇 검토 사항의 조건들을 묻는 내용이 있다.\n1. 몇 개의 구간을 만들 것인가?\n2. 구간 수준의 이름을 어떻게 정할 것인가?\n3. 구간화 작업을 넓이로, 계산치로, 군집화로 할 것인가?몇 개의 구간을 만들 것인가라는 질문에 답을 결정하려면, 아마도 이 수치형 변수의 요약적 특징을 미리 알고 있어야 할 것이다. 그리고, 구간화 작업에서 동일-넓이 구간이 기본 선택사항인데, 다른 선택을 하려면, 데이터에 대한 이해와 높은 분석적 통찰력이 요구될 것이다.carData 패키지에 있는 Prestige 데이터셋의 수입(연봉)을 뜻하는 income 변수를 구간으로 쪼개자. income 변수는 수치형 변수이다. 102개의 income 변수의 사례 요약은 다음과 같다:Linux 사례 (MX 21)income.bin1, income.bin2, income.bin3 등 세개의 income 변수 구간화 작업을 하자. 구간의 수는 3개로, 수준 이름은 lower, middle, upper로 정하자. 구간화 기법은 bin1은 동일-넓이 구간, bin2는 동일-계산치 구간, bin3는 Natural breaks(K-평균 군집화에서)을 각각 선택하자.Linux 사례 (MX 21)Linux 사례 (MX 21)아래 출력창에서 각각의 구간화 인자 method와 세 변수의 요인 갯수를 살펴보라.Linux 사례 (MX 21) 버튼을 눌러 Prestige 데이터셋에서 income.bin1, income.bin2, income.bin3의 요인들을 살펴보라.Linux 사례 (MX 21)","code":""},{"path":"data.html","id":"요인-수준-재정렬하기-manage-variables-in-active-data-set-reorder-factor-levels","chapter":"6 .  데이터 / Data","heading":"6.7.8 요인 수준 재정렬하기…/ Manage variables in active data set > Reorder factor levels…","text":"Linux 사례 (MX 21)carData 패키지의 Prestige 데이터셋을 이용해서  기능을 사용해보자. Prestige 데이터셋에 있는 직업유형을 나타내는 type 변수는 bc, prof, wc라는 요인 수준을 갖고 있다. blue collar, white collar, professional 블루칼라, 화이트칼라, 전문직 등을 나타낸다. 그런데, bc, prof, wc는 순서가 있는 요인 수준이 아니다. 요인의 알파벳 순서대로 1, 2, 3 등이 부여된 요인 수준이다.첫째로 bc, wc, prof로 수준의 순서를 바꿔보자. 먼저 type1으로 요인형 변수의 이름을 새롭게 정해보자.Linux 사례 (MX 21)bc에 1, wc에 2, prof에 3을 넣는다.Linux 사례 (MX 21)그렇다면, 둘째로 bc, wc, prof 순서를 정해놓고 각각 1, 2, 3을 지정해서 요인 수준을 정해보자. 정확히는 bc < wc < prof 순서를 정해놓고, 각각 1, 2, 3을 부여하는 것이다. type2라는 요인형 변수로 지정한다.Linux 사례 (MX 21)Linux 사례 (MX 21)str() 함수를 이용하여, type, type1, type2 변수의 구조를 살펴보자. 그리고 factor() 함수의 용례를 다시 살펴보라. levels, ordered 라는 인자가 의미하는 것을 알게될 것이다.Linux 사례 (MX 21)","code":"\nPrestige$type1 <- with(Prestige, factor(type, levels=c('bc','wc','prof')))\n\nPrestige$type2 <- with(Prestige, factor(type, levels=c('bc','wc','prof'), ordered=TRUE))\n\nstr(Prestige$type)\nstr(Prestige$type1)\nstr(Prestige$type2)"},{"path":"data.html","id":"사용하지-않은-요인-수준-누락시키기-manage-variables-in-active-data-set-drop-unused-factor-levels","chapter":"6 .  데이터 / Data","heading":"6.7.9 사용하지 않은 요인 수준 누락시키기…/ Manage variables in active data set > Drop unused factor levels…","text":"Linux 사례 (MX 21)carData 패키지에 있는 Prestige 데이터셋에는 type 이라는 요인형 변수가 있다. bc, prof, wc 라는 수준을 갖고 있다. blue collar, professional, white collar를 뜻한다. 블루칼라와 화이트칼라 그룹의 수입(연봉), 학력(교육연수), 직업권위를 뜻하는 income, education, prestige 라는 변수의 정보를 비교하고자 한다. 먼저 prof 수준을 데이터셋에서 제거해야 할 것이다.Linux 사례 (MX 21)참고로, 을 보다 꼼꼼히 살펴보라아래 출력창에서 Prestige 데이터셋의 type, Prestige.sub1 데이터셋의 type 요약 정보를 비교해보라. Prestige 데이터셋의 type 변수에는 prof 수준을 가진 31개의 사례가 사라졌지만, prof 수준은 아직 남아있다.Linux 사례 (MX 21)Prestige.sub1의 type 변수에서 사용되지 않는 수준인, 다른말로 사례를 갖고 있는 않는 수준인 prof를 제거하자. 그래서 bc, wc 두개의 수준을 비교하는 정보를 만들고, 분석한다고 하자. <수준을 누락시킬 요인 (하나 이상 선택)>에서 type을 선택하고, 예(OK) 버튼을 누른다.Linux 사례 (MX 21)그리고 아래 화면에서 OK 버튼을 누른다.Linux 사례 (MX 21)출력창에서 사용하지않는 요인 수준이 있는 변수정보와 누락시킨 이후의 변수정보를 찾아 비교해보라. type변수에 사례가 없는 prof 수준이 제거된 후 bc와 wc 두개 요인만 보일 것이다.Linux 사례 (MX 21)","code":"Prestige.sub1 <- subset(Prestige, subset=type !=\"prof\")       [O]\n\nPrestige.sub1 <- subset(Prestige, subset=type=!prof)          [X]\nPrestige.sub1 <- subset(Prestige, subset=type=!\"prof\")        [X]\nPrestige.sub1 <- within(Prestige.sub1, {\n  type <- droplevels(type) \n})"},{"path":"data.html","id":"요인-대비-정의하기-manage-variables-in-active-data-set-define-contrasts-for-a-factor","chapter":"6 .  데이터 / Data","heading":"6.7.10 요인 대비 정의하기…/ Manage variables in active data set > Define contrasts for a factor…","text":"Linux 사례 (MX 21)요인형 변수의 특징을 수리적으로 다루기 위해서 행렬(매트릭스) 형식으로 재구성하는 경우가 빈번하다. 변수 내부의 기준 수준을 정하거나, 개별 수준들의 특징(사례 갯수, 거리)을 기준으로 행렬을 만드는데 활용되는 선택사항들을 결정한다. Prestige 데이터셋에는 직업 유형을 뜻하는 type 이라는 요인형 변수가 있다.  기능은 요인형 변수에만 해당된다. 다음의 화면에서 선택할 수 있다.Linux 사례 (MX 21)","code":""},{"path":"data.html","id":"변수이름-다시-짓기-manage-variables-in-active-dataset-rename-variables","chapter":"6 .  데이터 / Data","heading":"6.7.11 변수이름 다시 짓기…/ Manage variables in active dataset > Rename variables…","text":"Linux 사례 (MX 21)변수의 이름을 바꿔야할 때 사용하는 기능이다. 이름을 바꿀 변수를 선택하고 예(OK) 단추를 누르면, 다음 창이 뜨는데 여기에서 생각한 새로운 변수 이름을 입력하면 된다.Linux 사례 (MX 21)Linux 사례 (MX 21)names(데이터셋이름)[변수번호] <- c(“새로운변수이름1,” “새로운변수이름2,” “새로운변수이름3”) 등으로 함수가 사용된다.Linux 사례 (MX 21)R Commander 화면에서  버튼을 누르면, 다음과 같이 변수 이름이 바뀐 데이터셋 정보를 보게된다.Linux 사례 (MX 21)","code":"names(Prestige)[c(1, 2, 4)] <- c(\"교육연수\", \"수입\", \"직업권위\")"},{"path":"data.html","id":"데이터셋에서-변수-지우기-manage-variables-in-active-data-set-delete-variables-from-data-set","chapter":"6 .  데이터 / Data","heading":"6.7.12 데이터셋에서 변수 지우기…/ Manage variables in active data set > delete variables from data set…","text":"Linux 사례 (Ubuntu 18.04)잘못 작업된 변수 또는 분석에 필요없는 변수를 삭제하는 기능이다. 삭제하고자 하는 변수를 선택하고 예(OK) 버튼을 누른다.Linux 사례 (Ubuntu 18.04)삭제하기전에 다시 한번 확인하는 질문을 받는다. 예(OK) 버튼을 누른다.Linux 사례 (Ubuntu 18.04)출력창에 아래와 같은 명령문의 내용을 보게 될 것이다. 알림글에는 2개의 변수가 삭제되었음을 알리는 주석이 등장한다.데이터셋 <- within(데이터셋, {삭제될변수 <- NULL })","code":""},{"path":"도구-tools.html","id":"도구-tools","chapter":"7 .  도구 / Tools","heading":"7 .  도구 / Tools","text":"","code":""},{"path":"도구-tools.html","id":"도구-패키지-적재하기","chapter":"7 .  도구 / Tools","heading":"7.1 도구 > 패키지 적재하기…","text":"도구 > 패키지 적재하기... / Tools > Load package(s)...R에 설치된 패키지 목록 창이 등장한다. 원하는 패키지(들)을 찾아서 선택하고 예(OK) 버튼을 누른다. 아래 화면은 vcd 패키지를 설치하는 사례이다.vcd 패키지를 적재(loading) 하는데, grid 패키지가 함께 탑재된 것을 출력창에서 확인할 수 있다.\ngrid는 vcd 패키지가 제작되는데 의존한 패키지임을 의미한다.\n어느 패키지가 메모리에 적재되는 과정은 그 패키지가 의존하는 패키지의 자동적인 적재를 동반한다.","code":"\nlibrary(vcd) # 썝븯뒗 뙣궎吏 쟻옱븯湲NA"},{"path":"도구-tools.html","id":"도구-rcmdr-플러그인-적재하기","chapter":"7 .  도구 / Tools","heading":"7.2 도구 > Rcmdr 플러그인 적재하기…","text":"도구 > Rcmdr 플러그인 적재하기... / Tools > Load Rcmdr plug-(s)....R Commander는 플러그인을 통하여 많은 기능이 확산되는 생태계를 갖고 있다. Rcmdr 플러그인을 사용하기 위해서는 먼저 RcmdrPlugin.이름 을 가진 패키지가 설치되어 있어야 한다.아래와 같이 여러개의 RcmdrPlugin.이름을 가진 플러그인들이 설치되었다고 가정하자. 그 중에서 RcmdrPlugin.KMggplot2를 설치해보자. 적재할 플러그인을 찾아서 선택하고, 예(OK) 버튼을 누른다.Linux 사례 (MX 21)Linux 사례 (MX 21)\n아래 화면은 플러그인이 적재되기 이전에 새로운 환경이 등장하는 조건을 환기시키는 질문을 담고 있다. R Commander가 사라졌다가 다시 등장하게된다.Linux 사례 (MX 21)새롭게 등장하는 R Commander 화면 상단을 살펴보자. 와  사이에 메뉴 하나가 추가됨을 알 수 있다. 적재된 플러그인이 메뉴 창에 등장한다.","code":"\ninstall.packages()  # RcmdrPlugin.씠由<84> 李얘린NA"},{"path":"도구-tools.html","id":"도구-선택-기능","chapter":"7 .  도구 / Tools","heading":"7.3 도구 > 선택 기능…","text":"도구 > 선택 기능... / Tools > Options...Linux 사례 (MX 21) 창에서 스크립트 창 높이 (줄)과 출력물 창 높이 (줄) 을 조정할 수 있다. 자주 R Commander를 사용하다보면, 하나의 명령문을 실행한 다음 얻게되는 출력물을 출력창에서 한번에 보지 못할 때 불편함을 느낀다. 주로 통계적 모델의 요약 정보를 확인하고자 할 때 발생하는 현상이다.아래 창은 스크립트 창 높이 (줄)을 7로, 출력물 창 높이 (줄)을 25로 변경한 사례이다.Linux 사례 (MX 21)스크립트 창과 출력 창의 높이를 조정한 결과는 아래와 같은 비율로 나타난다:","code":""},{"path":"도구-tools.html","id":"글꼴fonts","chapter":"7 .  도구 / Tools","heading":"7.4 글꼴(Fonts)","text":"R은 사용 컴퓨터에 내장된 여러 폰트를 사용할 수 있다. R Commander에서 폰트를 고민할 때는 그래프 출력에 어떤 폰트를 사용할까와 화면 출력용으로 어떤 폰트가 좋을까 등일 것이다.R Commander에는 ,  등의 버튼이 화면 상단에 있다. 활성데이터셋의 내부를 들여다 볼 때, 편집할 때 사용한다. 그런데 간혹 사전에 기본으로 지정된 폰트의 특징 때문에 데이터셋의 내부 정보들의 형식적 일관성(값의 정렬)이 흐트러져 보이는 경우가 있다. 예를 들어, 리눅스에서 한글용으로 사용하는 나눔고딕은 한글 R Commander환경에서 기본 폰트로 사용되는데  버튼을 누르고 내부 정보를 보면 정렬이 일정하지 않는 것을 알 수 있다. 흔히 고정크기를 가진 폰트인가 아닌가에 따른 출력상의 차이라고 한다.사례 값들의 정렬이 일정하지 않아 데이터셋 내부를 보기가 불편하다면, 경험적으로 나는 Courier로 바꿔준다. 일정한 정렬로 변환될 것이다.","code":""},{"path":"도구-tools.html","id":"toolssave-rcmdr-options","chapter":"7 .  도구 / Tools","heading":"7.5 Tools/Save Rcmdr options…","text":"","code":""},{"path":"도구-tools.html","id":"toolsmanage-mac-os-x-app-nap-for-r.app","chapter":"7 .  도구 / Tools","heading":"7.6 Tools/Manage Mac OS X app nap for R.app…","text":"","code":""},{"path":"도구-tools.html","id":"toolsinstall-auxiliary-software","chapter":"7 .  도구 / Tools","heading":"7.7 Tools/Install auxiliary software…","text":"","code":""},{"path":"도움말-help.html","id":"도움말-help","chapter":"8 .  도움말 / Help","heading":"8 .  도움말 / Help","text":"","code":""},{"path":"도움말-help.html","id":"commander-help-0","chapter":"8 .  도움말 / Help","heading":"8.1 Commander help (0)","text":"","code":""},{"path":"도움말-help.html","id":"introduction-to-the-r-comma..-0","chapter":"8 .  도움말 / Help","heading":"8.2 Introduction to the R Comma.. (0)","text":"","code":""},{"path":"도움말-help.html","id":"r-commander-website-0","chapter":"8 .  도움말 / Help","heading":"8.3 R Commander website (0)","text":"","code":""},{"path":"도움말-help.html","id":"about-rcmdr-0","chapter":"8 .  도움말 / Help","heading":"8.4 About Rcmdr (0)","text":"","code":""},{"path":"도움말-help.html","id":"r-commander-hex-sticker","chapter":"8 .  도움말 / Help","heading":"8.5 R Commander hex sticker","text":"선택하면 아래와 같은 이미지 파일이 등장한다:","code":""},{"path":"도움말-help.html","id":"help-on-active-data-set-if..-0","chapter":"8 .  도움말 / Help","heading":"8.6 Help on active data set (if.. (0)","text":"","code":""},{"path":"도움말-help.html","id":"start-r-help-system-0","chapter":"8 .  도움말 / Help","heading":"8.7 Start R help system (0)","text":"","code":""},{"path":"도움말-help.html","id":"r-website-0","chapter":"8 .  도움말 / Help","heading":"8.8 R website (0)","text":"","code":""},{"path":"도움말-help.html","id":"using-r-markdown-0","chapter":"8 .  도움말 / Help","heading":"8.9 Using R Markdown (0)","text":"","code":""},{"path":"데이터셋-datasets.html","id":"데이터셋-datasets","chapter":"9 .  데이터셋 / datasets","heading":"9 .  데이터셋 / datasets","text":"","code":""},{"path":"데이터셋-datasets.html","id":"prestige---cardata-prestige","chapter":"9 .  데이터셋 / datasets","heading":"9.1 Prestige - carData > Prestige","text":"carData 패키지에 있는 Prestige 데이터셋을 .csv로 저장하여 내보낼 수 있다.다운로드참조: 활성 데이터셋 내보내기…","code":"\ndata(Prestige, package=\"carData\")\nhelp(\"Prestige\")"},{"path":"데이터셋-datasets.html","id":"moore---cardata-moore","chapter":"9 .  데이터셋 / datasets","heading":"9.2 Moore - carData > Moore","text":"상기 명령 실행을 통해서 Moore 데이터셋에 대한 상세 정보를 얻을 수 있다.\nMoore data frame 45 rows 4 columns.\ndata subjects social-psychological experiment,\nfaced manipulated disagreement partner either\nlow high status. subjects either conform \npartner’s judgment stick judgment.\n\ndata frame contains following columns:\n\npartner.status\n\n\nPartner’s status. factor levels:\nhigh,\nlow.\n\n\nPartner’s status. factor levels:\nhigh,\nlow.\n\nconformity\n\n\nNumber conforming responses 40 critical trials.\n\n\nNumber conforming responses 40 critical trials.\n\nfcategory\n\n\nF-Scale Categorized.\nfactor levels (note levels order):\nhigh,\nlow,\nmedium.\n\n\nF-Scale Categorized.\nfactor levels (note levels order):\nhigh,\nlow,\nmedium.\n\nfscore\n\n\nAuthoritarianism: F-Scale score.\n\n\nAuthoritarianism: F-Scale score.\n\nMoore, J. C., Jr. Krupat, E. (1971)\nRelationship source status, authoritarianism conformity \nsocial setting. Sociometry 34, 122–134.\n\nPersonal communication\nJ. Moore, Department Sociology, York University.\n\nFox, J. (2016)\nApplied Regression Analysis Generalized Linear Models,\nThird Edition. Sage.\n\nFox, J. Weisberg, S. (2019)\nR Companion Applied Regression, Third Edition, Sage.\n","code":"\ndata(Moore, package=\"carData\")\nhelp(\"Moore\")\nMoore\n"},{"path":"데이터셋-datasets.html","id":"obrienkaiser---cardata-obrienkaiser","chapter":"9 .  데이터셋 / datasets","heading":"9.3 OBrienKaiser - carData > OBrienKaiser","text":"carData 패키지에 있는 OBrienKaiser 데이터셋이다. carData 패키지는 Rcmdr 패키지가 호출될 때 자동으로 함께 호출되기 때문에 R Commander에서 carData 패키지에 포함된 데이터셋들을 자유롭게 호출할 수 있다.Read data set attached package…OBrienKaiser 데이터셋은 R Commander에서 활성 데이터셋으로 이용할 수 있다. 그러나 ‘통계 > 요약 > 활성데이터셋’ 기능은 사용할 수 없다. 다음과 같은 오류문을 Rgui 창에서 보게된다.Error sprintf(gettextRcmdr(“%d variables data set %s.want proceed?”), :\n’%d’는 유효하지 않은 포맷입니다; 문자형 객체들에는 포맷 %s를 사용해주세요입력창에 str(OBrienKaiser) 함수를 입력하고 실행하여 OBrienKaiser 데이터셋의 구조를 살펴보자.입력창에 summary(OBrienKaiser) 함수를 입력하고 실행하여 요약 정보를 살펴보자.\ncontrived repeated-measures data taken \nO’Brien Kaiser (1985). data imaginary study \n16 female male subjects, divided three treatments, measured\npretest, postest, follow-session; session, \nmeasured five occasions intervals one hour. design, therefore, \ntwo -subject two within-subject factors.\n\ncontrasts treatment factor set -2, 1, 1 \n0, -1, 1. contrasts gender factor set \ncontr.sum.\n\ndata frame 16 observations following 17 variables.\n\ntreatment\n\n\nfactor levels control B\n\n\nfactor levels control B\n\ngender\n\n\nfactor levels F M\n\n\nfactor levels F M\n\npre.1\n\n\npretest, hour 1\n\n\npretest, hour 1\n\npre.2\n\n\npretest, hour 2\n\n\npretest, hour 2\n\npre.3\n\n\npretest, hour 3\n\n\npretest, hour 3\n\npre.4\n\n\npretest, hour 4\n\n\npretest, hour 4\n\npre.5\n\n\npretest, hour 5\n\n\npretest, hour 5\n\npost.1\n\n\nposttest, hour 1\n\n\nposttest, hour 1\n\npost.2\n\n\nposttest, hour 2\n\n\nposttest, hour 2\n\npost.3\n\n\nposttest, hour 3\n\n\nposttest, hour 3\n\npost.4\n\n\nposttest, hour 4\n\n\nposttest, hour 4\n\npost.5\n\n\nposttest, hour 5\n\n\nposttest, hour 5\n\nfup.1\n\n\nfollow-, hour 1\n\n\nfollow-, hour 1\n\nfup.2\n\n\nfollow-, hour 2\n\n\nfollow-, hour 2\n\nfup.3\n\n\nfollow-, hour 3\n\n\nfollow-, hour 3\n\nfup.4\n\n\nfollow-, hour 4\n\n\nfollow-, hour 4\n\nfup.5\n\n\nfollow-, hour 5\n\n\nfollow-, hour 5\n\nO’Brien, R. G., Kaiser, M. K. (1985)\nMANOVA method analyzing repeated measures designs: extensive primer.\nPsychological Bulletin 97, 316–333, Table 7.\n","code":"OBrienKaiser\nOBrienKaiser\ncontrasts(OBrienKaiser$treatment)\ncontrasts(OBrienKaiser$gender)\n"},{"path":"데이터셋-datasets.html","id":"obrienkaiserlong---cardata-obrienkaiserlong","chapter":"9 .  데이터셋 / datasets","heading":"9.4 OBrienKaiserLong - carData > OBrienKaiserLong","text":"OBrienKaiserLong 데이터셋은 carData 패키지에 포함되어 있다.\ncarData 패키지는 Rcmdr 패키지가 호출될 때 자동으로 함께 호출되기 때문에, OBrienKaiserLong 데이터셋을 R Commander에서 메뉴기능을 통해서 활성데이터셋으로 불러올 수 있다.통계> 요약 > 활성 데이터셋 메뉴를 통하여 OBrienKaiserLong 데이터셋의 요약정보를 확인할 수 있다.Windows 사례summary() 함수를 이용한 것을 알 수 있다.Windows 사례str() 함수를 활용하여 입력창에 직접 str(OBrienKaiserLong)을 입력하고 실행하여, 출력창에 다음과 같이 OBrienKaiserLong 데이터셋의 구조적 정보도 확인할 수 있다.Windows 사례R Commander 화면에서  버튼을 누르면 다음과 같은 내부 구성을 볼 수 있다:Linux 사례 (Ubuntu 18.04)\nContrived repeated-measures data O’Brien Kaiser (1985). details see OBrienKaiser, \"wide\" form data.\n\ndata frame 240 observations following 6 variables.\n\ntreatment\n\n\n-subjects factor levels control, , B.\n\n\n-subjects factor levels control, , B.\n\ngender\n\n\n-subjects factor levels F, M.\n\n\n-subjects factor levels F, M.\n\nscore\n\n\nnumeric response variable.\n\n\nnumeric response variable.\n\nid\n\n\nsubject id number.\n\n\nsubject id number.\n\nphase\n\n\nwithin-subjects factor levels pre, post, fup.\n\n\nwithin-subjects factor levels pre, post, fup.\n\nhour\n\n\nwithin-subjects factor levels 1, 2, 3, 4, 5.\n\n\nwithin-subjects factor levels 1, 2, 3, 4, 5.\n\nO’Brien, R. G., Kaiser, M. K. (1985)\nMANOVA method analyzing repeated measures designs: extensive primer.\nPsychological Bulletin 97, 316–333, Table 7.\n\nOBrienKaiser.\n","code":"\nhead(OBrienKaiserLong, 1) # first subjectOBrienKaiserLong\nhead(OBrienKaiserLong, 15) # first subject\n"},{"path":"데이터셋-datasets.html","id":"airquality---datasets-airquality","chapter":"9 .  데이터셋 / datasets","heading":"9.5 airquality - datasets > airquality","text":"Linux 사례 (MX 21)R이 시작될 때, datasets 패키지가 자동으로 호출된다. 따라서 R Commander를 실행할 때, datasets 패키지는 첨부 패키지화되어 메뉴창을 통해서 내부 데이터셋을 찾고 불러올 수 있다.메뉴창에서 순서대로 데이터 > 패키지에 있는 데이터 > 첨부된 패키지에서 데이터셋 읽기… 를 선택하면 다음과 같은 창이 등장한다.Windows 사례출력창을 보면, airquality라는 데이터셋에는 6개의 변수가 있고, 각 변수는 수치형 정보를 담고 있다.Windows 사례Month 변수는 최소 5에서 최대 9로 값이 있는데, 정확히는 5월부터 9월까지일 것이다. 한달 한달을 뜻하는 월(month)은 5월이 9월보다 크다고 할 수 없고, 5월, 6월, 7월, 8월, 9월 등으로 개체화되어 분리된다. 다시 말하면, 요인형 변수가 되어야 한다는 뜻이다.그럼 왜, airqualty 데이터셋의 Month 변수는 수치형으로 되어 있을까. 원자료를 R의 데이터셋으로 불러오는 과정에서 해당 변수의 요인화과정이 생략되었을 것이다.\nDaily air quality measurements New York, May September 1973.\n\ndata frame 153 observations 6 variables.\n\nDaily readings following air quality values May 1, 1973 (\nTuesday) September 30, 1973.\n\n\nOzone: Mean ozone parts per\nbillion 1300 1500 hours Roosevelt Island\n\n\nOzone: Mean ozone parts per\nbillion 1300 1500 hours Roosevelt Island\n\n\nSolar.R: Solar radiation\nLangleys frequency band 4000–7700 Angstroms \n0800 1200 hours Central Park\n\n\nSolar.R: Solar radiation\nLangleys frequency band 4000–7700 Angstroms \n0800 1200 hours Central Park\n\n\nWind: Average wind speed miles\nper hour 0700 1000 hours LaGuardia Airport\n\n\nWind: Average wind speed miles\nper hour 0700 1000 hours LaGuardia Airport\n\n\nTemp: Maximum daily\ntemperature degrees Fahrenheit La Guardia Airport.\n\n\nTemp: Maximum daily\ntemperature degrees Fahrenheit La Guardia Airport.\n\ndata obtained New York State Department \nConservation (ozone data) National Weather Service\n(meteorological data).\n\nChambers, J. M., Cleveland, W. S., Kleiner, B. Tukey, P. . (1983)\nGraphical Methods Data Analysis.\nBelmont, CA: Wadsworth.\n","code":"airquality\nrequire(graphics)\npairs(airquality, panel = panel.smooth, main = \"airquality data\")\n"},{"path":"데이터셋-datasets.html","id":"bfox---cardata-bfox","chapter":"9 .  데이터셋 / datasets","heading":"9.6 Bfox - carData > Bfox","text":"Linux 사례 (MX 21)Linux 사례 (MX 21)Bfox 데이터셋이 활성화되었다면, 도움말 기능을 통하여 데이터셋의 정보를 확인할 수 있다.Linux 사례 (MX 21)\nBfox data frame 30 rows 7 columns.\nTime-series data Canadian women’s labor-force participation,\n1946–1975.\n\ndata frame contains following columns:\n\npartic\n\n\nPercent adult women workforce.\n\n\nPercent adult women workforce.\n\ntfr\n\n\nTotal fertility rate: expected births cohort 1000\nwomen current age-specific fertility rates.\n\n\nTotal fertility rate: expected births cohort 1000\nwomen current age-specific fertility rates.\n\nmenwage\n\n\nMen’s average weekly wages, constant 1935 dollars \nadjusted current tax rates.\n\n\nMen’s average weekly wages, constant 1935 dollars \nadjusted current tax rates.\n\nwomwage\n\n\nWomen’s average weekly wages.\n\n\nWomen’s average weekly wages.\n\ndebt\n\n\nPer-capita consumer debt, constant dollars.\n\n\nPer-capita consumer debt, constant dollars.\n\nparttime\n\n\nPercent active workforce working 34 hours per week \nless.\n\n\nPercent active workforce working 34 hours per week \nless.\n\nvalue tfr 1973 misrecorded 2931; 1931.\n\nFox, B. (1980)\nWomen’s Domestic Labour Involvement\nWage Work. Unpublished doctoral dissertation, p. 449.\n\nFox, J. (2016)\nApplied Regression Analysis Generalized Linear Models,\nThird Edition. Sage.\n","code":"\ndata(Bfox, package=\"carData\")\nBfox\n"},{"path":"데이터셋-datasets.html","id":"sleep---datasets-sleep","chapter":"9 .  데이터셋 / datasets","heading":"9.7 sleep - datasets > sleep","text":"Linux 사례 (MX 21)Linux 사례 (MX 21)데이터셋의 내부는 다음과 같다:Linux 사례 (MX 21)\nData show effect two soporific drugs (increase hours\nsleep compared control) 10 patients.\n\ndata frame 20 observations 3 variables.\n\ngroup variable name may misleading data:\nrepresent measurements 10 persons, groups.\nCushny, . R. Peebles, . R. (1905)\naction optical isomers: II hyoscines.\nJournal Physiology 32, 501–510.\n\nStudent (1908)\nprobable error mean.\nBiometrika, 6, 20.\n\nScheff챕, Henry (1959)\nAnalysis Variance.\nNew York, NY: Wiley.\n","code":"\ndata(sleep, package=\"datasets\")\nsummary(sleep)\nstr(sleep)sleep\nrequire(stats)\n## Student's paired t-test\nwith(sleep,\n     t.test(extra[group == 1],\n            extra[group == 2], paired = TRUE))\n\n## The sleep *prolongations*\nsleep1 <- with(sleep, extra[group == 2] - extra[group == 1])\nsummary(sleep1)\nstripchart(sleep1, method = \"stack\", xlab = \"hours\",\n           main = \"Sleep prolongation (n = 10)\")\nboxplot(sleep1, horizontal = TRUE, add = TRUE,\n        at = .6, pars = list(boxwex = 0.5, staplewex = 0.25))\n"},{"path":"데이터셋-datasets.html","id":"davisthin---cardata-davisthin","chapter":"9 .  데이터셋 / datasets","heading":"9.8 DavisThin - carData > DavisThin","text":"Linux 사례 (MX 21)Linux 사례 (MX 21)Linux 사례 (MX 21)\nDavisThin data frame 191 rows 7 columns.\npart larger dataset study eating disorders.\nseven variables data frame comprise \"drive thinness\"\nscale, formed summing items.\n\ndata frame contains following columns:\n\nDT1\n\n\nnumeric vector\n\n\nnumeric vector\n\nDT2\n\n\nnumeric vector\n\n\nnumeric vector\n\nDT3\n\n\nnumeric vector\n\n\nnumeric vector\n\nDT4\n\n\nnumeric vector\n\n\nnumeric vector\n\nDT5\n\n\nnumeric vector\n\n\nnumeric vector\n\nDT6\n\n\nnumeric vector\n\n\nnumeric vector\n\nDT7\n\n\nnumeric vector\n\n\nnumeric vector\n\nDavis, C., G. Claridge, D. Cerullo (1997)\nPersonality factors\npredisposing weight preoccupation: continuum approach \nassociation eating disorders personality disorders.\nJournal Psychiatric Research 31, 467–480. [personal communication authors.]\n\nFox, J. Weisberg, S. (2019)\nR Companion Applied Regression, Third Edition, Sage.\n","code":"\nhelp(\"DavisThin\")DavisThin"},{"path":"데이터셋-datasets.html","id":"usarrests---datasets-usarrests","chapter":"9 .  데이터셋 / datasets","heading":"9.9 USArrests - datasets > USArrests","text":"Linux 사례(MX 21)Linux 사례(MX 21)Linux 사례(MX 21)R Commander 화면 상단에서  버튼을 누르면 아래와 같은 내부 구성을 확인할 수 있다.\ndata set contains statistics, arrests per 100,000 residents\nassault, murder, rape 50 US states 1973.\nAlso given percent population living urban areas.\n\ndata frame 50 observations 4 variables.\n\nUSArrests contains data McNeil’s monograph. \nUrbanPop percentages, review table (. 21) \nStatistical Abstracts 1975 reveals transcription error Maryland\n(McNeil used “round even” rule R’s\nround() uses), found Daniel S Coven (Arizona).\n\nSee example correct error improve accuracy\n‘<n>.5’ percentages.\n\nWorld Almanac Book facts 1975. (Crime rates).\n\nStatistical Abstracts United States 1975, p.20, (Urban rates),\npossibly available \nhttps://books.google.ch/books?id=zl9qAAAAMAAJ&pg=PA20.\n\nMcNeil, D. R. (1977)\nInteractive Data Analysis.\nNew York: Wiley.\n\nstate data sets.\n","code":"\ndata(USArrests, package=\"datasets\")\nhelp(\"USArrests\")USArrests\nsummary(USArrests)\n\nrequire(graphics)\npairs(USArrests, panel = panel.smooth, main = \"USArrests data\")\n\n## Difference between 'USArrests' and its correction\nUSArrests[\"Maryland\", \"UrbanPop\"] # 67 -- the transcription error\nUA.C <- USArrests\nUA.C[\"Maryland\", \"UrbanPop\"] <- 76.6\n\n## also +/- 0.5 to restore the original  <n>.5  percentages\ns5u <- c(\"Colorado\", \"Florida\", \"Mississippi\", \"Wyoming\")\ns5d <- c(\"Nebraska\", \"Pennsylvania\")\nUA.C[s5u, \"UrbanPop\"] <- UA.C[s5u, \"UrbanPop\"] + 0.5\nUA.C[s5d, \"UrbanPop\"] <- UA.C[s5d, \"UrbanPop\"] - 0.5\n\n## ==> UA.C  is now a *C*orrected version of  USArrests\n"},{"path":"데이터셋-datasets.html","id":"birthwt---mass-birthwt","chapter":"9 .  데이터셋 / datasets","heading":"9.10 birthwt - MASS > birthwt","text":"Linux 사례 (MX 21)birthwt 데이터셋이 활성화된 후,  버튼을 누르면 아래와 같이 내부 구성을 볼 수 있다:Linux 사례 (MX 21)Linux 사례 (MX 21)\nbirthwt data frame 189 rows 10 columns.\ndata collected Baystate Medical Center, Springfield, Mass\n1986.\n\ndata frame contains following columns:\n\nlow\n\n\nindicator birth weight less 2.5 kg.\n\n\nindicator birth weight less 2.5 kg.\n\nage\n\n\nmother’s age years.\n\n\nmother’s age years.\n\nlwt\n\n\nmother’s weight pounds last menstrual period.\n\n\nmother’s weight pounds last menstrual period.\n\nrace\n\n\nmother’s race (1 = white, 2 = black,\n3 = ).\n\n\nmother’s race (1 = white, 2 = black,\n3 = ).\n\nsmoke\n\n\nsmoking status pregnancy.\n\n\nsmoking status pregnancy.\n\nptl\n\n\nnumber previous premature labours.\n\n\nnumber previous premature labours.\n\nht\n\n\nhistory hypertension.\n\n\nhistory hypertension.\n\nui\n\n\npresence uterine irritability.\n\n\npresence uterine irritability.\n\nftv\n\n\nnumber physician visits first trimester.\n\n\nnumber physician visits first trimester.\n\nbwt\n\n\nbirth weight grams.\n\n\nbirth weight grams.\n\nHosmer, D.W. Lemeshow, S. (1989)\nApplied Logistic Regression. New York: Wiley\n\nVenables, W. N. Ripley, B. D. (2002)\nModern Applied Statistics S. Fourth edition. Springer.\n","code":"\ndata(birthwt, package=\"MASS\")\nhelp(\"birthwt\")\nbirthwt\n\nbwt <- with(birthwt, {\nrace <- factor(race, labels = c(\"white\", \"black\", \"other\"))\nptd <- factor(ptl > 0)\nftv <- factor(ftv)\nlevels(ftv)[-(1:2)] <- \"2+\"\ndata.frame(low = factor(low), age, lwt, race, smoke = (smoke > 0),\n           ptd, ht = (ht > 0), ui = (ui > 0), ftv)\n})\noptions(contrasts = c(\"contr.treatment\", \"contr.poly\"))\nglm(low ~ ., binomial, bwt)\n"},{"path":"데이터셋-datasets.html","id":"friendly---cardata-friendly","chapter":"9 .  데이터셋 / datasets","heading":"9.11 Friendly - carData > Friendly","text":"Linux 사례 (MX 21)Linux 사례 (MX 21)\nFriendly data frame 30 rows 2 columns.\ndata experiment subjects’ ability remember words\nbased presentation format.\n\ndata frame contains following columns:\n\ncondition\n\n\nfactor levels:\n, Recalled words presented others;\nMeshed, Recalled words meshed others;\nSFR, Standard free recall.\n\n\nfactor levels:\n, Recalled words presented others;\nMeshed, Recalled words meshed others;\nSFR, Standard free recall.\n\ncorrect\n\n\nNumber words correctly recalled, 40 final trial experiment.\n\n\nNumber words correctly recalled, 40 final trial experiment.\n\nFriendly, M. Franklin, P. (1980)\nInteractive presentation multitrial free recall.\nMemory Cognition\n8 265–270 [Personal communication M. Friendly].\n\nFox, J. (2016)\nApplied Regression Analysis Generalized Linear Models,\nThird Edition. Sage.\n\nFox, J. Weisberg, S. (2019)\nR Companion Applied Regression, Third Edition, Sage.\n","code":"\ndata(Friendly, package=\"carData\")\nhelp(\"Friendly\")\nFriendly\n"},{"path":"데이터셋-datasets.html","id":"cowles---cardata-cowles","chapter":"9 .  데이터셋 / datasets","heading":"9.12 Cowles - carData > Cowles","text":"Linux 사례 (MX 21)Linux 사례 (MX 21)\nCowles data frame 1421 rows 4 columns.\ndata come study personality determinants\nvolunteering psychological research.\n\ndata frame contains following columns:\n\nneuroticism\n\n\nscale Eysenck personality inventory\n\n\nscale Eysenck personality inventory\n\nextraversion\n\n\nscale Eysenck personality inventory\n\n\nscale Eysenck personality inventory\n\nsex\n\n\nfactor levels: female; male\n\n\nfactor levels: female; male\n\nvolunteer\n\n\nvolunteeing, factor levels: ; yes\n\n\nvolunteeing, factor levels: ; yes\n\nCowles, M. C. Davis (1987)\nsubject matter psychology: Volunteers.\nBritish Journal Social Psychology 26, 97–102.\n","code":"\ndata(Cowles, package=\"carData\")\nhelp(\"Cowles\")Cowles"},{"path":"데이터셋-datasets.html","id":"adler---cardata-adler","chapter":"9 .  데이터셋 / datasets","heading":"9.13 Adler - carData > Adler","text":"Linux 사례 (MX 21)데이터 > 패키지에 있는 데이터 > 첨부된 패키지에서 데이터셋 읽기… 기능을 선택하면, 위와 같은 메뉴 창을 보게된다.carData를 선택하여 두번 클릭하면, 오른쪽에 carData 패키지에 내장된 데이터셋 목록이 등장한다. Adler 데이터셋을 선택한다.Linux 사례 (MX 21)\nAdler data frame 108 rows 3 columns.\n\n“experimenters” actual subjects study.\ncollected ratings apparent success \npeople pictures pre-selected \naverage appearance success. experimenters told prior collecting\ndata particular subjects either high low tendency rate\nappearance success, instructed get good data,\nscientific data, given instruction. \nexperimenter collected ratings 18 randomly assigned\nsubjects. version Adler data taken Erickson Nosanchuk (1977).\ndata described original source, Adler (1973), complex structure.\n\ndata frame contains following columns:\n\ninstruction\n\n\nfactor levels:\ngood, good data;\nnone, stress;\nscientific, scientific data.\n\n\nfactor levels:\ngood, good data;\nnone, stress;\nscientific, scientific data.\n\nexpectation\n\n\nfactor levels:\nhigh, expect high ratings;\nlow, expect low ratings.\n\n\nfactor levels:\nhigh, expect high ratings;\nlow, expect low ratings.\n\nrating\n\n\naverage rating obtained.\n\n\naverage rating obtained.\n\nErickson, B. H., Nosanchuk, T. . (1977)\nUnderstanding Data. McGraw-Hill Ryerson.\n\nAdler, N. E. (1973)\nImpact prior sets given experimenters subjects experimenter\nexpectancy effect.\nSociometry 36, 113–126.\n","code":"\ndata(Adler, package=\"carData\")  # Adler 뜲씠꽣뀑 솢꽦솕떆궎湲NAhelp(\"Adler\", package=\"carData\")# 룄<9b>留먰뙆씪 뿴湲NA\nAdler\n"},{"path":"데이터셋-datasets.html","id":"warpbreaks---datasets-warpbreaks","chapter":"9 .  데이터셋 / datasets","heading":"9.14 warpbreaks - datasets > warpbreaks","text":"Linux 사례 (MX 21)Linux 사례 (MX 21)R Commander 화면 상단 우측에 있는  버튼을 누른다. 아래와 같이 warpbreaks 데이터셋의 내부 구성을 볼 수 있다.Linux 사례 (MX 21)\ndata set gives number warp breaks per loom, loom\ncorresponds fixed length yarn.\n\ndata frame 54 observations 3 variables.\n\nmeasurements 9 looms six types warp\n(AL, , AH, BL, BM, BH).\n\nTippett, L. H. C. (1950)\nTechnological Applications Statistics.\nWiley. Page 106.\n\nTukey, J. W. (1977)\nExploratory Data Analysis.\nAddison-Wesley.\n\nMcNeil, D. R. (1977)\nInteractive Data Analysis.\nWiley.\n\nxtabs ways display data table.\n","code":"\ndata(warpbreaks, package=\"datasets\") # 뜲씠꽣뀑 遺덈윭삤湲NAhelp(\"warpbreaks\")                   # 뜲씠꽣뀑 룄<9b>留<90> 蹂닿린NAsummary(warpbreaks)                  # 뜲씠꽣뀑 넻怨<84> 슂빟 蹂닿린NAwarpbreaks\nrequire(stats); require(graphics)\nsummary(warpbreaks)\nopar <- par(mfrow = c(1, 2), oma = c(0, 0, 1.1, 0))\nplot(breaks ~ tension, data = warpbreaks, col = \"lightgray\",\n     varwidth = TRUE, subset = wool == \"A\", main = \"Wool A\")\nplot(breaks ~ tension, data = warpbreaks, col = \"lightgray\",\n     varwidth = TRUE, subset = wool == \"B\", main = \"Wool B\")\nmtext(\"warpbreaks data\", side = 3, outer = TRUE)\npar(opar)\nsummary(fm1 <- lm(breaks ~ wool*tension, data = warpbreaks))\nanova(fm1)\n"},{"path":"참고문헌.html","id":"참고문헌","chapter":"참고문헌","heading":"참고문헌","text":"","code":""}]
